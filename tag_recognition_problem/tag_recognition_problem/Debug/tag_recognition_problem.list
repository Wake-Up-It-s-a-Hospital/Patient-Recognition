
tag_recognition_problem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f48  08004f48  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f48  08004f48  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00005f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00005f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004f50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000070  08004fc0  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004fc0  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ada7  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f19  00000000  00000000  00010e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00012d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000806  00000000  00000000  000137c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183be  00000000  00000000  00013fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e390  00000000  00000000  0002c384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086576  00000000  00000000  0003a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0c8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  000c0cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000c3e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e6c 	.word	0x08004e6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004e6c 	.word	0x08004e6c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fefd 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	@ (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fd6c 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fd5e 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	@ 0x28
 8000206:	f000 fc9c 	bl	8000b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	@ 0x28
 800020c:	f000 fcb5 	bl	8000b7a <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800022c:	4b12      	ldr	r3, [pc, #72]	@ (8000278 <MX_I2C2_Init+0x50>)
 800022e:	4a13      	ldr	r2, [pc, #76]	@ (800027c <MX_I2C2_Init+0x54>)
 8000230:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000232:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <MX_I2C2_Init+0x50>)
 8000234:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <MX_I2C2_Init+0x58>)
 8000236:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000238:	4b0f      	ldr	r3, [pc, #60]	@ (8000278 <MX_I2C2_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800023e:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <MX_I2C2_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <MX_I2C2_Init+0x50>)
 8000246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800024a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <MX_I2C2_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <MX_I2C2_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <MX_I2C2_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <MX_I2C2_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <MX_I2C2_Init+0x50>)
 8000266:	f000 fee7 	bl	8001038 <HAL_I2C_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f960 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000008c 	.word	0x2000008c
 800027c:	40005800 	.word	0x40005800
 8000280:	000186a0 	.word	0x000186a0

08000284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a1a      	ldr	r2, [pc, #104]	@ (8000308 <HAL_I2C_MspInit+0x84>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d12c      	bne.n	80002fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	4b19      	ldr	r3, [pc, #100]	@ (800030c <HAL_I2C_MspInit+0x88>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a18      	ldr	r2, [pc, #96]	@ (800030c <HAL_I2C_MspInit+0x88>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b16      	ldr	r3, [pc, #88]	@ (800030c <HAL_I2C_MspInit+0x88>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80002bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80002c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002c2:	2312      	movs	r3, #18
 80002c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c6:	2303      	movs	r3, #3
 80002c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	4619      	mov	r1, r3
 80002d0:	480f      	ldr	r0, [pc, #60]	@ (8000310 <HAL_I2C_MspInit+0x8c>)
 80002d2:	f000 fcf3 	bl	8000cbc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <HAL_I2C_MspInit+0x88>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	4a0c      	ldr	r2, [pc, #48]	@ (800030c <HAL_I2C_MspInit+0x88>)
 80002dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002e0:	61d3      	str	r3, [r2, #28]
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <HAL_I2C_MspInit+0x88>)
 80002e4:	69db      	ldr	r3, [r3, #28]
 80002e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	2021      	movs	r0, #33	@ 0x21
 80002f4:	f000 fc25 	bl	8000b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80002f8:	2021      	movs	r0, #33	@ 0x21
 80002fa:	f000 fc3e 	bl	8000b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80002fe:	bf00      	nop
 8000300:	3720      	adds	r7, #32
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40005800 	.word	0x40005800
 800030c:	40021000 	.word	0x40021000
 8000310:	40010c00 	.word	0x40010c00

08000314 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800031c:	1d39      	adds	r1, r7, #4
 800031e:	f04f 33ff 	mov.w	r3, #4294967295
 8000322:	2201      	movs	r2, #1
 8000324:	4803      	ldr	r0, [pc, #12]	@ (8000334 <__io_putchar+0x20>)
 8000326:	f003 fbf9 	bl	8003b1c <HAL_UART_Transmit>
    return ch;
 800032a:	687b      	ldr	r3, [r7, #4]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000128 	.word	0x20000128

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f000 faa3 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000342:	f000 f89f 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f7ff ff01 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800034a:	f000 fa0f 	bl	800076c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800034e:	f7ff ff6b 	bl	8000228 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  printf("Connect Complete!!");
 8000352:	483e      	ldr	r0, [pc, #248]	@ (800044c <main+0x114>)
 8000354:	f003 fe78 	bl	8004048 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	  t_ok = HAL_I2C_Master_Transmit(&hi2c2, (HUSKY_ADDRESS << 1), stm_cmd, sizeof(stm_cmd), HAL_MAX_DELAY);
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2306      	movs	r3, #6
 8000360:	4a3b      	ldr	r2, [pc, #236]	@ (8000450 <main+0x118>)
 8000362:	2164      	movs	r1, #100	@ 0x64
 8000364:	483b      	ldr	r0, [pc, #236]	@ (8000454 <main+0x11c>)
 8000366:	f000 ffbf 	bl	80012e8 <HAL_I2C_Master_Transmit>
 800036a:	4603      	mov	r3, r0
 800036c:	461a      	mov	r2, r3
 800036e:	4b3a      	ldr	r3, [pc, #232]	@ (8000458 <main+0x120>)
 8000370:	701a      	strb	r2, [r3, #0]
	  r_ok = HAL_I2C_Master_Receive_IT(&hi2c2, (HUSKY_ADDRESS << 1), husky, sizeof(husky));
 8000372:	231e      	movs	r3, #30
 8000374:	4a39      	ldr	r2, [pc, #228]	@ (800045c <main+0x124>)
 8000376:	2164      	movs	r1, #100	@ 0x64
 8000378:	4836      	ldr	r0, [pc, #216]	@ (8000454 <main+0x11c>)
 800037a:	f001 f8b3 	bl	80014e4 <HAL_I2C_Master_Receive_IT>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	4b37      	ldr	r3, [pc, #220]	@ (8000460 <main+0x128>)
 8000384:	701a      	strb	r2, [r3, #0]
	  i2c_error = HAL_I2C_GetError(&hi2c2);
 8000386:	4833      	ldr	r0, [pc, #204]	@ (8000454 <main+0x11c>)
 8000388:	f001 fafc 	bl	8001984 <HAL_I2C_GetError>
 800038c:	4603      	mov	r3, r0
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b34      	ldr	r3, [pc, #208]	@ (8000464 <main+0x12c>)
 8000392:	701a      	strb	r2, [r3, #0]

	  if (t_ok != HAL_OK)
 8000394:	4b30      	ldr	r3, [pc, #192]	@ (8000458 <main+0x120>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d007      	beq.n	80003ac <main+0x74>
	  {

	      printf("I2C TX failed, error: 0x%08lX\n", HAL_I2C_GetError(&hi2c2));
 800039c:	482d      	ldr	r0, [pc, #180]	@ (8000454 <main+0x11c>)
 800039e:	f001 faf1 	bl	8001984 <HAL_I2C_GetError>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4619      	mov	r1, r3
 80003a6:	4830      	ldr	r0, [pc, #192]	@ (8000468 <main+0x130>)
 80003a8:	f003 fe4e 	bl	8004048 <iprintf>

	  }

	  if (t_ok == HAL_OK)
 80003ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000458 <main+0x120>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d147      	bne.n	8000444 <main+0x10c>
	  	  {
	  	      if (r_ok == HAL_OK)
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <main+0x128>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d143      	bne.n	8000444 <main+0x10c>
	  	      {
	  	    	  printf("RAW: ");
 80003bc:	482b      	ldr	r0, [pc, #172]	@ (800046c <main+0x134>)
 80003be:	f003 fe43 	bl	8004048 <iprintf>
	  	    	  for (int i = 0; i < 30; i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	e00a      	b.n	80003de <main+0xa6>
	  	    	  {
	  	    	      printf("%02X ", husky[i]);
 80003c8:	4a24      	ldr	r2, [pc, #144]	@ (800045c <main+0x124>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4827      	ldr	r0, [pc, #156]	@ (8000470 <main+0x138>)
 80003d4:	f003 fe38 	bl	8004048 <iprintf>
	  	    	  for (int i = 0; i < 30; i++)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3301      	adds	r3, #1
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b1d      	cmp	r3, #29
 80003e2:	ddf1      	ble.n	80003c8 <main+0x90>
	  	    	  }
	  	    	  printf("\n");
 80003e4:	200a      	movs	r0, #10
 80003e6:	f003 fe41 	bl	800406c <putchar>

	  	    	if (husky[0] == 0x55 && husky[1] == 0xAA)
 80003ea:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <main+0x124>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b55      	cmp	r3, #85	@ 0x55
 80003f0:	d125      	bne.n	800043e <main+0x106>
 80003f2:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <main+0x124>)
 80003f4:	785b      	ldrb	r3, [r3, #1]
 80003f6:	2baa      	cmp	r3, #170	@ 0xaa
 80003f8:	d121      	bne.n	800043e <main+0x106>
	  	    	{
	  	    		corx = husky[8] | (husky[9] << 8);
 80003fa:	4b18      	ldr	r3, [pc, #96]	@ (800045c <main+0x124>)
 80003fc:	7a1b      	ldrb	r3, [r3, #8]
 80003fe:	b25a      	sxtb	r2, r3
 8000400:	4b16      	ldr	r3, [pc, #88]	@ (800045c <main+0x124>)
 8000402:	7a5b      	ldrb	r3, [r3, #9]
 8000404:	021b      	lsls	r3, r3, #8
 8000406:	b25b      	sxtb	r3, r3
 8000408:	4313      	orrs	r3, r2
 800040a:	b25b      	sxtb	r3, r3
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b19      	ldr	r3, [pc, #100]	@ (8000474 <main+0x13c>)
 8000410:	701a      	strb	r2, [r3, #0]
				    cory = husky[10] | (husky[11] << 8);
 8000412:	4b12      	ldr	r3, [pc, #72]	@ (800045c <main+0x124>)
 8000414:	7a9b      	ldrb	r3, [r3, #10]
 8000416:	b25a      	sxtb	r2, r3
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <main+0x124>)
 800041a:	7adb      	ldrb	r3, [r3, #11]
 800041c:	021b      	lsls	r3, r3, #8
 800041e:	b25b      	sxtb	r3, r3
 8000420:	4313      	orrs	r3, r2
 8000422:	b25b      	sxtb	r3, r3
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <main+0x140>)
 8000428:	701a      	strb	r2, [r3, #0]
				    printf("x: %d, y: %d \n", corx, cory);
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <main+0x13c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <main+0x140>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4811      	ldr	r0, [pc, #68]	@ (800047c <main+0x144>)
 8000438:	f003 fe06 	bl	8004048 <iprintf>
 800043c:	e002      	b.n	8000444 <main+0x10c>
	  	    	}

	  	    	else
	  	    	{
	  	    		printf("Invalid frame \n");
 800043e:	4810      	ldr	r0, [pc, #64]	@ (8000480 <main+0x148>)
 8000440:	f003 fe72 	bl	8004128 <puts>
	  	    	}
	  	      }
	  	  }
	  HAL_Delay(10);  // 100ms 주기�???? ?���????
 8000444:	200a      	movs	r0, #10
 8000446:	f000 fa81 	bl	800094c <HAL_Delay>
  {	  t_ok = HAL_I2C_Master_Transmit(&hi2c2, (HUSKY_ADDRESS << 1), stm_cmd, sizeof(stm_cmd), HAL_MAX_DELAY);
 800044a:	e785      	b.n	8000358 <main+0x20>
 800044c:	08004e84 	.word	0x08004e84
 8000450:	20000000 	.word	0x20000000
 8000454:	2000008c 	.word	0x2000008c
 8000458:	2000011e 	.word	0x2000011e
 800045c:	200000e0 	.word	0x200000e0
 8000460:	2000011f 	.word	0x2000011f
 8000464:	20000120 	.word	0x20000120
 8000468:	08004e98 	.word	0x08004e98
 800046c:	08004eb8 	.word	0x08004eb8
 8000470:	08004ec0 	.word	0x08004ec0
 8000474:	20000121 	.word	0x20000121
 8000478:	20000122 	.word	0x20000122
 800047c:	08004ec8 	.word	0x08004ec8
 8000480:	08004ed8 	.word	0x08004ed8

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b090      	sub	sp, #64	@ 0x40
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	2228      	movs	r2, #40	@ 0x28
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f003 ff28 	bl	80042e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a6:	2301      	movs	r3, #1
 80004a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004aa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	2301      	movs	r3, #1
 80004b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b8:	2302      	movs	r3, #2
 80004ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c8:	f107 0318 	add.w	r3, r7, #24
 80004cc:	4618      	mov	r0, r3
 80004ce:	f002 fec5 	bl	800325c <HAL_RCC_OscConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004d8:	f000 f82c 	bl	8000534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004dc:	230f      	movs	r3, #15
 80004de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e0:	2302      	movs	r3, #2
 80004e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2102      	movs	r1, #2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 f932 	bl	8003760 <HAL_RCC_ClockConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000502:	f000 f817 	bl	8000534 <Error_Handler>
  }
}
 8000506:	bf00      	nop
 8000508:	3740      	adds	r7, #64	@ 0x40
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <HAL_I2C_MasterRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	debug_value[30] = husky[30];
 8000518:	4b04      	ldr	r3, [pc, #16]	@ (800052c <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800051a:	7f9a      	ldrb	r2, [r3, #30]
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800051e:	779a      	strb	r2, [r3, #30]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	200000e0 	.word	0x200000e0
 8000530:	20000100 	.word	0x20000100

08000534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <Error_Handler+0x8>

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	@ (800059c <HAL_MspInit+0x5c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a14      	ldr	r2, [pc, #80]	@ (800059c <HAL_MspInit+0x5c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_MspInit+0x5c>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_MspInit+0x5c>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <HAL_MspInit+0x5c>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <HAL_MspInit+0x5c>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <HAL_MspInit+0x60>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <HAL_MspInit+0x60>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010000 	.word	0x40010000

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <NMI_Handler+0x4>

080005ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <MemManage_Handler+0x4>

080005bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <BusFault_Handler+0x4>

080005c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <UsageFault_Handler+0x4>

080005cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 f98e 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <I2C2_EV_IRQHandler+0x10>)
 8000602:	f001 f817 	bl	8001634 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000008c 	.word	0x2000008c

08000610 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000614:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000618:	f000 fcec 	bl	8000ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e00a      	b.n	8000648 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000632:	f3af 8000 	nop.w
 8000636:	4601      	mov	r1, r0
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	60ba      	str	r2, [r7, #8]
 800063e:	b2ca      	uxtb	r2, r1
 8000640:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf0      	blt.n	8000632 <_read+0x12>
  }

  return len;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e009      	b.n	8000680 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	60ba      	str	r2, [r7, #8]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fe4d 	bl	8000314 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf1      	blt.n	800066c <_write+0x12>
  }
  return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <_close>:

int _close(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006b8:	605a      	str	r2, [r3, #4]
  return 0;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <_isatty>:

int _isatty(int file)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
	...

080006f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006fc:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <_sbrk+0x5c>)
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <_sbrk+0x60>)
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <_sbrk+0x64>)
 8000712:	4a12      	ldr	r2, [pc, #72]	@ (800075c <_sbrk+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d207      	bcs.n	8000734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000724:	f003 fe2e 	bl	8004384 <__errno>
 8000728:	4603      	mov	r3, r0
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	e009      	b.n	8000748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <_sbrk+0x64>)
 8000744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20005000 	.word	0x20005000
 8000754:	00000400 	.word	0x00000400
 8000758:	20000124 	.word	0x20000124
 800075c:	200002c0 	.word	0x200002c0

08000760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <MX_USART2_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f003 f96a 	bl	8003a7c <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f7ff fec1 	bl	8000534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000128 	.word	0x20000128
 80007bc:	40004400 	.word	0x40004400

080007c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <HAL_UART_MspInit+0x70>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d123      	bne.n	8000828 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_UART_MspInit+0x74>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <HAL_UART_MspInit+0x74>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ea:	61d3      	str	r3, [r2, #28]
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <HAL_UART_MspInit+0x74>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_UART_MspInit+0x74>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <HAL_UART_MspInit+0x74>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <HAL_UART_MspInit+0x74>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000810:	230c      	movs	r3, #12
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <HAL_UART_MspInit+0x78>)
 8000824:	f000 fa4a 	bl	8000cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800

0800083c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff ff90 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000842:	490c      	ldr	r1, [pc, #48]	@ (8000874 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000844:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a09      	ldr	r2, [pc, #36]	@ (800087c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000858:	4c09      	ldr	r4, [pc, #36]	@ (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f003 fd93 	bl	8004390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fd65 	bl	8000338 <main>
  bx lr
 800086e:	4770      	bx	lr
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000878:	08004f50 	.word	0x08004f50
  ldr r2, =_sbss
 800087c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000880:	200002c0 	.word	0x200002c0

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_Init+0x28>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <HAL_Init+0x28>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000898:	2003      	movs	r0, #3
 800089a:	f000 f947 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f808 	bl	80008b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fe4c 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40022000 	.word	0x40022000

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x54>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4619      	mov	r1, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f95f 	bl	8000b96 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e00e      	b.n	8000900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d80a      	bhi.n	80008fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f000 f927 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f4:	4a06      	ldr	r2, [pc, #24]	@ (8000910 <HAL_InitTick+0x5c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000008 	.word	0x20000008
 800090c:	20000010 	.word	0x20000010
 8000910:	2000000c 	.word	0x2000000c

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	@ (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000010 	.word	0x20000010
 8000934:	20000170 	.word	0x20000170

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	@ (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000170 	.word	0x20000170

0800094c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff fff0 	bl	8000938 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffe0 	bl	8000938 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000010 	.word	0x20000010

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4906      	ldr	r1, [pc, #24]	@ (8000a2c <__NVIC_EnableIRQ+0x34>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	@ (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	@ 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	@ 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff90 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff2d 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff42 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff90 	bl	8000a84 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5f 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff35 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffa2 	bl	8000ae8 <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d005      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2204      	movs	r2, #4
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e051      	b.n	8000c78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 020e 	bic.w	r2, r2, #14
 8000be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0201 	bic.w	r2, r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <HAL_DMA_Abort_IT+0xd4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d029      	beq.n	8000c52 <HAL_DMA_Abort_IT+0xa2>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a21      	ldr	r2, [pc, #132]	@ (8000c88 <HAL_DMA_Abort_IT+0xd8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d022      	beq.n	8000c4e <HAL_DMA_Abort_IT+0x9e>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c8c <HAL_DMA_Abort_IT+0xdc>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01a      	beq.n	8000c48 <HAL_DMA_Abort_IT+0x98>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1e      	ldr	r2, [pc, #120]	@ (8000c90 <HAL_DMA_Abort_IT+0xe0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d012      	beq.n	8000c42 <HAL_DMA_Abort_IT+0x92>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <HAL_DMA_Abort_IT+0xe4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00a      	beq.n	8000c3c <HAL_DMA_Abort_IT+0x8c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <HAL_DMA_Abort_IT+0xe8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d102      	bne.n	8000c36 <HAL_DMA_Abort_IT+0x86>
 8000c30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c34:	e00e      	b.n	8000c54 <HAL_DMA_Abort_IT+0xa4>
 8000c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c3a:	e00b      	b.n	8000c54 <HAL_DMA_Abort_IT+0xa4>
 8000c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c40:	e008      	b.n	8000c54 <HAL_DMA_Abort_IT+0xa4>
 8000c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c46:	e005      	b.n	8000c54 <HAL_DMA_Abort_IT+0xa4>
 8000c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4c:	e002      	b.n	8000c54 <HAL_DMA_Abort_IT+0xa4>
 8000c4e:	2310      	movs	r3, #16
 8000c50:	e000      	b.n	8000c54 <HAL_DMA_Abort_IT+0xa4>
 8000c52:	2301      	movs	r3, #1
 8000c54:	4a11      	ldr	r2, [pc, #68]	@ (8000c9c <HAL_DMA_Abort_IT+0xec>)
 8000c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	4798      	blx	r3
    } 
  }
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020008 	.word	0x40020008
 8000c88:	4002001c 	.word	0x4002001c
 8000c8c:	40020030 	.word	0x40020030
 8000c90:	40020044 	.word	0x40020044
 8000c94:	40020058 	.word	0x40020058
 8000c98:	4002006c 	.word	0x4002006c
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	@ 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	@ (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	@ (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	@ (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	@ (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	@ (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	@ (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	@ (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	@ (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	@ (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	@ (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	@ (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	@ (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	@ 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	@ 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	@ (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	@ (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	@ (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	@ (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	@ (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	@ (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	@ (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	492c      	ldr	r1, [pc, #176]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4922      	ldr	r1, [pc, #136]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4918      	ldr	r1, [pc, #96]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	@ 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f806 	bl	8001024 <HAL_GPIO_EXTI_Callback>
  }
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e12b      	b.n	80012a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d106      	bne.n	8001064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff f910 	bl	8000284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2224      	movs	r2, #36	@ 0x24
 8001068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800108a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800109a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800109c:	f002 fca8 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a81      	ldr	r2, [pc, #516]	@ (80012ac <HAL_I2C_Init+0x274>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d807      	bhi.n	80010bc <HAL_I2C_Init+0x84>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a80      	ldr	r2, [pc, #512]	@ (80012b0 <HAL_I2C_Init+0x278>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	bf94      	ite	ls
 80010b4:	2301      	movls	r3, #1
 80010b6:	2300      	movhi	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	e006      	b.n	80010ca <HAL_I2C_Init+0x92>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4a7d      	ldr	r2, [pc, #500]	@ (80012b4 <HAL_I2C_Init+0x27c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	bf94      	ite	ls
 80010c4:	2301      	movls	r3, #1
 80010c6:	2300      	movhi	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0e7      	b.n	80012a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4a78      	ldr	r2, [pc, #480]	@ (80012b8 <HAL_I2C_Init+0x280>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	0c9b      	lsrs	r3, r3, #18
 80010dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a6a      	ldr	r2, [pc, #424]	@ (80012ac <HAL_I2C_Init+0x274>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d802      	bhi.n	800110c <HAL_I2C_Init+0xd4>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3301      	adds	r3, #1
 800110a:	e009      	b.n	8001120 <HAL_I2C_Init+0xe8>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	4a69      	ldr	r2, [pc, #420]	@ (80012bc <HAL_I2C_Init+0x284>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	099b      	lsrs	r3, r3, #6
 800111e:	3301      	adds	r3, #1
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001132:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	495c      	ldr	r1, [pc, #368]	@ (80012ac <HAL_I2C_Init+0x274>)
 800113c:	428b      	cmp	r3, r1
 800113e:	d819      	bhi.n	8001174 <HAL_I2C_Init+0x13c>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e59      	subs	r1, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fbb1 f3f3 	udiv	r3, r1, r3
 800114e:	1c59      	adds	r1, r3, #1
 8001150:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001154:	400b      	ands	r3, r1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <HAL_I2C_Init+0x138>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1e59      	subs	r1, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fbb1 f3f3 	udiv	r3, r1, r3
 8001168:	3301      	adds	r3, #1
 800116a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116e:	e051      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 8001170:	2304      	movs	r3, #4
 8001172:	e04f      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d111      	bne.n	80011a0 <HAL_I2C_Init+0x168>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	440b      	add	r3, r1
 800118a:	fbb0 f3f3 	udiv	r3, r0, r3
 800118e:	3301      	adds	r3, #1
 8001190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	e012      	b.n	80011c6 <HAL_I2C_Init+0x18e>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	0099      	lsls	r1, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Init+0x196>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e022      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <HAL_I2C_Init+0x1bc>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1e58      	subs	r0, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6859      	ldr	r1, [r3, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	440b      	add	r3, r1
 80011e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f2:	e00f      	b.n	8001214 <HAL_I2C_Init+0x1dc>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	0099      	lsls	r1, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	fbb0 f3f3 	udiv	r3, r0, r3
 800120a:	3301      	adds	r3, #1
 800120c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001210:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	6809      	ldr	r1, [r1, #0]
 8001218:	4313      	orrs	r3, r2
 800121a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69da      	ldr	r2, [r3, #28]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001242:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6911      	ldr	r1, [r2, #16]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68d2      	ldr	r2, [r2, #12]
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	430b      	orrs	r3, r1
 8001256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 0201 	orr.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2220      	movs	r2, #32
 800128e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	000186a0 	.word	0x000186a0
 80012b0:	001e847f 	.word	0x001e847f
 80012b4:	003d08ff 	.word	0x003d08ff
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	10624dd3 	.word	0x10624dd3

080012c0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	2b80      	cmp	r3, #128	@ 0x80
 80012d4:	d103      	bne.n	80012de <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	461a      	mov	r2, r3
 80012f4:	460b      	mov	r3, r1
 80012f6:	817b      	strh	r3, [r7, #10]
 80012f8:	4613      	mov	r3, r2
 80012fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff fb1c 	bl	8000938 <HAL_GetTick>
 8001300:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b20      	cmp	r3, #32
 800130c:	f040 80e0 	bne.w	80014d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2319      	movs	r3, #25
 8001316:	2201      	movs	r2, #1
 8001318:	4970      	ldr	r1, [pc, #448]	@ (80014dc <HAL_I2C_Master_Transmit+0x1f4>)
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f001 fd7a 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001326:	2302      	movs	r3, #2
 8001328:	e0d3      	b.n	80014d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_I2C_Master_Transmit+0x50>
 8001334:	2302      	movs	r3, #2
 8001336:	e0cc      	b.n	80014d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b01      	cmp	r3, #1
 800134c:	d007      	beq.n	800135e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800136c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2221      	movs	r2, #33	@ 0x21
 8001372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2210      	movs	r2, #16
 800137a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	893a      	ldrh	r2, [r7, #8]
 800138e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800139e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013a0:	8979      	ldrh	r1, [r7, #10]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	6a3a      	ldr	r2, [r7, #32]
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f001 fc0a 	bl	8002bc0 <I2C_MasterRequestWrite>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e08d      	b.n	80014d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013cc:	e066      	b.n	800149c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	6a39      	ldr	r1, [r7, #32]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f001 fe38 	bl	8003048 <I2C_WaitOnTXEFlagUntilTimeout>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d107      	bne.n	80013f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e06b      	b.n	80014d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001414:	b29b      	uxth	r3, r3
 8001416:	3b01      	subs	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001422:	3b01      	subs	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b04      	cmp	r3, #4
 8001436:	d11b      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x188>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d017      	beq.n	8001470 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001468:	3b01      	subs	r3, #1
 800146a:	b29a      	uxth	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	6a39      	ldr	r1, [r7, #32]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f001 fe2f 	bl	80030d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00d      	beq.n	800149c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	2b04      	cmp	r3, #4
 8001486:	d107      	bne.n	8001498 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001496:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e01a      	b.n	80014d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d194      	bne.n	80013ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e000      	b.n	80014d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014d0:	2302      	movs	r3, #2
  }
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	00100002 	.word	0x00100002
 80014e0:	ffff0000 	.word	0xffff0000

080014e4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	461a      	mov	r2, r3
 80014f0:	460b      	mov	r3, r1
 80014f2:	817b      	strh	r3, [r7, #10]
 80014f4:	4613      	mov	r3, r2
 80014f6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b20      	cmp	r3, #32
 8001506:	f040 8089 	bne.w	800161c <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800150a:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <HAL_I2C_Master_Receive_IT+0x144>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	4a46      	ldr	r2, [pc, #280]	@ (800162c <HAL_I2C_Master_Receive_IT+0x148>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0a1a      	lsrs	r2, r3, #8
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009a      	lsls	r2, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3b01      	subs	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d112      	bne.n	8001556 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2220      	movs	r2, #32
 800153a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f043 0220 	orr.w	r2, r3, #32
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	e063      	b.n	800161e <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d0df      	beq.n	8001524 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Master_Receive_IT+0x8e>
 800156e:	2302      	movs	r3, #2
 8001570:	e055      	b.n	800161e <HAL_I2C_Master_Receive_IT+0x13a>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2222      	movs	r2, #34	@ 0x22
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2210      	movs	r2, #16
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	893a      	ldrh	r2, [r7, #8]
 80015c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <HAL_I2C_Master_Receive_IT+0x14c>)
 80015d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80015da:	897a      	ldrh	r2, [r7, #10]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80015f6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001606:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001616:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e000      	b.n	800161e <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 800161c:	2302      	movs	r3, #2
  }
}
 800161e:	4618      	mov	r0, r3
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000008 	.word	0x20000008
 800162c:	14f8b589 	.word	0x14f8b589
 8001630:	ffff0000 	.word	0xffff0000

08001634 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001654:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800165c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b10      	cmp	r3, #16
 8001662:	d003      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0x38>
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b40      	cmp	r3, #64	@ 0x40
 8001668:	f040 80b1 	bne.w	80017ce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800168c:	d003      	beq.n	8001696 <HAL_I2C_EV_IRQHandler+0x62>
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001694:	d101      	bne.n	800169a <HAL_I2C_EV_IRQHandler+0x66>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_I2C_EV_IRQHandler+0x68>
 800169a:	2300      	movs	r3, #0
 800169c:	2b01      	cmp	r3, #1
 800169e:	f000 8114 	beq.w	80018ca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00b      	beq.n	80016c4 <HAL_I2C_EV_IRQHandler+0x90>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f001 fdb6 	bl	8003228 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fccf 	bl	8002060 <I2C_Master_SB>
 80016c2:	e083      	b.n	80017cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_I2C_EV_IRQHandler+0xac>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fd46 	bl	800216a <I2C_Master_ADD10>
 80016de:	e075      	b.n	80017cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <HAL_I2C_EV_IRQHandler+0xc8>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fd61 	bl	80021bc <I2C_Master_ADDR>
 80016fa:	e067      	b.n	80017cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001714:	f000 80db 	beq.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <HAL_I2C_EV_IRQHandler+0x10a>
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_I2C_EV_IRQHandler+0x10a>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f92f 	bl	800199a <I2C_MasterTransmit_TXE>
 800173c:	e046      	b.n	80017cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80c2 	beq.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80bc 	beq.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	2b21      	cmp	r3, #33	@ 0x21
 800175a:	d103      	bne.n	8001764 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f9b8 	bl	8001ad2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001762:	e0b4      	b.n	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b40      	cmp	r3, #64	@ 0x40
 8001768:	f040 80b1 	bne.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fa26 	bl	8001bbe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001772:	e0ac      	b.n	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800177e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001782:	f000 80a4 	beq.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <HAL_I2C_EV_IRQHandler+0x178>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_I2C_EV_IRQHandler+0x178>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 faa2 	bl	8001cee <I2C_MasterReceive_RXNE>
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 808b 	beq.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8085 	beq.w	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fb5a 	bl	8001e7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ca:	e080      	b.n	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
 80017cc:	e07f      	b.n	80018ce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e007      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d011      	beq.n	800181e <HAL_I2C_EV_IRQHandler+0x1ea>
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00c      	beq.n	800181e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001814:	69b9      	ldr	r1, [r7, #24]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 ff27 	bl	800266a <I2C_Slave_ADDR>
 800181c:	e05a      	b.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_I2C_EV_IRQHandler+0x206>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 ff62 	bl	80026fc <I2C_Slave_STOPF>
 8001838:	e04c      	b.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	2b21      	cmp	r3, #33	@ 0x21
 800183e:	d002      	beq.n	8001846 <HAL_I2C_EV_IRQHandler+0x212>
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b29      	cmp	r3, #41	@ 0x29
 8001844:	d120      	bne.n	8001888 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <HAL_I2C_EV_IRQHandler+0x238>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_I2C_EV_IRQHandler+0x238>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fe44 	bl	80024f2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800186a:	e032      	b.n	80018d2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d02d      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0x29e>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800187c:	2b00      	cmp	r3, #0
 800187e:	d028      	beq.n	80018d2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fe73 	bl	800256c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001886:	e024      	b.n	80018d2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00d      	beq.n	80018ae <HAL_I2C_EV_IRQHandler+0x27a>
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_I2C_EV_IRQHandler+0x27a>
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fe80 	bl	80025ac <I2C_SlaveReceive_RXNE>
 80018ac:	e012      	b.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 feb0 	bl	8002628 <I2C_SlaveReceive_BTF>
 80018c8:	e004      	b.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80018ca:	bf00      	nop
 80018cc:	e002      	b.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ce:	bf00      	nop
 80018d0:	e000      	b.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
 800191c:	4613      	mov	r3, r2
 800191e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d150      	bne.n	8001a62 <I2C_MasterTransmit_TXE+0xc8>
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b21      	cmp	r3, #33	@ 0x21
 80019c4:	d14d      	bne.n	8001a62 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d01d      	beq.n	8001a08 <I2C_MasterTransmit_TXE+0x6e>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d01a      	beq.n	8001a08 <I2C_MasterTransmit_TXE+0x6e>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019d8:	d016      	beq.n	8001a08 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2211      	movs	r2, #17
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff6a 	bl	80018da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a06:	e060      	b.n	8001aca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a16:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a26:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b40      	cmp	r3, #64	@ 0x40
 8001a40:	d107      	bne.n	8001a52 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff76 	bl	800193c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a50:	e03b      	b.n	8001aca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff3d 	bl	80018da <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a60:	e033      	b.n	8001aca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b21      	cmp	r3, #33	@ 0x21
 8001a66:	d005      	beq.n	8001a74 <I2C_MasterTransmit_TXE+0xda>
 8001a68:	7bbb      	ldrb	r3, [r7, #14]
 8001a6a:	2b40      	cmp	r3, #64	@ 0x40
 8001a6c:	d12d      	bne.n	8001aca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b22      	cmp	r3, #34	@ 0x22
 8001a72:	d12a      	bne.n	8001aca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a8c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a8e:	e01c      	b.n	8001aca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b40      	cmp	r3, #64	@ 0x40
 8001a9a:	d103      	bne.n	8001aa4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f88e 	bl	8001bbe <I2C_MemoryTransmit_TXE_BTF>
}
 8001aa2:	e012      	b.n	8001aca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ac8:	e7ff      	b.n	8001aca <I2C_MasterTransmit_TXE+0x130>
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ade:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b21      	cmp	r3, #33	@ 0x21
 8001aea:	d164      	bne.n	8001bb6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001b1a:	e04c      	b.n	8001bb6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d01d      	beq.n	8001b5e <I2C_MasterTransmit_BTF+0x8c>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d01a      	beq.n	8001b5e <I2C_MasterTransmit_BTF+0x8c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b2e:	d016      	beq.n	8001b5e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b3e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2211      	movs	r2, #17
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff febf 	bl	80018da <HAL_I2C_MasterTxCpltCallback>
}
 8001b5c:	e02b      	b.n	8001bb6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b6c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b40      	cmp	r3, #64	@ 0x40
 8001b96:	d107      	bne.n	8001ba8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fecb 	bl	800193c <HAL_I2C_MemTxCpltCallback>
}
 8001ba6:	e006      	b.n	8001bb6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fe92 	bl	80018da <HAL_I2C_MasterTxCpltCallback>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d11d      	bne.n	8001c12 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10b      	bne.n	8001bf6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bee:	1c9a      	adds	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001bf4:	e077      	b.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	121b      	asrs	r3, r3, #8
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c10:	e069      	b.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10b      	bne.n	8001c32 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c30:	e059      	b.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d152      	bne.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b22      	cmp	r3, #34	@ 0x22
 8001c3e:	d10d      	bne.n	8001c5c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c4e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c5a:	e044      	b.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d015      	beq.n	8001c92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b21      	cmp	r3, #33	@ 0x21
 8001c6a:	d112      	bne.n	8001c92 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001c90:	e029      	b.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d124      	bne.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b21      	cmp	r3, #33	@ 0x21
 8001ca0:	d121      	bne.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cb0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fe2f 	bl	800193c <HAL_I2C_MemTxCpltCallback>
}
 8001cde:	e002      	b.n	8001ce6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff faed 	bl	80012c0 <I2C_Flush_DR>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b22      	cmp	r3, #34	@ 0x22
 8001d00:	f040 80b9 	bne.w	8001e76 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d921      	bls.n	8001d5c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	f040 8096 	bne.w	8001e76 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001d5a:	e08c      	b.n	8001e76 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d07f      	beq.n	8001e64 <I2C_MasterReceive_RXNE+0x176>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d002      	beq.n	8001d70 <I2C_MasterReceive_RXNE+0x82>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d179      	bne.n	8001e64 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f001 f9f9 	bl	8003168 <I2C_WaitOnSTOPRequestThroughIT>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d14c      	bne.n	8001e16 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b40      	cmp	r3, #64	@ 0x40
 8001dd4:	d10a      	bne.n	8001dec <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fdb2 	bl	800194e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dea:	e044      	b.n	8001e76 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d002      	beq.n	8001e00 <I2C_MasterReceive_RXNE+0x112>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d103      	bne.n	8001e08 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e06:	e002      	b.n	8001e0e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2212      	movs	r2, #18
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fb7e 	bl	8000510 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e14:	e02f      	b.n	8001e76 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fd7f 	bl	8001960 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e62:	e008      	b.n	8001e76 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e72:	605a      	str	r2, [r3, #4]
}
 8001e74:	e7ff      	b.n	8001e76 <I2C_MasterReceive_RXNE+0x188>
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d11b      	bne.n	8001ece <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ea4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001ecc:	e0c4      	b.n	8002058 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d129      	bne.n	8001f2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d00a      	beq.n	8001f04 <I2C_MasterReceive_BTF+0x86>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d007      	beq.n	8001f04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f2a:	e095      	b.n	8002058 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d17d      	bne.n	8002032 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d002      	beq.n	8001f42 <I2C_MasterReceive_BTF+0xc4>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d108      	bne.n	8001f54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	e016      	b.n	8001f82 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <I2C_MasterReceive_BTF+0xe2>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d108      	bne.n	8001f72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e007      	b.n	8001f82 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001fdc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b40      	cmp	r3, #64	@ 0x40
 8001ff0:	d10a      	bne.n	8002008 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fca4 	bl	800194e <HAL_I2C_MemRxCpltCallback>
}
 8002006:	e027      	b.n	8002058 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d002      	beq.n	800201c <I2C_MasterReceive_BTF+0x19e>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b20      	cmp	r3, #32
 800201a:	d103      	bne.n	8002024 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
 8002022:	e002      	b.n	800202a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2212      	movs	r2, #18
 8002028:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fa70 	bl	8000510 <HAL_I2C_MasterRxCpltCallback>
}
 8002030:	e012      	b.n	8002058 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b40      	cmp	r3, #64	@ 0x40
 8002072:	d117      	bne.n	80020a4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800208c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800208e:	e067      	b.n	8002160 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	b2da      	uxtb	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	611a      	str	r2, [r3, #16]
}
 80020a2:	e05d      	b.n	8002160 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020ac:	d133      	bne.n	8002116 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b21      	cmp	r3, #33	@ 0x21
 80020b8:	d109      	bne.n	80020ce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	e008      	b.n	80020e0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <I2C_Master_SB+0x92>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d108      	bne.n	8002104 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d032      	beq.n	8002160 <I2C_Master_SB+0x100>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02d      	beq.n	8002160 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002112:	605a      	str	r2, [r3, #4]
}
 8002114:	e024      	b.n	8002160 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10e      	bne.n	800213c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	b29b      	uxth	r3, r3
 8002124:	11db      	asrs	r3, r3, #7
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f003 0306 	and.w	r3, r3, #6
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f063 030f 	orn	r3, r3, #15
 8002132:	b2da      	uxtb	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	611a      	str	r2, [r3, #16]
}
 800213a:	e011      	b.n	8002160 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10d      	bne.n	8002160 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	b29b      	uxth	r3, r3
 800214a:	11db      	asrs	r3, r3, #7
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 0306 	and.w	r3, r3, #6
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f063 030e 	orn	r3, r3, #14
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	b2da      	uxtb	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <I2C_Master_ADD10+0x26>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00c      	beq.n	80021b2 <I2C_Master_ADD10+0x48>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b0:	605a      	str	r2, [r3, #4]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b480      	push	{r7}
 80021be:	b091      	sub	sp, #68	@ 0x44
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b22      	cmp	r3, #34	@ 0x22
 80021e4:	f040 8174 	bne.w	80024d0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <I2C_Master_ADDR+0x54>
 80021f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021f4:	2b40      	cmp	r3, #64	@ 0x40
 80021f6:	d10b      	bne.n	8002210 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	633b      	str	r3, [r7, #48]	@ 0x30
 800220c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220e:	e16b      	b.n	80024e8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11d      	bne.n	8002254 <I2C_Master_ADDR+0x98>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002220:	d118      	bne.n	8002254 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002246:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	651a      	str	r2, [r3, #80]	@ 0x50
 8002252:	e149      	b.n	80024e8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d113      	bne.n	8002286 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225e:	2300      	movs	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e120      	b.n	80024c8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 808a 	bne.w	80023a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002294:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002298:	d137      	bne.n	800230a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022b8:	d113      	bne.n	80022e2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	e0f2      	b.n	80024c8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	623b      	str	r3, [r7, #32]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	623b      	str	r3, [r7, #32]
 80022f6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e0de      	b.n	80024c8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230c:	2b08      	cmp	r3, #8
 800230e:	d02e      	beq.n	800236e <I2C_Master_ADDR+0x1b2>
 8002310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002312:	2b20      	cmp	r3, #32
 8002314:	d02b      	beq.n	800236e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002318:	2b12      	cmp	r3, #18
 800231a:	d102      	bne.n	8002322 <I2C_Master_ADDR+0x166>
 800231c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231e:	2b01      	cmp	r3, #1
 8002320:	d125      	bne.n	800236e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002324:	2b04      	cmp	r3, #4
 8002326:	d00e      	beq.n	8002346 <I2C_Master_ADDR+0x18a>
 8002328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232a:	2b02      	cmp	r3, #2
 800232c:	d00b      	beq.n	8002346 <I2C_Master_ADDR+0x18a>
 800232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002330:	2b10      	cmp	r3, #16
 8002332:	d008      	beq.n	8002346 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e007      	b.n	8002356 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002354:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	e0ac      	b.n	80024c8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800237c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e090      	b.n	80024c8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d158      	bne.n	8002462 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d021      	beq.n	80023fa <I2C_Master_ADDR+0x23e>
 80023b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d01e      	beq.n	80023fa <I2C_Master_ADDR+0x23e>
 80023bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d01b      	beq.n	80023fa <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023d0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e012      	b.n	8002420 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002408:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800242e:	d14b      	bne.n	80024c8 <I2C_Master_ADDR+0x30c>
 8002430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002432:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002436:	d00b      	beq.n	8002450 <I2C_Master_ADDR+0x294>
 8002438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243a:	2b01      	cmp	r3, #1
 800243c:	d008      	beq.n	8002450 <I2C_Master_ADDR+0x294>
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	2b08      	cmp	r3, #8
 8002442:	d005      	beq.n	8002450 <I2C_Master_ADDR+0x294>
 8002444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002446:	2b10      	cmp	r3, #16
 8002448:	d002      	beq.n	8002450 <I2C_Master_ADDR+0x294>
 800244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244c:	2b20      	cmp	r3, #32
 800244e:	d13b      	bne.n	80024c8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	e032      	b.n	80024c8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002470:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800247c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002480:	d117      	bne.n	80024b2 <I2C_Master_ADDR+0x2f6>
 8002482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002484:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002488:	d00b      	beq.n	80024a2 <I2C_Master_ADDR+0x2e6>
 800248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248c:	2b01      	cmp	r3, #1
 800248e:	d008      	beq.n	80024a2 <I2C_Master_ADDR+0x2e6>
 8002490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002492:	2b08      	cmp	r3, #8
 8002494:	d005      	beq.n	80024a2 <I2C_Master_ADDR+0x2e6>
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	2b10      	cmp	r3, #16
 800249a:	d002      	beq.n	80024a2 <I2C_Master_ADDR+0x2e6>
 800249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d107      	bne.n	80024b2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80024ce:	e00b      	b.n	80024e8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
}
 80024e6:	e7ff      	b.n	80024e8 <I2C_Master_ADDR+0x32c>
 80024e8:	bf00      	nop
 80024ea:	3744      	adds	r7, #68	@ 0x44
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002500:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02b      	beq.n	8002564 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <I2C_SlaveTransmit_TXE+0x72>
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b29      	cmp	r3, #41	@ 0x29
 800253e:	d111      	bne.n	8002564 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2221      	movs	r2, #33	@ 0x21
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2228      	movs	r2, #40	@ 0x28
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f9c4 	bl	80018ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d011      	beq.n	80025a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02c      	beq.n	8002620 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d114      	bne.n	8002620 <I2C_SlaveReceive_RXNE+0x74>
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80025fa:	d111      	bne.n	8002620 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2222      	movs	r2, #34	@ 0x22
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2228      	movs	r2, #40	@ 0x28
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff f96f 	bl	80018fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002684:	2b28      	cmp	r3, #40	@ 0x28
 8002686:	d125      	bne.n	80026d4 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002696:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	81bb      	strh	r3, [r7, #12]
 80026b6:	e002      	b.n	80026be <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026c6:	89ba      	ldrh	r2, [r7, #12]
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff f91f 	bl	8001910 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026d2:	e00e      	b.n	80026f2 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800271a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002748:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002758:	d172      	bne.n	8002840 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b22      	cmp	r3, #34	@ 0x22
 800275e:	d002      	beq.n	8002766 <I2C_Slave_STOPF+0x6a>
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b2a      	cmp	r3, #42	@ 0x2a
 8002764:	d135      	bne.n	80027d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f043 0204 	orr.w	r2, r3, #4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002798:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fa7e 	bl	8000ca0 <HAL_DMA_GetState>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d049      	beq.n	800283e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	4a69      	ldr	r2, [pc, #420]	@ (8002954 <I2C_Slave_STOPF+0x258>)
 80027b0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe f9fa 	bl	8000bb0 <HAL_DMA_Abort_IT>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03d      	beq.n	800283e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027cc:	4610      	mov	r0, r2
 80027ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d0:	e035      	b.n	800283e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f043 0204 	orr.w	r2, r3, #4
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002804:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fa48 	bl	8000ca0 <HAL_DMA_GetState>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d014      	beq.n	8002840 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	4a4e      	ldr	r2, [pc, #312]	@ (8002954 <I2C_Slave_STOPF+0x258>)
 800281c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe f9c4 	bl	8000bb0 <HAL_DMA_Abort_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002838:	4610      	mov	r0, r2
 800283a:	4798      	blx	r3
 800283c:	e000      	b.n	8002840 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800283e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03e      	beq.n	80028c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d112      	bne.n	800287e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002888:	2b40      	cmp	r3, #64	@ 0x40
 800288a:	d112      	bne.n	80028b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f843 	bl	800295c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80028d6:	e039      	b.n	800294c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b2a      	cmp	r3, #42	@ 0x2a
 80028dc:	d109      	bne.n	80028f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2228      	movs	r2, #40	@ 0x28
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff f806 	bl	80018fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b28      	cmp	r3, #40	@ 0x28
 80028fc:	d111      	bne.n	8002922 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a15      	ldr	r2, [pc, #84]	@ (8002958 <I2C_Slave_STOPF+0x25c>)
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff f805 	bl	800192a <HAL_I2C_ListenCpltCallback>
}
 8002920:	e014      	b.n	800294c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	2b22      	cmp	r3, #34	@ 0x22
 8002928:	d002      	beq.n	8002930 <I2C_Slave_STOPF+0x234>
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b22      	cmp	r3, #34	@ 0x22
 800292e:	d10d      	bne.n	800294c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe ffd9 	bl	80018fe <HAL_I2C_SlaveRxCpltCallback>
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	08002cc5 	.word	0x08002cc5
 8002958:	ffff0000 	.word	0xffff0000

0800295c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002972:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	2b10      	cmp	r3, #16
 8002978:	d002      	beq.n	8002980 <I2C_ITError+0x24>
 800297a:	7bbb      	ldrb	r3, [r7, #14]
 800297c:	2b40      	cmp	r3, #64	@ 0x40
 800297e:	d10a      	bne.n	8002996 <I2C_ITError+0x3a>
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b22      	cmp	r3, #34	@ 0x22
 8002984:	d107      	bne.n	8002996 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002994:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800299c:	2b28      	cmp	r3, #40	@ 0x28
 800299e:	d107      	bne.n	80029b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2228      	movs	r2, #40	@ 0x28
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029ae:	e015      	b.n	80029dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029be:	d00a      	beq.n	80029d6 <I2C_ITError+0x7a>
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b60      	cmp	r3, #96	@ 0x60
 80029c4:	d007      	beq.n	80029d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ea:	d162      	bne.n	8002ab2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d020      	beq.n	8002a4c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8002bb8 <I2C_ITError+0x25c>)
 8002a10:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f8ca 	bl	8000bb0 <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8089 	beq.w	8002b36 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a46:	4610      	mov	r0, r2
 8002a48:	4798      	blx	r3
 8002a4a:	e074      	b.n	8002b36 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	4a59      	ldr	r2, [pc, #356]	@ (8002bb8 <I2C_ITError+0x25c>)
 8002a52:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f8a9 	bl	8000bb0 <HAL_DMA_Abort_IT>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d068      	beq.n	8002b36 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d10b      	bne.n	8002a8a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
 8002ab0:	e041      	b.n	8002b36 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b60      	cmp	r3, #96	@ 0x60
 8002abc:	d125      	bne.n	8002b0a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad6:	2b40      	cmp	r3, #64	@ 0x40
 8002ad8:	d10b      	bne.n	8002af2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe ff35 	bl	8001972 <HAL_I2C_AbortCpltCallback>
 8002b08:	e015      	b.n	8002b36 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d10b      	bne.n	8002b30 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe ff15 	bl	8001960 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10e      	bne.n	8002b64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b72:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d113      	bne.n	8002bb0 <I2C_ITError+0x254>
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b28      	cmp	r3, #40	@ 0x28
 8002b8c:	d110      	bne.n	8002bb0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <I2C_ITError+0x260>)
 8002b92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe febd 	bl	800192a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	08002cc5 	.word	0x08002cc5
 8002bbc:	ffff0000 	.word	0xffff0000

08002bc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d006      	beq.n	8002bea <I2C_MasterRequestWrite+0x2a>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d003      	beq.n	8002bea <I2C_MasterRequestWrite+0x2a>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002be8:	d108      	bne.n	8002bfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e00b      	b.n	8002c14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	2b12      	cmp	r3, #18
 8002c02:	d107      	bne.n	8002c14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f8f7 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c3a:	d103      	bne.n	8002c44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e035      	b.n	8002cb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c50:	d108      	bne.n	8002c64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	e01b      	b.n	8002c9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	11db      	asrs	r3, r3, #7
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 0306 	and.w	r3, r3, #6
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f063 030f 	orn	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	490e      	ldr	r1, [pc, #56]	@ (8002cbc <I2C_MasterRequestWrite+0xfc>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f940 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e010      	b.n	8002cb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4907      	ldr	r1, [pc, #28]	@ (8002cc0 <I2C_MasterRequestWrite+0x100>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f930 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	00010008 	.word	0x00010008
 8002cc0:	00010002 	.word	0x00010002

08002cc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cde:	4b4b      	ldr	r3, [pc, #300]	@ (8002e0c <I2C_DMAAbort+0x148>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e10 <I2C_DMAAbort+0x14c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0a1a      	lsrs	r2, r3, #8
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00da      	lsls	r2, r3, #3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002d0a:	e00a      	b.n	8002d22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d20:	d0ea      	beq.n	8002cf8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	2200      	movs	r2, #0
 8002d30:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	2200      	movs	r2, #0
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d64:	2200      	movs	r2, #0
 8002d66:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b60      	cmp	r3, #96	@ 0x60
 8002d92:	d10e      	bne.n	8002db2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2200      	movs	r2, #0
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f7fe fde1 	bl	8001972 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002db0:	e027      	b.n	8002e02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002db8:	2b28      	cmp	r3, #40	@ 0x28
 8002dba:	d117      	bne.n	8002dec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2228      	movs	r2, #40	@ 0x28
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002dea:	e007      	b.n	8002dfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f7fe fdaf 	bl	8001960 <HAL_I2C_ErrorCallback>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	14f8b589 	.word	0x14f8b589

08002e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	e048      	b.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d044      	beq.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fd fd83 	bl	8000938 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d139      	bne.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d10d      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	e00c      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d116      	bne.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e023      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10d      	bne.n	8002ede <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	e00c      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d093      	beq.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f16:	e071      	b.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	d123      	bne.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0204 	orr.w	r2, r3, #4
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e067      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d041      	beq.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	f7fd fcde 	bl	8000938 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d136      	bne.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10c      	bne.n	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e00b      	b.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e021      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d10c      	bne.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	43da      	mvns	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e00b      	b.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af6d 	bne.w	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003054:	e034      	b.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8b8 	bl	80031cc <I2C_IsAcknowledgeFailed>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d028      	beq.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fd fc63 	bl	8000938 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11d      	bne.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d016      	beq.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ca:	2b80      	cmp	r3, #128	@ 0x80
 80030cc:	d1c3      	bne.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f870 	bl	80031cc <I2C_IsAcknowledgeFailed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e034      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d028      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fd fc1b 	bl	8000938 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11d      	bne.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d016      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d1c3      	bne.n	80030e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003174:	4b13      	ldr	r3, [pc, #76]	@ (80031c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	4a13      	ldr	r2, [pc, #76]	@ (80031c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0a1a      	lsrs	r2, r3, #8
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3b01      	subs	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e008      	b.n	80031b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031b4:	d0e9      	beq.n	800318a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000008 	.word	0x20000008
 80031c8:	14f8b589 	.word	0x14f8b589

080031cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e2:	d11b      	bne.n	800321c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003238:	d103      	bne.n	8003242 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003240:	e007      	b.n	8003252 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800324a:	d102      	bne.n	8003252 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2208      	movs	r2, #8
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e272      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8087 	beq.w	800338a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800327c:	4b92      	ldr	r3, [pc, #584]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003288:	4b8f      	ldr	r3, [pc, #572]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
 8003294:	4b8c      	ldr	r3, [pc, #560]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d10b      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	4b89      	ldr	r3, [pc, #548]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06c      	beq.n	8003388 <HAL_RCC_OscConfig+0x12c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d168      	bne.n	8003388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e24c      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x76>
 80032c4:	4b80      	ldr	r3, [pc, #512]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7f      	ldr	r2, [pc, #508]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e02e      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b7b      	ldr	r3, [pc, #492]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b78      	ldr	r3, [pc, #480]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a77      	ldr	r2, [pc, #476]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xbc>
 80032fe:	4b72      	ldr	r3, [pc, #456]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a71      	ldr	r2, [pc, #452]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b6f      	ldr	r3, [pc, #444]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6e      	ldr	r2, [pc, #440]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 8003318:	4b6b      	ldr	r3, [pc, #428]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6a      	ldr	r2, [pc, #424]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b68      	ldr	r3, [pc, #416]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a67      	ldr	r2, [pc, #412]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800332e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fd fafe 	bl	8000938 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fd fafa 	bl	8000938 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e200      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xe4>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fd faea 	bl	8000938 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fd fae6 	bl	8000938 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1ec      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b53      	ldr	r3, [pc, #332]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x10c>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	4b4c      	ldr	r3, [pc, #304]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033a2:	4b49      	ldr	r3, [pc, #292]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
 80033ae:	4b46      	ldr	r3, [pc, #280]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	4b43      	ldr	r3, [pc, #268]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1c0      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b3d      	ldr	r3, [pc, #244]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4939      	ldr	r1, [pc, #228]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e03a      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4b36      	ldr	r3, [pc, #216]	@ (80034cc <HAL_RCC_OscConfig+0x270>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fd fa9f 	bl	8000938 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fd fa9b 	bl	8000938 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1a1      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	4b2d      	ldr	r3, [pc, #180]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b2a      	ldr	r3, [pc, #168]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4927      	ldr	r1, [pc, #156]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b26      	ldr	r3, [pc, #152]	@ (80034cc <HAL_RCC_OscConfig+0x270>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd fa7e 	bl	8000938 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fd fa7a 	bl	8000938 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e180      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03a      	beq.n	80034e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fd fa5e 	bl	8000938 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003480:	f7fd fa5a 	bl	8000938 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e160      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f000 face 	bl	8003a40 <RCC_Delay>
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fd fa44 	bl	8000938 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fd fa40 	bl	8000938 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d908      	bls.n	80034d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e146      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	42420000 	.word	0x42420000
 80034d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b92      	ldr	r3, [pc, #584]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e9      	bne.n	80034b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a6 	beq.w	800363a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b88      	ldr	r3, [pc, #544]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a87      	ldr	r2, [pc, #540]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]
 800350a:	4b85      	ldr	r3, [pc, #532]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b82      	ldr	r3, [pc, #520]	@ (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4b7f      	ldr	r3, [pc, #508]	@ (8003724 <HAL_RCC_OscConfig+0x4c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7e      	ldr	r2, [pc, #504]	@ (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003532:	f7fd fa01 	bl	8000938 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fd f9fd 	bl	8000938 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b64      	cmp	r3, #100	@ 0x64
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e103      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b75      	ldr	r3, [pc, #468]	@ (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
 8003560:	4b6f      	ldr	r3, [pc, #444]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a6e      	ldr	r2, [pc, #440]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	e02d      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x334>
 8003576:	4b6a      	ldr	r3, [pc, #424]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a69      	ldr	r2, [pc, #420]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b67      	ldr	r3, [pc, #412]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a66      	ldr	r2, [pc, #408]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	e01c      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x356>
 8003598:	4b61      	ldr	r3, [pc, #388]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a60      	ldr	r2, [pc, #384]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 80035b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	4b58      	ldr	r3, [pc, #352]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a57      	ldr	r2, [pc, #348]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fd f9b1 	bl	8000938 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fd f9ad 	bl	8000938 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0b1      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ee      	beq.n	80035da <HAL_RCC_OscConfig+0x37e>
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fd f99b 	bl	8000938 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fd f997 	bl	8000938 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e09b      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b3c      	ldr	r3, [pc, #240]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a3b      	ldr	r2, [pc, #236]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003644:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d061      	beq.n	8003714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d146      	bne.n	80036e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b33      	ldr	r3, [pc, #204]	@ (8003728 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fd f96b 	bl	8000938 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fd f967 	bl	8000938 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e06d      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	4b29      	ldr	r3, [pc, #164]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800368e:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4921      	ldr	r1, [pc, #132]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a19      	ldr	r1, [r3, #32]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	430b      	orrs	r3, r1
 80036b2:	491b      	ldr	r1, [pc, #108]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fd f93b 	bl	8000938 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fd f937 	bl	8000938 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e03d      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46a>
 80036e4:	e035      	b.n	8003752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_RCC_OscConfig+0x4cc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fd f924 	bl	8000938 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fd f920 	bl	8000938 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e026      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x498>
 8003712:	e01e      	b.n	8003752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e019      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372c:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_OscConfig+0x500>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d0      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b6a      	ldr	r3, [pc, #424]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d910      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b67      	ldr	r3, [pc, #412]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4965      	ldr	r1, [pc, #404]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a58      	ldr	r2, [pc, #352]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a52      	ldr	r2, [pc, #328]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d040      	beq.n	8003880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	4b41      	ldr	r3, [pc, #260]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e073      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06b      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b39      	ldr	r3, [pc, #228]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4936      	ldr	r1, [pc, #216]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003850:	f7fd f872 	bl	8000938 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fd f86e 	bl	8000938 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e053      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d210      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4922      	ldr	r1, [pc, #136]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038da:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490a      	ldr	r1, [pc, #40]	@ (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	@ (800392c <HAL_RCC_ClockConfig+0x1cc>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <HAL_RCC_ClockConfig+0x1d0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc ffd0 	bl	80008b4 <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40022000 	.word	0x40022000
 8003924:	40021000 	.word	0x40021000
 8003928:	08004ee8 	.word	0x08004ee8
 800392c:	20000008 	.word	0x20000008
 8003930:	2000000c 	.word	0x2000000c

08003934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800394e:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b04      	cmp	r3, #4
 800395c:	d002      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x30>
 800395e:	2b08      	cmp	r3, #8
 8003960:	d003      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x36>
 8003962:	e027      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003966:	613b      	str	r3, [r7, #16]
      break;
 8003968:	e027      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	0c9b      	lsrs	r3, r3, #18
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003974:	5cd3      	ldrb	r3, [r2, r3]
 8003976:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003982:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0c5b      	lsrs	r3, r3, #17
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	4a11      	ldr	r2, [pc, #68]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003996:	fb03 f202 	mul.w	r2, r3, r2
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e004      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x98>)
 80039b6:	613b      	str	r3, [r7, #16]
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	693b      	ldr	r3, [r7, #16]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	007a1200 	.word	0x007a1200
 80039d0:	08004f00 	.word	0x08004f00
 80039d4:	08004f10 	.word	0x08004f10
 80039d8:	003d0900 	.word	0x003d0900

080039dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e0:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <HAL_RCC_GetHCLKFreq+0x10>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	20000008 	.word	0x20000008

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f4:	f7ff fff2 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	@ (8003a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	08004ef8 	.word	0x08004ef8

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a1c:	f7ff ffde 	bl	80039dc <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0adb      	lsrs	r3, r3, #11
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08004ef8 	.word	0x08004ef8

08003a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a48:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <RCC_Delay+0x34>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <RCC_Delay+0x38>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a5b      	lsrs	r3, r3, #9
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a5c:	bf00      	nop
  }
  while (Delay --);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	60fa      	str	r2, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f9      	bne.n	8003a5c <RCC_Delay+0x1c>
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000008 	.word	0x20000008
 8003a78:	10624dd3 	.word	0x10624dd3

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e042      	b.n	8003b14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fc fe8c 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	@ 0x24
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f971 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d175      	bne.n	8003c28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Transmit+0x2c>
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e06e      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	@ 0x21
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fc feed 	bl	8000938 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x6c>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b90:	e02e      	b.n	8003bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	@ 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f848 	bl	8003c32 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e03a      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cb      	bne.n	8003b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	@ 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f814 	bl	8003c32 <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	e03b      	b.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d037      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fc fe74 	bl	8000938 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e03a      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b80      	cmp	r3, #128	@ 0x80
 8003c78:	d020      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b40      	cmp	r3, #64	@ 0x40
 8003c7e:	d01d      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d116      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f81d 	bl	8003ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2208      	movs	r2, #8
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e00f      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d0b4      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b095      	sub	sp, #84	@ 0x54
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d119      	bne.n	8003d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d7c:	61ba      	str	r2, [r7, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6979      	ldr	r1, [r7, #20]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d9e:	bf00      	nop
 8003da0:	3754      	adds	r7, #84	@ 0x54
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003de2:	f023 030c 	bic.w	r3, r3, #12
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ebc <UART_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7ff fe02 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	e002      	b.n	8003e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7ff fdea 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a22      	ldr	r2, [pc, #136]	@ (8003ec0 <UART_SetConfig+0x118>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	0119      	lsls	r1, r3, #4
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec0 <UART_SetConfig+0x118>)
 8003e56:	fba3 0302 	umull	r0, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2064      	movs	r0, #100	@ 0x64
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	3332      	adds	r3, #50	@ 0x32
 8003e68:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <UART_SetConfig+0x118>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e74:	4419      	add	r1, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <UART_SetConfig+0x118>)
 8003e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2064      	movs	r0, #100	@ 0x64
 8003e96:	fb00 f303 	mul.w	r3, r0, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	3332      	adds	r3, #50	@ 0x32
 8003ea0:	4a07      	ldr	r2, [pc, #28]	@ (8003ec0 <UART_SetConfig+0x118>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	440a      	add	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40013800 	.word	0x40013800
 8003ec0:	51eb851f 	.word	0x51eb851f

08003ec4 <std>:
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	4604      	mov	r4, r0
 8003eca:	e9c0 3300 	strd	r3, r3, [r0]
 8003ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ed2:	6083      	str	r3, [r0, #8]
 8003ed4:	8181      	strh	r1, [r0, #12]
 8003ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ed8:	81c2      	strh	r2, [r0, #14]
 8003eda:	6183      	str	r3, [r0, #24]
 8003edc:	4619      	mov	r1, r3
 8003ede:	2208      	movs	r2, #8
 8003ee0:	305c      	adds	r0, #92	@ 0x5c
 8003ee2:	f000 fa01 	bl	80042e8 <memset>
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <std+0x58>)
 8003ee8:	6224      	str	r4, [r4, #32]
 8003eea:	6263      	str	r3, [r4, #36]	@ 0x24
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <std+0x5c>)
 8003eee:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <std+0x60>)
 8003ef2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <std+0x64>)
 8003ef6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <std+0x68>)
 8003efa:	429c      	cmp	r4, r3
 8003efc:	d006      	beq.n	8003f0c <std+0x48>
 8003efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f02:	4294      	cmp	r4, r2
 8003f04:	d002      	beq.n	8003f0c <std+0x48>
 8003f06:	33d0      	adds	r3, #208	@ 0xd0
 8003f08:	429c      	cmp	r4, r3
 8003f0a:	d105      	bne.n	8003f18 <std+0x54>
 8003f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	f000 ba60 	b.w	80043d8 <__retarget_lock_init_recursive>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08004139 	.word	0x08004139
 8003f20:	0800415b 	.word	0x0800415b
 8003f24:	08004193 	.word	0x08004193
 8003f28:	080041b7 	.word	0x080041b7
 8003f2c:	20000174 	.word	0x20000174

08003f30 <stdio_exit_handler>:
 8003f30:	4a02      	ldr	r2, [pc, #8]	@ (8003f3c <stdio_exit_handler+0xc>)
 8003f32:	4903      	ldr	r1, [pc, #12]	@ (8003f40 <stdio_exit_handler+0x10>)
 8003f34:	4803      	ldr	r0, [pc, #12]	@ (8003f44 <stdio_exit_handler+0x14>)
 8003f36:	f000 b869 	b.w	800400c <_fwalk_sglue>
 8003f3a:	bf00      	nop
 8003f3c:	20000014 	.word	0x20000014
 8003f40:	08004c71 	.word	0x08004c71
 8003f44:	20000024 	.word	0x20000024

08003f48 <cleanup_stdio>:
 8003f48:	6841      	ldr	r1, [r0, #4]
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <cleanup_stdio+0x34>)
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	4299      	cmp	r1, r3
 8003f50:	4604      	mov	r4, r0
 8003f52:	d001      	beq.n	8003f58 <cleanup_stdio+0x10>
 8003f54:	f000 fe8c 	bl	8004c70 <_fflush_r>
 8003f58:	68a1      	ldr	r1, [r4, #8]
 8003f5a:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <cleanup_stdio+0x38>)
 8003f5c:	4299      	cmp	r1, r3
 8003f5e:	d002      	beq.n	8003f66 <cleanup_stdio+0x1e>
 8003f60:	4620      	mov	r0, r4
 8003f62:	f000 fe85 	bl	8004c70 <_fflush_r>
 8003f66:	68e1      	ldr	r1, [r4, #12]
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <cleanup_stdio+0x3c>)
 8003f6a:	4299      	cmp	r1, r3
 8003f6c:	d004      	beq.n	8003f78 <cleanup_stdio+0x30>
 8003f6e:	4620      	mov	r0, r4
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f74:	f000 be7c 	b.w	8004c70 <_fflush_r>
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000174 	.word	0x20000174
 8003f80:	200001dc 	.word	0x200001dc
 8003f84:	20000244 	.word	0x20000244

08003f88 <global_stdio_init.part.0>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <global_stdio_init.part.0+0x30>)
 8003f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8003fbc <global_stdio_init.part.0+0x34>)
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc0 <global_stdio_init.part.0+0x38>)
 8003f90:	4620      	mov	r0, r4
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	2104      	movs	r1, #4
 8003f96:	2200      	movs	r2, #0
 8003f98:	f7ff ff94 	bl	8003ec4 <std>
 8003f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2109      	movs	r1, #9
 8003fa4:	f7ff ff8e 	bl	8003ec4 <std>
 8003fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fac:	2202      	movs	r2, #2
 8003fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb2:	2112      	movs	r1, #18
 8003fb4:	f7ff bf86 	b.w	8003ec4 <std>
 8003fb8:	200002ac 	.word	0x200002ac
 8003fbc:	20000174 	.word	0x20000174
 8003fc0:	08003f31 	.word	0x08003f31

08003fc4 <__sfp_lock_acquire>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <__sfp_lock_acquire+0x8>)
 8003fc6:	f000 ba08 	b.w	80043da <__retarget_lock_acquire_recursive>
 8003fca:	bf00      	nop
 8003fcc:	200002b5 	.word	0x200002b5

08003fd0 <__sfp_lock_release>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	@ (8003fd8 <__sfp_lock_release+0x8>)
 8003fd2:	f000 ba03 	b.w	80043dc <__retarget_lock_release_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	200002b5 	.word	0x200002b5

08003fdc <__sinit>:
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4604      	mov	r4, r0
 8003fe0:	f7ff fff0 	bl	8003fc4 <__sfp_lock_acquire>
 8003fe4:	6a23      	ldr	r3, [r4, #32]
 8003fe6:	b11b      	cbz	r3, 8003ff0 <__sinit+0x14>
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fec:	f7ff bff0 	b.w	8003fd0 <__sfp_lock_release>
 8003ff0:	4b04      	ldr	r3, [pc, #16]	@ (8004004 <__sinit+0x28>)
 8003ff2:	6223      	str	r3, [r4, #32]
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <__sinit+0x2c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f5      	bne.n	8003fe8 <__sinit+0xc>
 8003ffc:	f7ff ffc4 	bl	8003f88 <global_stdio_init.part.0>
 8004000:	e7f2      	b.n	8003fe8 <__sinit+0xc>
 8004002:	bf00      	nop
 8004004:	08003f49 	.word	0x08003f49
 8004008:	200002ac 	.word	0x200002ac

0800400c <_fwalk_sglue>:
 800400c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004010:	4607      	mov	r7, r0
 8004012:	4688      	mov	r8, r1
 8004014:	4614      	mov	r4, r2
 8004016:	2600      	movs	r6, #0
 8004018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800401c:	f1b9 0901 	subs.w	r9, r9, #1
 8004020:	d505      	bpl.n	800402e <_fwalk_sglue+0x22>
 8004022:	6824      	ldr	r4, [r4, #0]
 8004024:	2c00      	cmp	r4, #0
 8004026:	d1f7      	bne.n	8004018 <_fwalk_sglue+0xc>
 8004028:	4630      	mov	r0, r6
 800402a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800402e:	89ab      	ldrh	r3, [r5, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d907      	bls.n	8004044 <_fwalk_sglue+0x38>
 8004034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004038:	3301      	adds	r3, #1
 800403a:	d003      	beq.n	8004044 <_fwalk_sglue+0x38>
 800403c:	4629      	mov	r1, r5
 800403e:	4638      	mov	r0, r7
 8004040:	47c0      	blx	r8
 8004042:	4306      	orrs	r6, r0
 8004044:	3568      	adds	r5, #104	@ 0x68
 8004046:	e7e9      	b.n	800401c <_fwalk_sglue+0x10>

08004048 <iprintf>:
 8004048:	b40f      	push	{r0, r1, r2, r3}
 800404a:	b507      	push	{r0, r1, r2, lr}
 800404c:	4906      	ldr	r1, [pc, #24]	@ (8004068 <iprintf+0x20>)
 800404e:	ab04      	add	r3, sp, #16
 8004050:	6808      	ldr	r0, [r1, #0]
 8004052:	f853 2b04 	ldr.w	r2, [r3], #4
 8004056:	6881      	ldr	r1, [r0, #8]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	f000 fadf 	bl	800461c <_vfiprintf_r>
 800405e:	b003      	add	sp, #12
 8004060:	f85d eb04 	ldr.w	lr, [sp], #4
 8004064:	b004      	add	sp, #16
 8004066:	4770      	bx	lr
 8004068:	20000020 	.word	0x20000020

0800406c <putchar>:
 800406c:	4b02      	ldr	r3, [pc, #8]	@ (8004078 <putchar+0xc>)
 800406e:	4601      	mov	r1, r0
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	6882      	ldr	r2, [r0, #8]
 8004074:	f000 be85 	b.w	8004d82 <_putc_r>
 8004078:	20000020 	.word	0x20000020

0800407c <_puts_r>:
 800407c:	6a03      	ldr	r3, [r0, #32]
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	4605      	mov	r5, r0
 8004082:	460e      	mov	r6, r1
 8004084:	6884      	ldr	r4, [r0, #8]
 8004086:	b90b      	cbnz	r3, 800408c <_puts_r+0x10>
 8004088:	f7ff ffa8 	bl	8003fdc <__sinit>
 800408c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800408e:	07db      	lsls	r3, r3, #31
 8004090:	d405      	bmi.n	800409e <_puts_r+0x22>
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	0598      	lsls	r0, r3, #22
 8004096:	d402      	bmi.n	800409e <_puts_r+0x22>
 8004098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800409a:	f000 f99e 	bl	80043da <__retarget_lock_acquire_recursive>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	0719      	lsls	r1, r3, #28
 80040a2:	d502      	bpl.n	80040aa <_puts_r+0x2e>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d135      	bne.n	8004116 <_puts_r+0x9a>
 80040aa:	4621      	mov	r1, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 f8c5 	bl	800423c <__swsetup_r>
 80040b2:	b380      	cbz	r0, 8004116 <_puts_r+0x9a>
 80040b4:	f04f 35ff 	mov.w	r5, #4294967295
 80040b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040ba:	07da      	lsls	r2, r3, #31
 80040bc:	d405      	bmi.n	80040ca <_puts_r+0x4e>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	059b      	lsls	r3, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_puts_r+0x4e>
 80040c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c6:	f000 f989 	bl	80043dc <__retarget_lock_release_recursive>
 80040ca:	4628      	mov	r0, r5
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da04      	bge.n	80040dc <_puts_r+0x60>
 80040d2:	69a2      	ldr	r2, [r4, #24]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dc17      	bgt.n	8004108 <_puts_r+0x8c>
 80040d8:	290a      	cmp	r1, #10
 80040da:	d015      	beq.n	8004108 <_puts_r+0x8c>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	6022      	str	r2, [r4, #0]
 80040e2:	7019      	strb	r1, [r3, #0]
 80040e4:	68a3      	ldr	r3, [r4, #8]
 80040e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60a3      	str	r3, [r4, #8]
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d1ed      	bne.n	80040ce <_puts_r+0x52>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da11      	bge.n	800411a <_puts_r+0x9e>
 80040f6:	4622      	mov	r2, r4
 80040f8:	210a      	movs	r1, #10
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f85f 	bl	80041be <__swbuf_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d0d7      	beq.n	80040b4 <_puts_r+0x38>
 8004104:	250a      	movs	r5, #10
 8004106:	e7d7      	b.n	80040b8 <_puts_r+0x3c>
 8004108:	4622      	mov	r2, r4
 800410a:	4628      	mov	r0, r5
 800410c:	f000 f857 	bl	80041be <__swbuf_r>
 8004110:	3001      	adds	r0, #1
 8004112:	d1e7      	bne.n	80040e4 <_puts_r+0x68>
 8004114:	e7ce      	b.n	80040b4 <_puts_r+0x38>
 8004116:	3e01      	subs	r6, #1
 8004118:	e7e4      	b.n	80040e4 <_puts_r+0x68>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	6022      	str	r2, [r4, #0]
 8004120:	220a      	movs	r2, #10
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e7ee      	b.n	8004104 <_puts_r+0x88>
	...

08004128 <puts>:
 8004128:	4b02      	ldr	r3, [pc, #8]	@ (8004134 <puts+0xc>)
 800412a:	4601      	mov	r1, r0
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	f7ff bfa5 	b.w	800407c <_puts_r>
 8004132:	bf00      	nop
 8004134:	20000020 	.word	0x20000020

08004138 <__sread>:
 8004138:	b510      	push	{r4, lr}
 800413a:	460c      	mov	r4, r1
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 f8fc 	bl	800433c <_read_r>
 8004144:	2800      	cmp	r0, #0
 8004146:	bfab      	itete	ge
 8004148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800414a:	89a3      	ldrhlt	r3, [r4, #12]
 800414c:	181b      	addge	r3, r3, r0
 800414e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004152:	bfac      	ite	ge
 8004154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004156:	81a3      	strhlt	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__swrite>:
 800415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415e:	461f      	mov	r7, r3
 8004160:	898b      	ldrh	r3, [r1, #12]
 8004162:	4605      	mov	r5, r0
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	460c      	mov	r4, r1
 8004168:	4616      	mov	r6, r2
 800416a:	d505      	bpl.n	8004178 <__swrite+0x1e>
 800416c:	2302      	movs	r3, #2
 800416e:	2200      	movs	r2, #0
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	f000 f8d0 	bl	8004318 <_lseek_r>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	4632      	mov	r2, r6
 800417c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004180:	81a3      	strh	r3, [r4, #12]
 8004182:	4628      	mov	r0, r5
 8004184:	463b      	mov	r3, r7
 8004186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	f000 b8e7 	b.w	8004360 <_write_r>

08004192 <__sseek>:
 8004192:	b510      	push	{r4, lr}
 8004194:	460c      	mov	r4, r1
 8004196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419a:	f000 f8bd 	bl	8004318 <_lseek_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	bf15      	itete	ne
 80041a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041ae:	81a3      	strheq	r3, [r4, #12]
 80041b0:	bf18      	it	ne
 80041b2:	81a3      	strhne	r3, [r4, #12]
 80041b4:	bd10      	pop	{r4, pc}

080041b6 <__sclose>:
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 b89d 	b.w	80042f8 <_close_r>

080041be <__swbuf_r>:
 80041be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c0:	460e      	mov	r6, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	4605      	mov	r5, r0
 80041c6:	b118      	cbz	r0, 80041d0 <__swbuf_r+0x12>
 80041c8:	6a03      	ldr	r3, [r0, #32]
 80041ca:	b90b      	cbnz	r3, 80041d0 <__swbuf_r+0x12>
 80041cc:	f7ff ff06 	bl	8003fdc <__sinit>
 80041d0:	69a3      	ldr	r3, [r4, #24]
 80041d2:	60a3      	str	r3, [r4, #8]
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	071a      	lsls	r2, r3, #28
 80041d8:	d501      	bpl.n	80041de <__swbuf_r+0x20>
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	b943      	cbnz	r3, 80041f0 <__swbuf_r+0x32>
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f000 f82b 	bl	800423c <__swsetup_r>
 80041e6:	b118      	cbz	r0, 80041f0 <__swbuf_r+0x32>
 80041e8:	f04f 37ff 	mov.w	r7, #4294967295
 80041ec:	4638      	mov	r0, r7
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	6922      	ldr	r2, [r4, #16]
 80041f4:	b2f6      	uxtb	r6, r6
 80041f6:	1a98      	subs	r0, r3, r2
 80041f8:	6963      	ldr	r3, [r4, #20]
 80041fa:	4637      	mov	r7, r6
 80041fc:	4283      	cmp	r3, r0
 80041fe:	dc05      	bgt.n	800420c <__swbuf_r+0x4e>
 8004200:	4621      	mov	r1, r4
 8004202:	4628      	mov	r0, r5
 8004204:	f000 fd34 	bl	8004c70 <_fflush_r>
 8004208:	2800      	cmp	r0, #0
 800420a:	d1ed      	bne.n	80041e8 <__swbuf_r+0x2a>
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	3b01      	subs	r3, #1
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	701e      	strb	r6, [r3, #0]
 800421a:	6962      	ldr	r2, [r4, #20]
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	429a      	cmp	r2, r3
 8004220:	d004      	beq.n	800422c <__swbuf_r+0x6e>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	07db      	lsls	r3, r3, #31
 8004226:	d5e1      	bpl.n	80041ec <__swbuf_r+0x2e>
 8004228:	2e0a      	cmp	r6, #10
 800422a:	d1df      	bne.n	80041ec <__swbuf_r+0x2e>
 800422c:	4621      	mov	r1, r4
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fd1e 	bl	8004c70 <_fflush_r>
 8004234:	2800      	cmp	r0, #0
 8004236:	d0d9      	beq.n	80041ec <__swbuf_r+0x2e>
 8004238:	e7d6      	b.n	80041e8 <__swbuf_r+0x2a>
	...

0800423c <__swsetup_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4b29      	ldr	r3, [pc, #164]	@ (80042e4 <__swsetup_r+0xa8>)
 8004240:	4605      	mov	r5, r0
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	460c      	mov	r4, r1
 8004246:	b118      	cbz	r0, 8004250 <__swsetup_r+0x14>
 8004248:	6a03      	ldr	r3, [r0, #32]
 800424a:	b90b      	cbnz	r3, 8004250 <__swsetup_r+0x14>
 800424c:	f7ff fec6 	bl	8003fdc <__sinit>
 8004250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004254:	0719      	lsls	r1, r3, #28
 8004256:	d422      	bmi.n	800429e <__swsetup_r+0x62>
 8004258:	06da      	lsls	r2, r3, #27
 800425a:	d407      	bmi.n	800426c <__swsetup_r+0x30>
 800425c:	2209      	movs	r2, #9
 800425e:	602a      	str	r2, [r5, #0]
 8004260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	e033      	b.n	80042d4 <__swsetup_r+0x98>
 800426c:	0758      	lsls	r0, r3, #29
 800426e:	d512      	bpl.n	8004296 <__swsetup_r+0x5a>
 8004270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004272:	b141      	cbz	r1, 8004286 <__swsetup_r+0x4a>
 8004274:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004278:	4299      	cmp	r1, r3
 800427a:	d002      	beq.n	8004282 <__swsetup_r+0x46>
 800427c:	4628      	mov	r0, r5
 800427e:	f000 f8af 	bl	80043e0 <_free_r>
 8004282:	2300      	movs	r3, #0
 8004284:	6363      	str	r3, [r4, #52]	@ 0x34
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	2300      	movs	r3, #0
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	b94b      	cbnz	r3, 80042b6 <__swsetup_r+0x7a>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ac:	d003      	beq.n	80042b6 <__swsetup_r+0x7a>
 80042ae:	4621      	mov	r1, r4
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 fd2a 	bl	8004d0a <__smakebuf_r>
 80042b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ba:	f013 0201 	ands.w	r2, r3, #1
 80042be:	d00a      	beq.n	80042d6 <__swsetup_r+0x9a>
 80042c0:	2200      	movs	r2, #0
 80042c2:	60a2      	str	r2, [r4, #8]
 80042c4:	6962      	ldr	r2, [r4, #20]
 80042c6:	4252      	negs	r2, r2
 80042c8:	61a2      	str	r2, [r4, #24]
 80042ca:	6922      	ldr	r2, [r4, #16]
 80042cc:	b942      	cbnz	r2, 80042e0 <__swsetup_r+0xa4>
 80042ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042d2:	d1c5      	bne.n	8004260 <__swsetup_r+0x24>
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	0799      	lsls	r1, r3, #30
 80042d8:	bf58      	it	pl
 80042da:	6962      	ldrpl	r2, [r4, #20]
 80042dc:	60a2      	str	r2, [r4, #8]
 80042de:	e7f4      	b.n	80042ca <__swsetup_r+0x8e>
 80042e0:	2000      	movs	r0, #0
 80042e2:	e7f7      	b.n	80042d4 <__swsetup_r+0x98>
 80042e4:	20000020 	.word	0x20000020

080042e8 <memset>:
 80042e8:	4603      	mov	r3, r0
 80042ea:	4402      	add	r2, r0
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d100      	bne.n	80042f2 <memset+0xa>
 80042f0:	4770      	bx	lr
 80042f2:	f803 1b01 	strb.w	r1, [r3], #1
 80042f6:	e7f9      	b.n	80042ec <memset+0x4>

080042f8 <_close_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	2300      	movs	r3, #0
 80042fc:	4d05      	ldr	r5, [pc, #20]	@ (8004314 <_close_r+0x1c>)
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fc f9c5 	bl	8000692 <_close>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_close_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_close_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200002b0 	.word	0x200002b0

08004318 <_lseek_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	2200      	movs	r2, #0
 8004322:	4d05      	ldr	r5, [pc, #20]	@ (8004338 <_lseek_r+0x20>)
 8004324:	602a      	str	r2, [r5, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f7fc f9d7 	bl	80006da <_lseek>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_lseek_r+0x1e>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_lseek_r+0x1e>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	200002b0 	.word	0x200002b0

0800433c <_read_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	2200      	movs	r2, #0
 8004346:	4d05      	ldr	r5, [pc, #20]	@ (800435c <_read_r+0x20>)
 8004348:	602a      	str	r2, [r5, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7fc f968 	bl	8000620 <_read>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_read_r+0x1e>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_read_r+0x1e>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	200002b0 	.word	0x200002b0

08004360 <_write_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	4611      	mov	r1, r2
 8004368:	2200      	movs	r2, #0
 800436a:	4d05      	ldr	r5, [pc, #20]	@ (8004380 <_write_r+0x20>)
 800436c:	602a      	str	r2, [r5, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f7fc f973 	bl	800065a <_write>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_write_r+0x1e>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_write_r+0x1e>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	200002b0 	.word	0x200002b0

08004384 <__errno>:
 8004384:	4b01      	ldr	r3, [pc, #4]	@ (800438c <__errno+0x8>)
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20000020 	.word	0x20000020

08004390 <__libc_init_array>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	2600      	movs	r6, #0
 8004394:	4d0c      	ldr	r5, [pc, #48]	@ (80043c8 <__libc_init_array+0x38>)
 8004396:	4c0d      	ldr	r4, [pc, #52]	@ (80043cc <__libc_init_array+0x3c>)
 8004398:	1b64      	subs	r4, r4, r5
 800439a:	10a4      	asrs	r4, r4, #2
 800439c:	42a6      	cmp	r6, r4
 800439e:	d109      	bne.n	80043b4 <__libc_init_array+0x24>
 80043a0:	f000 fd64 	bl	8004e6c <_init>
 80043a4:	2600      	movs	r6, #0
 80043a6:	4d0a      	ldr	r5, [pc, #40]	@ (80043d0 <__libc_init_array+0x40>)
 80043a8:	4c0a      	ldr	r4, [pc, #40]	@ (80043d4 <__libc_init_array+0x44>)
 80043aa:	1b64      	subs	r4, r4, r5
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	42a6      	cmp	r6, r4
 80043b0:	d105      	bne.n	80043be <__libc_init_array+0x2e>
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b8:	4798      	blx	r3
 80043ba:	3601      	adds	r6, #1
 80043bc:	e7ee      	b.n	800439c <__libc_init_array+0xc>
 80043be:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c2:	4798      	blx	r3
 80043c4:	3601      	adds	r6, #1
 80043c6:	e7f2      	b.n	80043ae <__libc_init_array+0x1e>
 80043c8:	08004f48 	.word	0x08004f48
 80043cc:	08004f48 	.word	0x08004f48
 80043d0:	08004f48 	.word	0x08004f48
 80043d4:	08004f4c 	.word	0x08004f4c

080043d8 <__retarget_lock_init_recursive>:
 80043d8:	4770      	bx	lr

080043da <__retarget_lock_acquire_recursive>:
 80043da:	4770      	bx	lr

080043dc <__retarget_lock_release_recursive>:
 80043dc:	4770      	bx	lr
	...

080043e0 <_free_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4605      	mov	r5, r0
 80043e4:	2900      	cmp	r1, #0
 80043e6:	d040      	beq.n	800446a <_free_r+0x8a>
 80043e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ec:	1f0c      	subs	r4, r1, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bfb8      	it	lt
 80043f2:	18e4      	addlt	r4, r4, r3
 80043f4:	f000 f8de 	bl	80045b4 <__malloc_lock>
 80043f8:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <_free_r+0x8c>)
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	b933      	cbnz	r3, 800440c <_free_r+0x2c>
 80043fe:	6063      	str	r3, [r4, #4]
 8004400:	6014      	str	r4, [r2, #0]
 8004402:	4628      	mov	r0, r5
 8004404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004408:	f000 b8da 	b.w	80045c0 <__malloc_unlock>
 800440c:	42a3      	cmp	r3, r4
 800440e:	d908      	bls.n	8004422 <_free_r+0x42>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	1821      	adds	r1, r4, r0
 8004414:	428b      	cmp	r3, r1
 8004416:	bf01      	itttt	eq
 8004418:	6819      	ldreq	r1, [r3, #0]
 800441a:	685b      	ldreq	r3, [r3, #4]
 800441c:	1809      	addeq	r1, r1, r0
 800441e:	6021      	streq	r1, [r4, #0]
 8004420:	e7ed      	b.n	80043fe <_free_r+0x1e>
 8004422:	461a      	mov	r2, r3
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	b10b      	cbz	r3, 800442c <_free_r+0x4c>
 8004428:	42a3      	cmp	r3, r4
 800442a:	d9fa      	bls.n	8004422 <_free_r+0x42>
 800442c:	6811      	ldr	r1, [r2, #0]
 800442e:	1850      	adds	r0, r2, r1
 8004430:	42a0      	cmp	r0, r4
 8004432:	d10b      	bne.n	800444c <_free_r+0x6c>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	4401      	add	r1, r0
 8004438:	1850      	adds	r0, r2, r1
 800443a:	4283      	cmp	r3, r0
 800443c:	6011      	str	r1, [r2, #0]
 800443e:	d1e0      	bne.n	8004402 <_free_r+0x22>
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4408      	add	r0, r1
 8004446:	6010      	str	r0, [r2, #0]
 8004448:	6053      	str	r3, [r2, #4]
 800444a:	e7da      	b.n	8004402 <_free_r+0x22>
 800444c:	d902      	bls.n	8004454 <_free_r+0x74>
 800444e:	230c      	movs	r3, #12
 8004450:	602b      	str	r3, [r5, #0]
 8004452:	e7d6      	b.n	8004402 <_free_r+0x22>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	1821      	adds	r1, r4, r0
 8004458:	428b      	cmp	r3, r1
 800445a:	bf01      	itttt	eq
 800445c:	6819      	ldreq	r1, [r3, #0]
 800445e:	685b      	ldreq	r3, [r3, #4]
 8004460:	1809      	addeq	r1, r1, r0
 8004462:	6021      	streq	r1, [r4, #0]
 8004464:	6063      	str	r3, [r4, #4]
 8004466:	6054      	str	r4, [r2, #4]
 8004468:	e7cb      	b.n	8004402 <_free_r+0x22>
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	200002bc 	.word	0x200002bc

08004470 <sbrk_aligned>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	4e0f      	ldr	r6, [pc, #60]	@ (80044b0 <sbrk_aligned+0x40>)
 8004474:	460c      	mov	r4, r1
 8004476:	6831      	ldr	r1, [r6, #0]
 8004478:	4605      	mov	r5, r0
 800447a:	b911      	cbnz	r1, 8004482 <sbrk_aligned+0x12>
 800447c:	f000 fcd8 	bl	8004e30 <_sbrk_r>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	4621      	mov	r1, r4
 8004484:	4628      	mov	r0, r5
 8004486:	f000 fcd3 	bl	8004e30 <_sbrk_r>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d103      	bne.n	8004496 <sbrk_aligned+0x26>
 800448e:	f04f 34ff 	mov.w	r4, #4294967295
 8004492:	4620      	mov	r0, r4
 8004494:	bd70      	pop	{r4, r5, r6, pc}
 8004496:	1cc4      	adds	r4, r0, #3
 8004498:	f024 0403 	bic.w	r4, r4, #3
 800449c:	42a0      	cmp	r0, r4
 800449e:	d0f8      	beq.n	8004492 <sbrk_aligned+0x22>
 80044a0:	1a21      	subs	r1, r4, r0
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 fcc4 	bl	8004e30 <_sbrk_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d1f2      	bne.n	8004492 <sbrk_aligned+0x22>
 80044ac:	e7ef      	b.n	800448e <sbrk_aligned+0x1e>
 80044ae:	bf00      	nop
 80044b0:	200002b8 	.word	0x200002b8

080044b4 <_malloc_r>:
 80044b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b8:	1ccd      	adds	r5, r1, #3
 80044ba:	f025 0503 	bic.w	r5, r5, #3
 80044be:	3508      	adds	r5, #8
 80044c0:	2d0c      	cmp	r5, #12
 80044c2:	bf38      	it	cc
 80044c4:	250c      	movcc	r5, #12
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	4606      	mov	r6, r0
 80044ca:	db01      	blt.n	80044d0 <_malloc_r+0x1c>
 80044cc:	42a9      	cmp	r1, r5
 80044ce:	d904      	bls.n	80044da <_malloc_r+0x26>
 80044d0:	230c      	movs	r3, #12
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	2000      	movs	r0, #0
 80044d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045b0 <_malloc_r+0xfc>
 80044de:	f000 f869 	bl	80045b4 <__malloc_lock>
 80044e2:	f8d8 3000 	ldr.w	r3, [r8]
 80044e6:	461c      	mov	r4, r3
 80044e8:	bb44      	cbnz	r4, 800453c <_malloc_r+0x88>
 80044ea:	4629      	mov	r1, r5
 80044ec:	4630      	mov	r0, r6
 80044ee:	f7ff ffbf 	bl	8004470 <sbrk_aligned>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	4604      	mov	r4, r0
 80044f6:	d158      	bne.n	80045aa <_malloc_r+0xf6>
 80044f8:	f8d8 4000 	ldr.w	r4, [r8]
 80044fc:	4627      	mov	r7, r4
 80044fe:	2f00      	cmp	r7, #0
 8004500:	d143      	bne.n	800458a <_malloc_r+0xd6>
 8004502:	2c00      	cmp	r4, #0
 8004504:	d04b      	beq.n	800459e <_malloc_r+0xea>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	4639      	mov	r1, r7
 800450a:	4630      	mov	r0, r6
 800450c:	eb04 0903 	add.w	r9, r4, r3
 8004510:	f000 fc8e 	bl	8004e30 <_sbrk_r>
 8004514:	4581      	cmp	r9, r0
 8004516:	d142      	bne.n	800459e <_malloc_r+0xea>
 8004518:	6821      	ldr	r1, [r4, #0]
 800451a:	4630      	mov	r0, r6
 800451c:	1a6d      	subs	r5, r5, r1
 800451e:	4629      	mov	r1, r5
 8004520:	f7ff ffa6 	bl	8004470 <sbrk_aligned>
 8004524:	3001      	adds	r0, #1
 8004526:	d03a      	beq.n	800459e <_malloc_r+0xea>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	442b      	add	r3, r5
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	f8d8 3000 	ldr.w	r3, [r8]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	bb62      	cbnz	r2, 8004590 <_malloc_r+0xdc>
 8004536:	f8c8 7000 	str.w	r7, [r8]
 800453a:	e00f      	b.n	800455c <_malloc_r+0xa8>
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	1b52      	subs	r2, r2, r5
 8004540:	d420      	bmi.n	8004584 <_malloc_r+0xd0>
 8004542:	2a0b      	cmp	r2, #11
 8004544:	d917      	bls.n	8004576 <_malloc_r+0xc2>
 8004546:	1961      	adds	r1, r4, r5
 8004548:	42a3      	cmp	r3, r4
 800454a:	6025      	str	r5, [r4, #0]
 800454c:	bf18      	it	ne
 800454e:	6059      	strne	r1, [r3, #4]
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	bf08      	it	eq
 8004554:	f8c8 1000 	streq.w	r1, [r8]
 8004558:	5162      	str	r2, [r4, r5]
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	4630      	mov	r0, r6
 800455e:	f000 f82f 	bl	80045c0 <__malloc_unlock>
 8004562:	f104 000b 	add.w	r0, r4, #11
 8004566:	1d23      	adds	r3, r4, #4
 8004568:	f020 0007 	bic.w	r0, r0, #7
 800456c:	1ac2      	subs	r2, r0, r3
 800456e:	bf1c      	itt	ne
 8004570:	1a1b      	subne	r3, r3, r0
 8004572:	50a3      	strne	r3, [r4, r2]
 8004574:	e7af      	b.n	80044d6 <_malloc_r+0x22>
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	42a3      	cmp	r3, r4
 800457a:	bf0c      	ite	eq
 800457c:	f8c8 2000 	streq.w	r2, [r8]
 8004580:	605a      	strne	r2, [r3, #4]
 8004582:	e7eb      	b.n	800455c <_malloc_r+0xa8>
 8004584:	4623      	mov	r3, r4
 8004586:	6864      	ldr	r4, [r4, #4]
 8004588:	e7ae      	b.n	80044e8 <_malloc_r+0x34>
 800458a:	463c      	mov	r4, r7
 800458c:	687f      	ldr	r7, [r7, #4]
 800458e:	e7b6      	b.n	80044fe <_malloc_r+0x4a>
 8004590:	461a      	mov	r2, r3
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	42a3      	cmp	r3, r4
 8004596:	d1fb      	bne.n	8004590 <_malloc_r+0xdc>
 8004598:	2300      	movs	r3, #0
 800459a:	6053      	str	r3, [r2, #4]
 800459c:	e7de      	b.n	800455c <_malloc_r+0xa8>
 800459e:	230c      	movs	r3, #12
 80045a0:	4630      	mov	r0, r6
 80045a2:	6033      	str	r3, [r6, #0]
 80045a4:	f000 f80c 	bl	80045c0 <__malloc_unlock>
 80045a8:	e794      	b.n	80044d4 <_malloc_r+0x20>
 80045aa:	6005      	str	r5, [r0, #0]
 80045ac:	e7d6      	b.n	800455c <_malloc_r+0xa8>
 80045ae:	bf00      	nop
 80045b0:	200002bc 	.word	0x200002bc

080045b4 <__malloc_lock>:
 80045b4:	4801      	ldr	r0, [pc, #4]	@ (80045bc <__malloc_lock+0x8>)
 80045b6:	f7ff bf10 	b.w	80043da <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	200002b4 	.word	0x200002b4

080045c0 <__malloc_unlock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	@ (80045c8 <__malloc_unlock+0x8>)
 80045c2:	f7ff bf0b 	b.w	80043dc <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	200002b4 	.word	0x200002b4

080045cc <__sfputc_r>:
 80045cc:	6893      	ldr	r3, [r2, #8]
 80045ce:	b410      	push	{r4}
 80045d0:	3b01      	subs	r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	6093      	str	r3, [r2, #8]
 80045d6:	da07      	bge.n	80045e8 <__sfputc_r+0x1c>
 80045d8:	6994      	ldr	r4, [r2, #24]
 80045da:	42a3      	cmp	r3, r4
 80045dc:	db01      	blt.n	80045e2 <__sfputc_r+0x16>
 80045de:	290a      	cmp	r1, #10
 80045e0:	d102      	bne.n	80045e8 <__sfputc_r+0x1c>
 80045e2:	bc10      	pop	{r4}
 80045e4:	f7ff bdeb 	b.w	80041be <__swbuf_r>
 80045e8:	6813      	ldr	r3, [r2, #0]
 80045ea:	1c58      	adds	r0, r3, #1
 80045ec:	6010      	str	r0, [r2, #0]
 80045ee:	7019      	strb	r1, [r3, #0]
 80045f0:	4608      	mov	r0, r1
 80045f2:	bc10      	pop	{r4}
 80045f4:	4770      	bx	lr

080045f6 <__sfputs_r>:
 80045f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f8:	4606      	mov	r6, r0
 80045fa:	460f      	mov	r7, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	18d5      	adds	r5, r2, r3
 8004600:	42ac      	cmp	r4, r5
 8004602:	d101      	bne.n	8004608 <__sfputs_r+0x12>
 8004604:	2000      	movs	r0, #0
 8004606:	e007      	b.n	8004618 <__sfputs_r+0x22>
 8004608:	463a      	mov	r2, r7
 800460a:	4630      	mov	r0, r6
 800460c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004610:	f7ff ffdc 	bl	80045cc <__sfputc_r>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d1f3      	bne.n	8004600 <__sfputs_r+0xa>
 8004618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800461c <_vfiprintf_r>:
 800461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004620:	460d      	mov	r5, r1
 8004622:	4614      	mov	r4, r2
 8004624:	4698      	mov	r8, r3
 8004626:	4606      	mov	r6, r0
 8004628:	b09d      	sub	sp, #116	@ 0x74
 800462a:	b118      	cbz	r0, 8004634 <_vfiprintf_r+0x18>
 800462c:	6a03      	ldr	r3, [r0, #32]
 800462e:	b90b      	cbnz	r3, 8004634 <_vfiprintf_r+0x18>
 8004630:	f7ff fcd4 	bl	8003fdc <__sinit>
 8004634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004636:	07d9      	lsls	r1, r3, #31
 8004638:	d405      	bmi.n	8004646 <_vfiprintf_r+0x2a>
 800463a:	89ab      	ldrh	r3, [r5, #12]
 800463c:	059a      	lsls	r2, r3, #22
 800463e:	d402      	bmi.n	8004646 <_vfiprintf_r+0x2a>
 8004640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004642:	f7ff feca 	bl	80043da <__retarget_lock_acquire_recursive>
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	071b      	lsls	r3, r3, #28
 800464a:	d501      	bpl.n	8004650 <_vfiprintf_r+0x34>
 800464c:	692b      	ldr	r3, [r5, #16]
 800464e:	b99b      	cbnz	r3, 8004678 <_vfiprintf_r+0x5c>
 8004650:	4629      	mov	r1, r5
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff fdf2 	bl	800423c <__swsetup_r>
 8004658:	b170      	cbz	r0, 8004678 <_vfiprintf_r+0x5c>
 800465a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800465c:	07dc      	lsls	r4, r3, #31
 800465e:	d504      	bpl.n	800466a <_vfiprintf_r+0x4e>
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	b01d      	add	sp, #116	@ 0x74
 8004666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466a:	89ab      	ldrh	r3, [r5, #12]
 800466c:	0598      	lsls	r0, r3, #22
 800466e:	d4f7      	bmi.n	8004660 <_vfiprintf_r+0x44>
 8004670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004672:	f7ff feb3 	bl	80043dc <__retarget_lock_release_recursive>
 8004676:	e7f3      	b.n	8004660 <_vfiprintf_r+0x44>
 8004678:	2300      	movs	r3, #0
 800467a:	9309      	str	r3, [sp, #36]	@ 0x24
 800467c:	2320      	movs	r3, #32
 800467e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004682:	2330      	movs	r3, #48	@ 0x30
 8004684:	f04f 0901 	mov.w	r9, #1
 8004688:	f8cd 800c 	str.w	r8, [sp, #12]
 800468c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004838 <_vfiprintf_r+0x21c>
 8004690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004694:	4623      	mov	r3, r4
 8004696:	469a      	mov	sl, r3
 8004698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800469c:	b10a      	cbz	r2, 80046a2 <_vfiprintf_r+0x86>
 800469e:	2a25      	cmp	r2, #37	@ 0x25
 80046a0:	d1f9      	bne.n	8004696 <_vfiprintf_r+0x7a>
 80046a2:	ebba 0b04 	subs.w	fp, sl, r4
 80046a6:	d00b      	beq.n	80046c0 <_vfiprintf_r+0xa4>
 80046a8:	465b      	mov	r3, fp
 80046aa:	4622      	mov	r2, r4
 80046ac:	4629      	mov	r1, r5
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff ffa1 	bl	80045f6 <__sfputs_r>
 80046b4:	3001      	adds	r0, #1
 80046b6:	f000 80a7 	beq.w	8004808 <_vfiprintf_r+0x1ec>
 80046ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046bc:	445a      	add	r2, fp
 80046be:	9209      	str	r2, [sp, #36]	@ 0x24
 80046c0:	f89a 3000 	ldrb.w	r3, [sl]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 809f 	beq.w	8004808 <_vfiprintf_r+0x1ec>
 80046ca:	2300      	movs	r3, #0
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046d4:	f10a 0a01 	add.w	sl, sl, #1
 80046d8:	9304      	str	r3, [sp, #16]
 80046da:	9307      	str	r3, [sp, #28]
 80046dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80046e2:	4654      	mov	r4, sl
 80046e4:	2205      	movs	r2, #5
 80046e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ea:	4853      	ldr	r0, [pc, #332]	@ (8004838 <_vfiprintf_r+0x21c>)
 80046ec:	f000 fbb0 	bl	8004e50 <memchr>
 80046f0:	9a04      	ldr	r2, [sp, #16]
 80046f2:	b9d8      	cbnz	r0, 800472c <_vfiprintf_r+0x110>
 80046f4:	06d1      	lsls	r1, r2, #27
 80046f6:	bf44      	itt	mi
 80046f8:	2320      	movmi	r3, #32
 80046fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046fe:	0713      	lsls	r3, r2, #28
 8004700:	bf44      	itt	mi
 8004702:	232b      	movmi	r3, #43	@ 0x2b
 8004704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004708:	f89a 3000 	ldrb.w	r3, [sl]
 800470c:	2b2a      	cmp	r3, #42	@ 0x2a
 800470e:	d015      	beq.n	800473c <_vfiprintf_r+0x120>
 8004710:	4654      	mov	r4, sl
 8004712:	2000      	movs	r0, #0
 8004714:	f04f 0c0a 	mov.w	ip, #10
 8004718:	9a07      	ldr	r2, [sp, #28]
 800471a:	4621      	mov	r1, r4
 800471c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004720:	3b30      	subs	r3, #48	@ 0x30
 8004722:	2b09      	cmp	r3, #9
 8004724:	d94b      	bls.n	80047be <_vfiprintf_r+0x1a2>
 8004726:	b1b0      	cbz	r0, 8004756 <_vfiprintf_r+0x13a>
 8004728:	9207      	str	r2, [sp, #28]
 800472a:	e014      	b.n	8004756 <_vfiprintf_r+0x13a>
 800472c:	eba0 0308 	sub.w	r3, r0, r8
 8004730:	fa09 f303 	lsl.w	r3, r9, r3
 8004734:	4313      	orrs	r3, r2
 8004736:	46a2      	mov	sl, r4
 8004738:	9304      	str	r3, [sp, #16]
 800473a:	e7d2      	b.n	80046e2 <_vfiprintf_r+0xc6>
 800473c:	9b03      	ldr	r3, [sp, #12]
 800473e:	1d19      	adds	r1, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	9103      	str	r1, [sp, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	bfbb      	ittet	lt
 8004748:	425b      	neglt	r3, r3
 800474a:	f042 0202 	orrlt.w	r2, r2, #2
 800474e:	9307      	strge	r3, [sp, #28]
 8004750:	9307      	strlt	r3, [sp, #28]
 8004752:	bfb8      	it	lt
 8004754:	9204      	strlt	r2, [sp, #16]
 8004756:	7823      	ldrb	r3, [r4, #0]
 8004758:	2b2e      	cmp	r3, #46	@ 0x2e
 800475a:	d10a      	bne.n	8004772 <_vfiprintf_r+0x156>
 800475c:	7863      	ldrb	r3, [r4, #1]
 800475e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004760:	d132      	bne.n	80047c8 <_vfiprintf_r+0x1ac>
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	3402      	adds	r4, #2
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	9203      	str	r2, [sp, #12]
 800476c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004770:	9305      	str	r3, [sp, #20]
 8004772:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800483c <_vfiprintf_r+0x220>
 8004776:	2203      	movs	r2, #3
 8004778:	4650      	mov	r0, sl
 800477a:	7821      	ldrb	r1, [r4, #0]
 800477c:	f000 fb68 	bl	8004e50 <memchr>
 8004780:	b138      	cbz	r0, 8004792 <_vfiprintf_r+0x176>
 8004782:	2240      	movs	r2, #64	@ 0x40
 8004784:	9b04      	ldr	r3, [sp, #16]
 8004786:	eba0 000a 	sub.w	r0, r0, sl
 800478a:	4082      	lsls	r2, r0
 800478c:	4313      	orrs	r3, r2
 800478e:	3401      	adds	r4, #1
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004796:	2206      	movs	r2, #6
 8004798:	4829      	ldr	r0, [pc, #164]	@ (8004840 <_vfiprintf_r+0x224>)
 800479a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800479e:	f000 fb57 	bl	8004e50 <memchr>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d03f      	beq.n	8004826 <_vfiprintf_r+0x20a>
 80047a6:	4b27      	ldr	r3, [pc, #156]	@ (8004844 <_vfiprintf_r+0x228>)
 80047a8:	bb1b      	cbnz	r3, 80047f2 <_vfiprintf_r+0x1d6>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	3307      	adds	r3, #7
 80047ae:	f023 0307 	bic.w	r3, r3, #7
 80047b2:	3308      	adds	r3, #8
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b8:	443b      	add	r3, r7
 80047ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80047bc:	e76a      	b.n	8004694 <_vfiprintf_r+0x78>
 80047be:	460c      	mov	r4, r1
 80047c0:	2001      	movs	r0, #1
 80047c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047c6:	e7a8      	b.n	800471a <_vfiprintf_r+0xfe>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f04f 0c0a 	mov.w	ip, #10
 80047ce:	4619      	mov	r1, r3
 80047d0:	3401      	adds	r4, #1
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	4620      	mov	r0, r4
 80047d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047da:	3a30      	subs	r2, #48	@ 0x30
 80047dc:	2a09      	cmp	r2, #9
 80047de:	d903      	bls.n	80047e8 <_vfiprintf_r+0x1cc>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0c6      	beq.n	8004772 <_vfiprintf_r+0x156>
 80047e4:	9105      	str	r1, [sp, #20]
 80047e6:	e7c4      	b.n	8004772 <_vfiprintf_r+0x156>
 80047e8:	4604      	mov	r4, r0
 80047ea:	2301      	movs	r3, #1
 80047ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f0:	e7f0      	b.n	80047d4 <_vfiprintf_r+0x1b8>
 80047f2:	ab03      	add	r3, sp, #12
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	462a      	mov	r2, r5
 80047f8:	4630      	mov	r0, r6
 80047fa:	4b13      	ldr	r3, [pc, #76]	@ (8004848 <_vfiprintf_r+0x22c>)
 80047fc:	a904      	add	r1, sp, #16
 80047fe:	f3af 8000 	nop.w
 8004802:	4607      	mov	r7, r0
 8004804:	1c78      	adds	r0, r7, #1
 8004806:	d1d6      	bne.n	80047b6 <_vfiprintf_r+0x19a>
 8004808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800480a:	07d9      	lsls	r1, r3, #31
 800480c:	d405      	bmi.n	800481a <_vfiprintf_r+0x1fe>
 800480e:	89ab      	ldrh	r3, [r5, #12]
 8004810:	059a      	lsls	r2, r3, #22
 8004812:	d402      	bmi.n	800481a <_vfiprintf_r+0x1fe>
 8004814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004816:	f7ff fde1 	bl	80043dc <__retarget_lock_release_recursive>
 800481a:	89ab      	ldrh	r3, [r5, #12]
 800481c:	065b      	lsls	r3, r3, #25
 800481e:	f53f af1f 	bmi.w	8004660 <_vfiprintf_r+0x44>
 8004822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004824:	e71e      	b.n	8004664 <_vfiprintf_r+0x48>
 8004826:	ab03      	add	r3, sp, #12
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	462a      	mov	r2, r5
 800482c:	4630      	mov	r0, r6
 800482e:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <_vfiprintf_r+0x22c>)
 8004830:	a904      	add	r1, sp, #16
 8004832:	f000 f87d 	bl	8004930 <_printf_i>
 8004836:	e7e4      	b.n	8004802 <_vfiprintf_r+0x1e6>
 8004838:	08004f12 	.word	0x08004f12
 800483c:	08004f18 	.word	0x08004f18
 8004840:	08004f1c 	.word	0x08004f1c
 8004844:	00000000 	.word	0x00000000
 8004848:	080045f7 	.word	0x080045f7

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4616      	mov	r6, r2
 8004852:	4698      	mov	r8, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	4607      	mov	r7, r0
 800485a:	4293      	cmp	r3, r2
 800485c:	bfb8      	it	lt
 800485e:	4613      	movlt	r3, r2
 8004860:	6033      	str	r3, [r6, #0]
 8004862:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004866:	460c      	mov	r4, r1
 8004868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800486c:	b10a      	cbz	r2, 8004872 <_printf_common+0x26>
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	bf42      	ittt	mi
 8004878:	6833      	ldrmi	r3, [r6, #0]
 800487a:	3302      	addmi	r3, #2
 800487c:	6033      	strmi	r3, [r6, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d106      	bne.n	8004894 <_printf_common+0x48>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6832      	ldr	r2, [r6, #0]
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	42ab      	cmp	r3, r5
 8004892:	dc2b      	bgt.n	80048ec <_printf_common+0xa0>
 8004894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	3b00      	subs	r3, #0
 800489c:	bf18      	it	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d430      	bmi.n	8004906 <_printf_common+0xba>
 80048a4:	4641      	mov	r1, r8
 80048a6:	4638      	mov	r0, r7
 80048a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048ac:	47c8      	blx	r9
 80048ae:	3001      	adds	r0, #1
 80048b0:	d023      	beq.n	80048fa <_printf_common+0xae>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6922      	ldr	r2, [r4, #16]
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf14      	ite	ne
 80048be:	2500      	movne	r5, #0
 80048c0:	6833      	ldreq	r3, [r6, #0]
 80048c2:	f04f 0600 	mov.w	r6, #0
 80048c6:	bf08      	it	eq
 80048c8:	68e5      	ldreq	r5, [r4, #12]
 80048ca:	f104 041a 	add.w	r4, r4, #26
 80048ce:	bf08      	it	eq
 80048d0:	1aed      	subeq	r5, r5, r3
 80048d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048d6:	bf08      	it	eq
 80048d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048dc:	4293      	cmp	r3, r2
 80048de:	bfc4      	itt	gt
 80048e0:	1a9b      	subgt	r3, r3, r2
 80048e2:	18ed      	addgt	r5, r5, r3
 80048e4:	42b5      	cmp	r5, r6
 80048e6:	d11a      	bne.n	800491e <_printf_common+0xd2>
 80048e8:	2000      	movs	r0, #0
 80048ea:	e008      	b.n	80048fe <_printf_common+0xb2>
 80048ec:	2301      	movs	r3, #1
 80048ee:	4652      	mov	r2, sl
 80048f0:	4641      	mov	r1, r8
 80048f2:	4638      	mov	r0, r7
 80048f4:	47c8      	blx	r9
 80048f6:	3001      	adds	r0, #1
 80048f8:	d103      	bne.n	8004902 <_printf_common+0xb6>
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295
 80048fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004902:	3501      	adds	r5, #1
 8004904:	e7c1      	b.n	800488a <_printf_common+0x3e>
 8004906:	2030      	movs	r0, #48	@ 0x30
 8004908:	18e1      	adds	r1, r4, r3
 800490a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004914:	4422      	add	r2, r4
 8004916:	3302      	adds	r3, #2
 8004918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800491c:	e7c2      	b.n	80048a4 <_printf_common+0x58>
 800491e:	2301      	movs	r3, #1
 8004920:	4622      	mov	r2, r4
 8004922:	4641      	mov	r1, r8
 8004924:	4638      	mov	r0, r7
 8004926:	47c8      	blx	r9
 8004928:	3001      	adds	r0, #1
 800492a:	d0e6      	beq.n	80048fa <_printf_common+0xae>
 800492c:	3601      	adds	r6, #1
 800492e:	e7d9      	b.n	80048e4 <_printf_common+0x98>

08004930 <_printf_i>:
 8004930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	7e0f      	ldrb	r7, [r1, #24]
 8004936:	4691      	mov	r9, r2
 8004938:	2f78      	cmp	r7, #120	@ 0x78
 800493a:	4680      	mov	r8, r0
 800493c:	460c      	mov	r4, r1
 800493e:	469a      	mov	sl, r3
 8004940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004946:	d807      	bhi.n	8004958 <_printf_i+0x28>
 8004948:	2f62      	cmp	r7, #98	@ 0x62
 800494a:	d80a      	bhi.n	8004962 <_printf_i+0x32>
 800494c:	2f00      	cmp	r7, #0
 800494e:	f000 80d3 	beq.w	8004af8 <_printf_i+0x1c8>
 8004952:	2f58      	cmp	r7, #88	@ 0x58
 8004954:	f000 80ba 	beq.w	8004acc <_printf_i+0x19c>
 8004958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800495c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004960:	e03a      	b.n	80049d8 <_printf_i+0xa8>
 8004962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004966:	2b15      	cmp	r3, #21
 8004968:	d8f6      	bhi.n	8004958 <_printf_i+0x28>
 800496a:	a101      	add	r1, pc, #4	@ (adr r1, 8004970 <_printf_i+0x40>)
 800496c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004970:	080049c9 	.word	0x080049c9
 8004974:	080049dd 	.word	0x080049dd
 8004978:	08004959 	.word	0x08004959
 800497c:	08004959 	.word	0x08004959
 8004980:	08004959 	.word	0x08004959
 8004984:	08004959 	.word	0x08004959
 8004988:	080049dd 	.word	0x080049dd
 800498c:	08004959 	.word	0x08004959
 8004990:	08004959 	.word	0x08004959
 8004994:	08004959 	.word	0x08004959
 8004998:	08004959 	.word	0x08004959
 800499c:	08004adf 	.word	0x08004adf
 80049a0:	08004a07 	.word	0x08004a07
 80049a4:	08004a99 	.word	0x08004a99
 80049a8:	08004959 	.word	0x08004959
 80049ac:	08004959 	.word	0x08004959
 80049b0:	08004b01 	.word	0x08004b01
 80049b4:	08004959 	.word	0x08004959
 80049b8:	08004a07 	.word	0x08004a07
 80049bc:	08004959 	.word	0x08004959
 80049c0:	08004959 	.word	0x08004959
 80049c4:	08004aa1 	.word	0x08004aa1
 80049c8:	6833      	ldr	r3, [r6, #0]
 80049ca:	1d1a      	adds	r2, r3, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6032      	str	r2, [r6, #0]
 80049d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049d8:	2301      	movs	r3, #1
 80049da:	e09e      	b.n	8004b1a <_printf_i+0x1ea>
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	1d19      	adds	r1, r3, #4
 80049e2:	6031      	str	r1, [r6, #0]
 80049e4:	0606      	lsls	r6, r0, #24
 80049e6:	d501      	bpl.n	80049ec <_printf_i+0xbc>
 80049e8:	681d      	ldr	r5, [r3, #0]
 80049ea:	e003      	b.n	80049f4 <_printf_i+0xc4>
 80049ec:	0645      	lsls	r5, r0, #25
 80049ee:	d5fb      	bpl.n	80049e8 <_printf_i+0xb8>
 80049f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	da03      	bge.n	8004a00 <_printf_i+0xd0>
 80049f8:	232d      	movs	r3, #45	@ 0x2d
 80049fa:	426d      	negs	r5, r5
 80049fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a00:	230a      	movs	r3, #10
 8004a02:	4859      	ldr	r0, [pc, #356]	@ (8004b68 <_printf_i+0x238>)
 8004a04:	e011      	b.n	8004a2a <_printf_i+0xfa>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	0608      	lsls	r0, r1, #24
 8004a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a10:	d402      	bmi.n	8004a18 <_printf_i+0xe8>
 8004a12:	0649      	lsls	r1, r1, #25
 8004a14:	bf48      	it	mi
 8004a16:	b2ad      	uxthmi	r5, r5
 8004a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	bf14      	ite	ne
 8004a1e:	230a      	movne	r3, #10
 8004a20:	2308      	moveq	r3, #8
 8004a22:	4851      	ldr	r0, [pc, #324]	@ (8004b68 <_printf_i+0x238>)
 8004a24:	2100      	movs	r1, #0
 8004a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a2a:	6866      	ldr	r6, [r4, #4]
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	bfa8      	it	ge
 8004a30:	6821      	ldrge	r1, [r4, #0]
 8004a32:	60a6      	str	r6, [r4, #8]
 8004a34:	bfa4      	itt	ge
 8004a36:	f021 0104 	bicge.w	r1, r1, #4
 8004a3a:	6021      	strge	r1, [r4, #0]
 8004a3c:	b90d      	cbnz	r5, 8004a42 <_printf_i+0x112>
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	d04b      	beq.n	8004ada <_printf_i+0x1aa>
 8004a42:	4616      	mov	r6, r2
 8004a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a48:	fb03 5711 	mls	r7, r3, r1, r5
 8004a4c:	5dc7      	ldrb	r7, [r0, r7]
 8004a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a52:	462f      	mov	r7, r5
 8004a54:	42bb      	cmp	r3, r7
 8004a56:	460d      	mov	r5, r1
 8004a58:	d9f4      	bls.n	8004a44 <_printf_i+0x114>
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d10b      	bne.n	8004a76 <_printf_i+0x146>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	07df      	lsls	r7, r3, #31
 8004a62:	d508      	bpl.n	8004a76 <_printf_i+0x146>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	6861      	ldr	r1, [r4, #4]
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	bfde      	ittt	le
 8004a6c:	2330      	movle	r3, #48	@ 0x30
 8004a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a76:	1b92      	subs	r2, r2, r6
 8004a78:	6122      	str	r2, [r4, #16]
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f8cd a000 	str.w	sl, [sp]
 8004a84:	aa03      	add	r2, sp, #12
 8004a86:	f7ff fee1 	bl	800484c <_printf_common>
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d14a      	bne.n	8004b24 <_printf_i+0x1f4>
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	b004      	add	sp, #16
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	f043 0320 	orr.w	r3, r3, #32
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	2778      	movs	r7, #120	@ 0x78
 8004aa2:	4832      	ldr	r0, [pc, #200]	@ (8004b6c <_printf_i+0x23c>)
 8004aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	6831      	ldr	r1, [r6, #0]
 8004aac:	061f      	lsls	r7, r3, #24
 8004aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ab2:	d402      	bmi.n	8004aba <_printf_i+0x18a>
 8004ab4:	065f      	lsls	r7, r3, #25
 8004ab6:	bf48      	it	mi
 8004ab8:	b2ad      	uxthmi	r5, r5
 8004aba:	6031      	str	r1, [r6, #0]
 8004abc:	07d9      	lsls	r1, r3, #31
 8004abe:	bf44      	itt	mi
 8004ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ac4:	6023      	strmi	r3, [r4, #0]
 8004ac6:	b11d      	cbz	r5, 8004ad0 <_printf_i+0x1a0>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	e7ab      	b.n	8004a24 <_printf_i+0xf4>
 8004acc:	4826      	ldr	r0, [pc, #152]	@ (8004b68 <_printf_i+0x238>)
 8004ace:	e7e9      	b.n	8004aa4 <_printf_i+0x174>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	f023 0320 	bic.w	r3, r3, #32
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	e7f6      	b.n	8004ac8 <_printf_i+0x198>
 8004ada:	4616      	mov	r6, r2
 8004adc:	e7bd      	b.n	8004a5a <_printf_i+0x12a>
 8004ade:	6833      	ldr	r3, [r6, #0]
 8004ae0:	6825      	ldr	r5, [r4, #0]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6961      	ldr	r1, [r4, #20]
 8004ae6:	6030      	str	r0, [r6, #0]
 8004ae8:	062e      	lsls	r6, r5, #24
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	d501      	bpl.n	8004af2 <_printf_i+0x1c2>
 8004aee:	6019      	str	r1, [r3, #0]
 8004af0:	e002      	b.n	8004af8 <_printf_i+0x1c8>
 8004af2:	0668      	lsls	r0, r5, #25
 8004af4:	d5fb      	bpl.n	8004aee <_printf_i+0x1be>
 8004af6:	8019      	strh	r1, [r3, #0]
 8004af8:	2300      	movs	r3, #0
 8004afa:	4616      	mov	r6, r2
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	e7bc      	b.n	8004a7a <_printf_i+0x14a>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	2100      	movs	r1, #0
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	6032      	str	r2, [r6, #0]
 8004b08:	681e      	ldr	r6, [r3, #0]
 8004b0a:	6862      	ldr	r2, [r4, #4]
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f99f 	bl	8004e50 <memchr>
 8004b12:	b108      	cbz	r0, 8004b18 <_printf_i+0x1e8>
 8004b14:	1b80      	subs	r0, r0, r6
 8004b16:	6060      	str	r0, [r4, #4]
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b22:	e7aa      	b.n	8004a7a <_printf_i+0x14a>
 8004b24:	4632      	mov	r2, r6
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	47d0      	blx	sl
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d0ad      	beq.n	8004a8e <_printf_i+0x15e>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	079b      	lsls	r3, r3, #30
 8004b36:	d413      	bmi.n	8004b60 <_printf_i+0x230>
 8004b38:	68e0      	ldr	r0, [r4, #12]
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	bfb8      	it	lt
 8004b40:	4618      	movlt	r0, r3
 8004b42:	e7a6      	b.n	8004a92 <_printf_i+0x162>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4632      	mov	r2, r6
 8004b48:	4649      	mov	r1, r9
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	47d0      	blx	sl
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d09d      	beq.n	8004a8e <_printf_i+0x15e>
 8004b52:	3501      	adds	r5, #1
 8004b54:	68e3      	ldr	r3, [r4, #12]
 8004b56:	9903      	ldr	r1, [sp, #12]
 8004b58:	1a5b      	subs	r3, r3, r1
 8004b5a:	42ab      	cmp	r3, r5
 8004b5c:	dcf2      	bgt.n	8004b44 <_printf_i+0x214>
 8004b5e:	e7eb      	b.n	8004b38 <_printf_i+0x208>
 8004b60:	2500      	movs	r5, #0
 8004b62:	f104 0619 	add.w	r6, r4, #25
 8004b66:	e7f5      	b.n	8004b54 <_printf_i+0x224>
 8004b68:	08004f23 	.word	0x08004f23
 8004b6c:	08004f34 	.word	0x08004f34

08004b70 <__sflush_r>:
 8004b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	0716      	lsls	r6, r2, #28
 8004b78:	4605      	mov	r5, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	d454      	bmi.n	8004c28 <__sflush_r+0xb8>
 8004b7e:	684b      	ldr	r3, [r1, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dc02      	bgt.n	8004b8a <__sflush_r+0x1a>
 8004b84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	dd48      	ble.n	8004c1c <__sflush_r+0xac>
 8004b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b8c:	2e00      	cmp	r6, #0
 8004b8e:	d045      	beq.n	8004c1c <__sflush_r+0xac>
 8004b90:	2300      	movs	r3, #0
 8004b92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b96:	682f      	ldr	r7, [r5, #0]
 8004b98:	6a21      	ldr	r1, [r4, #32]
 8004b9a:	602b      	str	r3, [r5, #0]
 8004b9c:	d030      	beq.n	8004c00 <__sflush_r+0x90>
 8004b9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	0759      	lsls	r1, r3, #29
 8004ba4:	d505      	bpl.n	8004bb2 <__sflush_r+0x42>
 8004ba6:	6863      	ldr	r3, [r4, #4]
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bac:	b10b      	cbz	r3, 8004bb2 <__sflush_r+0x42>
 8004bae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bb8:	6a21      	ldr	r1, [r4, #32]
 8004bba:	47b0      	blx	r6
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	d106      	bne.n	8004bd0 <__sflush_r+0x60>
 8004bc2:	6829      	ldr	r1, [r5, #0]
 8004bc4:	291d      	cmp	r1, #29
 8004bc6:	d82b      	bhi.n	8004c20 <__sflush_r+0xb0>
 8004bc8:	4a28      	ldr	r2, [pc, #160]	@ (8004c6c <__sflush_r+0xfc>)
 8004bca:	410a      	asrs	r2, r1
 8004bcc:	07d6      	lsls	r6, r2, #31
 8004bce:	d427      	bmi.n	8004c20 <__sflush_r+0xb0>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	6062      	str	r2, [r4, #4]
 8004bd4:	6922      	ldr	r2, [r4, #16]
 8004bd6:	04d9      	lsls	r1, r3, #19
 8004bd8:	6022      	str	r2, [r4, #0]
 8004bda:	d504      	bpl.n	8004be6 <__sflush_r+0x76>
 8004bdc:	1c42      	adds	r2, r0, #1
 8004bde:	d101      	bne.n	8004be4 <__sflush_r+0x74>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b903      	cbnz	r3, 8004be6 <__sflush_r+0x76>
 8004be4:	6560      	str	r0, [r4, #84]	@ 0x54
 8004be6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004be8:	602f      	str	r7, [r5, #0]
 8004bea:	b1b9      	cbz	r1, 8004c1c <__sflush_r+0xac>
 8004bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	d002      	beq.n	8004bfa <__sflush_r+0x8a>
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	f7ff fbf3 	bl	80043e0 <_free_r>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bfe:	e00d      	b.n	8004c1c <__sflush_r+0xac>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b0      	blx	r6
 8004c06:	4602      	mov	r2, r0
 8004c08:	1c50      	adds	r0, r2, #1
 8004c0a:	d1c9      	bne.n	8004ba0 <__sflush_r+0x30>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0c6      	beq.n	8004ba0 <__sflush_r+0x30>
 8004c12:	2b1d      	cmp	r3, #29
 8004c14:	d001      	beq.n	8004c1a <__sflush_r+0xaa>
 8004c16:	2b16      	cmp	r3, #22
 8004c18:	d11d      	bne.n	8004c56 <__sflush_r+0xe6>
 8004c1a:	602f      	str	r7, [r5, #0]
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e021      	b.n	8004c64 <__sflush_r+0xf4>
 8004c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	e01a      	b.n	8004c5e <__sflush_r+0xee>
 8004c28:	690f      	ldr	r7, [r1, #16]
 8004c2a:	2f00      	cmp	r7, #0
 8004c2c:	d0f6      	beq.n	8004c1c <__sflush_r+0xac>
 8004c2e:	0793      	lsls	r3, r2, #30
 8004c30:	bf18      	it	ne
 8004c32:	2300      	movne	r3, #0
 8004c34:	680e      	ldr	r6, [r1, #0]
 8004c36:	bf08      	it	eq
 8004c38:	694b      	ldreq	r3, [r1, #20]
 8004c3a:	1bf6      	subs	r6, r6, r7
 8004c3c:	600f      	str	r7, [r1, #0]
 8004c3e:	608b      	str	r3, [r1, #8]
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	ddeb      	ble.n	8004c1c <__sflush_r+0xac>
 8004c44:	4633      	mov	r3, r6
 8004c46:	463a      	mov	r2, r7
 8004c48:	4628      	mov	r0, r5
 8004c4a:	6a21      	ldr	r1, [r4, #32]
 8004c4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c50:	47e0      	blx	ip
 8004c52:	2800      	cmp	r0, #0
 8004c54:	dc07      	bgt.n	8004c66 <__sflush_r+0xf6>
 8004c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c66:	4407      	add	r7, r0
 8004c68:	1a36      	subs	r6, r6, r0
 8004c6a:	e7e9      	b.n	8004c40 <__sflush_r+0xd0>
 8004c6c:	dfbffffe 	.word	0xdfbffffe

08004c70 <_fflush_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	690b      	ldr	r3, [r1, #16]
 8004c74:	4605      	mov	r5, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	b913      	cbnz	r3, 8004c80 <_fflush_r+0x10>
 8004c7a:	2500      	movs	r5, #0
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	b118      	cbz	r0, 8004c8a <_fflush_r+0x1a>
 8004c82:	6a03      	ldr	r3, [r0, #32]
 8004c84:	b90b      	cbnz	r3, 8004c8a <_fflush_r+0x1a>
 8004c86:	f7ff f9a9 	bl	8003fdc <__sinit>
 8004c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f3      	beq.n	8004c7a <_fflush_r+0xa>
 8004c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c94:	07d0      	lsls	r0, r2, #31
 8004c96:	d404      	bmi.n	8004ca2 <_fflush_r+0x32>
 8004c98:	0599      	lsls	r1, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_fflush_r+0x32>
 8004c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c9e:	f7ff fb9c 	bl	80043da <__retarget_lock_acquire_recursive>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	f7ff ff63 	bl	8004b70 <__sflush_r>
 8004caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cac:	4605      	mov	r5, r0
 8004cae:	07da      	lsls	r2, r3, #31
 8004cb0:	d4e4      	bmi.n	8004c7c <_fflush_r+0xc>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	059b      	lsls	r3, r3, #22
 8004cb6:	d4e1      	bmi.n	8004c7c <_fflush_r+0xc>
 8004cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cba:	f7ff fb8f 	bl	80043dc <__retarget_lock_release_recursive>
 8004cbe:	e7dd      	b.n	8004c7c <_fflush_r+0xc>

08004cc0 <__swhatbuf_r>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	4615      	mov	r5, r2
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	461e      	mov	r6, r3
 8004cce:	b096      	sub	sp, #88	@ 0x58
 8004cd0:	da0c      	bge.n	8004cec <__swhatbuf_r+0x2c>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cda:	bf14      	ite	ne
 8004cdc:	2340      	movne	r3, #64	@ 0x40
 8004cde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	6031      	str	r1, [r6, #0]
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	b016      	add	sp, #88	@ 0x58
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	466a      	mov	r2, sp
 8004cee:	f000 f87d 	bl	8004dec <_fstat_r>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	dbed      	blt.n	8004cd2 <__swhatbuf_r+0x12>
 8004cf6:	9901      	ldr	r1, [sp, #4]
 8004cf8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d00:	4259      	negs	r1, r3
 8004d02:	4159      	adcs	r1, r3
 8004d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d08:	e7eb      	b.n	8004ce2 <__swhatbuf_r+0x22>

08004d0a <__smakebuf_r>:
 8004d0a:	898b      	ldrh	r3, [r1, #12]
 8004d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d0e:	079d      	lsls	r5, r3, #30
 8004d10:	4606      	mov	r6, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	d507      	bpl.n	8004d26 <__smakebuf_r+0x1c>
 8004d16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	6123      	str	r3, [r4, #16]
 8004d1e:	2301      	movs	r3, #1
 8004d20:	6163      	str	r3, [r4, #20]
 8004d22:	b003      	add	sp, #12
 8004d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d26:	466a      	mov	r2, sp
 8004d28:	ab01      	add	r3, sp, #4
 8004d2a:	f7ff ffc9 	bl	8004cc0 <__swhatbuf_r>
 8004d2e:	9f00      	ldr	r7, [sp, #0]
 8004d30:	4605      	mov	r5, r0
 8004d32:	4639      	mov	r1, r7
 8004d34:	4630      	mov	r0, r6
 8004d36:	f7ff fbbd 	bl	80044b4 <_malloc_r>
 8004d3a:	b948      	cbnz	r0, 8004d50 <__smakebuf_r+0x46>
 8004d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d40:	059a      	lsls	r2, r3, #22
 8004d42:	d4ee      	bmi.n	8004d22 <__smakebuf_r+0x18>
 8004d44:	f023 0303 	bic.w	r3, r3, #3
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	e7e2      	b.n	8004d16 <__smakebuf_r+0xc>
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5a:	81a3      	strh	r3, [r4, #12]
 8004d5c:	9b01      	ldr	r3, [sp, #4]
 8004d5e:	6020      	str	r0, [r4, #0]
 8004d60:	b15b      	cbz	r3, 8004d7a <__smakebuf_r+0x70>
 8004d62:	4630      	mov	r0, r6
 8004d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d68:	f000 f852 	bl	8004e10 <_isatty_r>
 8004d6c:	b128      	cbz	r0, 8004d7a <__smakebuf_r+0x70>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f023 0303 	bic.w	r3, r3, #3
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	81a3      	strh	r3, [r4, #12]
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	431d      	orrs	r5, r3
 8004d7e:	81a5      	strh	r5, [r4, #12]
 8004d80:	e7cf      	b.n	8004d22 <__smakebuf_r+0x18>

08004d82 <_putc_r>:
 8004d82:	b570      	push	{r4, r5, r6, lr}
 8004d84:	460d      	mov	r5, r1
 8004d86:	4614      	mov	r4, r2
 8004d88:	4606      	mov	r6, r0
 8004d8a:	b118      	cbz	r0, 8004d94 <_putc_r+0x12>
 8004d8c:	6a03      	ldr	r3, [r0, #32]
 8004d8e:	b90b      	cbnz	r3, 8004d94 <_putc_r+0x12>
 8004d90:	f7ff f924 	bl	8003fdc <__sinit>
 8004d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d96:	07d8      	lsls	r0, r3, #31
 8004d98:	d405      	bmi.n	8004da6 <_putc_r+0x24>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	0599      	lsls	r1, r3, #22
 8004d9e:	d402      	bmi.n	8004da6 <_putc_r+0x24>
 8004da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004da2:	f7ff fb1a 	bl	80043da <__retarget_lock_acquire_recursive>
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	60a3      	str	r3, [r4, #8]
 8004dae:	da05      	bge.n	8004dbc <_putc_r+0x3a>
 8004db0:	69a2      	ldr	r2, [r4, #24]
 8004db2:	4293      	cmp	r3, r2
 8004db4:	db12      	blt.n	8004ddc <_putc_r+0x5a>
 8004db6:	b2eb      	uxtb	r3, r5
 8004db8:	2b0a      	cmp	r3, #10
 8004dba:	d00f      	beq.n	8004ddc <_putc_r+0x5a>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	6022      	str	r2, [r4, #0]
 8004dc2:	701d      	strb	r5, [r3, #0]
 8004dc4:	b2ed      	uxtb	r5, r5
 8004dc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004dc8:	07da      	lsls	r2, r3, #31
 8004dca:	d405      	bmi.n	8004dd8 <_putc_r+0x56>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	059b      	lsls	r3, r3, #22
 8004dd0:	d402      	bmi.n	8004dd8 <_putc_r+0x56>
 8004dd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dd4:	f7ff fb02 	bl	80043dc <__retarget_lock_release_recursive>
 8004dd8:	4628      	mov	r0, r5
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4622      	mov	r2, r4
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7ff f9ec 	bl	80041be <__swbuf_r>
 8004de6:	4605      	mov	r5, r0
 8004de8:	e7ed      	b.n	8004dc6 <_putc_r+0x44>
	...

08004dec <_fstat_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	2300      	movs	r3, #0
 8004df0:	4d06      	ldr	r5, [pc, #24]	@ (8004e0c <_fstat_r+0x20>)
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f7fb fc55 	bl	80006a8 <_fstat>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_fstat_r+0x1c>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_fstat_r+0x1c>
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200002b0 	.word	0x200002b0

08004e10 <_isatty_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2300      	movs	r3, #0
 8004e14:	4d05      	ldr	r5, [pc, #20]	@ (8004e2c <_isatty_r+0x1c>)
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fb fc53 	bl	80006c6 <_isatty>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_isatty_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_isatty_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	200002b0 	.word	0x200002b0

08004e30 <_sbrk_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	2300      	movs	r3, #0
 8004e34:	4d05      	ldr	r5, [pc, #20]	@ (8004e4c <_sbrk_r+0x1c>)
 8004e36:	4604      	mov	r4, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	f7fb fc5a 	bl	80006f4 <_sbrk>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_sbrk_r+0x1a>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_sbrk_r+0x1a>
 8004e48:	6023      	str	r3, [r4, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	200002b0 	.word	0x200002b0

08004e50 <memchr>:
 8004e50:	4603      	mov	r3, r0
 8004e52:	b510      	push	{r4, lr}
 8004e54:	b2c9      	uxtb	r1, r1
 8004e56:	4402      	add	r2, r0
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	d101      	bne.n	8004e62 <memchr+0x12>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e003      	b.n	8004e6a <memchr+0x1a>
 8004e62:	7804      	ldrb	r4, [r0, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	428c      	cmp	r4, r1
 8004e68:	d1f6      	bne.n	8004e58 <memchr+0x8>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr
