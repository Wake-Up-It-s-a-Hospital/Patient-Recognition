
tag_recognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c90  08003c90  00005070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c90  08003c90  00005070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c90  08003c90  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003c98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08003d08  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003d08  000052a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000996c  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f3  00000000  00000000  0000ea05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  000101f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077e  00000000  00000000  00010b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ceb  00000000  00000000  000112fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c110  00000000  00000000  00028fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086311  00000000  00000000  000350f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f38  00000000  00000000  000bb450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000be388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b7c 	.word	0x08003b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b7c 	.word	0x08003b7c

0800014c <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f002 fb65 	bl	800282c <HAL_UART_Transmit>
    return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000e0 	.word	0x200000e0

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fb73 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f8af 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f94b 	bl	8000418 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000182:	f000 f91f 	bl	80003c4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000186:	f000 f8ef 	bl	8000368 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello from STM32! \n");
 800018a:	4847      	ldr	r0, [pc, #284]	@ (80002a8 <main+0x138>)
 800018c:	f002 fe54 	bl	8002e38 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x32 << 1, husky_tx, sizeof(husky_tx), 100) == HAL_OK)
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2308      	movs	r3, #8
 8000196:	4a45      	ldr	r2, [pc, #276]	@ (80002ac <main+0x13c>)
 8000198:	2164      	movs	r1, #100	@ 0x64
 800019a:	4845      	ldr	r0, [pc, #276]	@ (80002b0 <main+0x140>)
 800019c:	f000 fff6 	bl	800118c <HAL_I2C_Master_Transmit>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d177      	bne.n	8000296 <main+0x126>
	  {
	      if (HAL_I2C_Master_Receive(&hi2c2, 0x32 << 1, husky_rx, sizeof(husky_rx), 100) == HAL_OK)
 80001a6:	2364      	movs	r3, #100	@ 0x64
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	231e      	movs	r3, #30
 80001ac:	4a41      	ldr	r2, [pc, #260]	@ (80002b4 <main+0x144>)
 80001ae:	2164      	movs	r1, #100	@ 0x64
 80001b0:	483f      	ldr	r0, [pc, #252]	@ (80002b0 <main+0x140>)
 80001b2:	f001 f8e9 	bl	8001388 <HAL_I2C_Master_Receive>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d168      	bne.n	800028e <main+0x11e>
	      {
	    	  printf("RAW: ");
 80001bc:	483e      	ldr	r0, [pc, #248]	@ (80002b8 <main+0x148>)
 80001be:	f002 fdcb 	bl	8002d58 <iprintf>
	    	  for (int i = 0; i < 30; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e00a      	b.n	80001de <main+0x6e>
	    	      printf("%02X ", husky_rx[i]);
 80001c8:	4a3a      	ldr	r2, [pc, #232]	@ (80002b4 <main+0x144>)
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	4413      	add	r3, r2
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	483a      	ldr	r0, [pc, #232]	@ (80002bc <main+0x14c>)
 80001d4:	f002 fdc0 	bl	8002d58 <iprintf>
	    	  for (int i = 0; i < 30; i++) {
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	3301      	adds	r3, #1
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2b1d      	cmp	r3, #29
 80001e2:	ddf1      	ble.n	80001c8 <main+0x58>
	    	  }
	    	  printf("\n");
 80001e4:	200a      	movs	r0, #10
 80001e6:	f002 fdc9 	bl	8002d7c <putchar>


	          // 프레임 시작 확인
	          if (husky_rx[0] == 0x55 && husky_rx[1] == 0xAA)
 80001ea:	4b32      	ldr	r3, [pc, #200]	@ (80002b4 <main+0x144>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b55      	cmp	r3, #85	@ 0x55
 80001f0:	d149      	bne.n	8000286 <main+0x116>
 80001f2:	4b30      	ldr	r3, [pc, #192]	@ (80002b4 <main+0x144>)
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	2baa      	cmp	r3, #170	@ 0xaa
 80001f8:	d145      	bne.n	8000286 <main+0x116>
	          {
	              // 체크섬 계산
	              uint8_t length = husky_rx[2];
 80001fa:	4b2e      	ldr	r3, [pc, #184]	@ (80002b4 <main+0x144>)
 80001fc:	789b      	ldrb	r3, [r3, #2]
 80001fe:	70fb      	strb	r3, [r7, #3]
	              uint8_t expected_checksum = husky_rx[4 + length];
 8000200:	78fb      	ldrb	r3, [r7, #3]
 8000202:	3304      	adds	r3, #4
 8000204:	4a2b      	ldr	r2, [pc, #172]	@ (80002b4 <main+0x144>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	70bb      	strb	r3, [r7, #2]
	              uint8_t calculated_checksum = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	72fb      	strb	r3, [r7, #11]
	              for (int i = 4; i < 4 + length; i++)
 800020e:	2304      	movs	r3, #4
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e009      	b.n	8000228 <main+0xb8>
	                  calculated_checksum += husky_rx[i];
 8000214:	4a27      	ldr	r2, [pc, #156]	@ (80002b4 <main+0x144>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	781a      	ldrb	r2, [r3, #0]
 800021c:	7afb      	ldrb	r3, [r7, #11]
 800021e:	4413      	add	r3, r2
 8000220:	72fb      	strb	r3, [r7, #11]
	              for (int i = 4; i < 4 + length; i++)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	3303      	adds	r3, #3
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	429a      	cmp	r2, r3
 8000230:	ddf0      	ble.n	8000214 <main+0xa4>

	              if (calculated_checksum == expected_checksum)
 8000232:	7afa      	ldrb	r2, [r7, #11]
 8000234:	78bb      	ldrb	r3, [r7, #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d121      	bne.n	800027e <main+0x10e>
	              {
	                  // 좌표 추출
	                  corx = husky_rx[8] | (husky_rx[9] << 8);
 800023a:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <main+0x144>)
 800023c:	7a1b      	ldrb	r3, [r3, #8]
 800023e:	b21a      	sxth	r2, r3
 8000240:	4b1c      	ldr	r3, [pc, #112]	@ (80002b4 <main+0x144>)
 8000242:	7a5b      	ldrb	r3, [r3, #9]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	b21b      	sxth	r3, r3
 8000248:	4313      	orrs	r3, r2
 800024a:	b21a      	sxth	r2, r3
 800024c:	4b1c      	ldr	r3, [pc, #112]	@ (80002c0 <main+0x150>)
 800024e:	801a      	strh	r2, [r3, #0]
	                  cory = husky_rx[10] | (husky_rx[11] << 8);
 8000250:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <main+0x144>)
 8000252:	7a9b      	ldrb	r3, [r3, #10]
 8000254:	b21a      	sxth	r2, r3
 8000256:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <main+0x144>)
 8000258:	7adb      	ldrb	r3, [r3, #11]
 800025a:	021b      	lsls	r3, r3, #8
 800025c:	b21b      	sxth	r3, r3
 800025e:	4313      	orrs	r3, r2
 8000260:	b21a      	sxth	r2, r3
 8000262:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <main+0x154>)
 8000264:	801a      	strh	r2, [r3, #0]
	                  printf("x: %d, y: %d \n", corx, cory);
 8000266:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <main+0x150>)
 8000268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800026c:	4619      	mov	r1, r3
 800026e:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <main+0x154>)
 8000270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000274:	461a      	mov	r2, r3
 8000276:	4814      	ldr	r0, [pc, #80]	@ (80002c8 <main+0x158>)
 8000278:	f002 fd6e 	bl	8002d58 <iprintf>
	          {
 800027c:	e00e      	b.n	800029c <main+0x12c>
	              }
	              else
	              {
	                  printf("Checksum error \n");
 800027e:	4813      	ldr	r0, [pc, #76]	@ (80002cc <main+0x15c>)
 8000280:	f002 fdda 	bl	8002e38 <puts>
	          {
 8000284:	e00a      	b.n	800029c <main+0x12c>
	              }
	          }
	          else
	          {
	              printf("Invalid frame \n");
 8000286:	4812      	ldr	r0, [pc, #72]	@ (80002d0 <main+0x160>)
 8000288:	f002 fdd6 	bl	8002e38 <puts>
 800028c:	e006      	b.n	800029c <main+0x12c>
	          }
	      }
	      else
	      {
	          printf("Failed to receive from HuskyLens \n");
 800028e:	4811      	ldr	r0, [pc, #68]	@ (80002d4 <main+0x164>)
 8000290:	f002 fdd2 	bl	8002e38 <puts>
 8000294:	e002      	b.n	800029c <main+0x12c>
	      }
	  }
	  else
	  {
	      printf("Failed to transmit to HuskyLens \n");
 8000296:	4810      	ldr	r0, [pc, #64]	@ (80002d8 <main+0x168>)
 8000298:	f002 fdce 	bl	8002e38 <puts>
	  }

	  HAL_Delay(1000);  // 100ms 주기로 요청
 800029c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a0:	f000 fb40 	bl	8000924 <HAL_Delay>
	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x32 << 1, husky_tx, sizeof(husky_tx), 100) == HAL_OK)
 80002a4:	e774      	b.n	8000190 <main+0x20>
 80002a6:	bf00      	nop
 80002a8:	08003b94 	.word	0x08003b94
 80002ac:	20000000 	.word	0x20000000
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	2000012c 	.word	0x2000012c
 80002b8:	08003ba8 	.word	0x08003ba8
 80002bc:	08003bb0 	.word	0x08003bb0
 80002c0:	20000128 	.word	0x20000128
 80002c4:	2000012a 	.word	0x2000012a
 80002c8:	08003bb8 	.word	0x08003bb8
 80002cc:	08003bc8 	.word	0x08003bc8
 80002d0:	08003bd8 	.word	0x08003bd8
 80002d4:	08003be8 	.word	0x08003be8
 80002d8:	08003c0c 	.word	0x08003c0c

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b090      	sub	sp, #64	@ 0x40
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	2228      	movs	r2, #40	@ 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fe84 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000302:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2302      	movs	r3, #2
 8000312:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fe21 	bl	8001f6c <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000330:	f000 f8e0 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f002 f88e 	bl	8002470 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800035a:	f000 f8cb 	bl	80004f4 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	@ 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800036e:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <MX_I2C2_Init+0x54>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000374:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <MX_I2C2_Init+0x58>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000386:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800038a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_I2C2_Init+0x50>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <MX_I2C2_Init+0x50>)
 80003a6:	f000 fdad 	bl	8000f04 <HAL_I2C_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003b0:	f000 f8a0 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000008c 	.word	0x2000008c
 80003bc:	40005800 	.word	0x40005800
 80003c0:	000186a0 	.word	0x000186a0

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <MX_USART2_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003fc:	f002 f9c6 	bl	800278c <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f875 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000e0 	.word	0x200000e0
 8000414:	40004400 	.word	0x40004400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a2c      	ldr	r2, [pc, #176]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a26      	ldr	r2, [pc, #152]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2120      	movs	r1, #32
 8000490:	4815      	ldr	r0, [pc, #84]	@ (80004e8 <MX_GPIO_Init+0xd0>)
 8000492:	f000 fcfd 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_GPIO_Init+0xd4>)
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4811      	ldr	r0, [pc, #68]	@ (80004f0 <MX_GPIO_Init+0xd8>)
 80004ac:	f000 fb6c 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b0:	2320      	movs	r3, #32
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4808      	ldr	r0, [pc, #32]	@ (80004e8 <MX_GPIO_Init+0xd0>)
 80004c8:	f000 fb5e 	bl	8000b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2028      	movs	r0, #40	@ 0x28
 80004d2:	f000 fb22 	bl	8000b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004d6:	2028      	movs	r0, #40	@ 0x28
 80004d8:	f000 fb3b 	bl	8000b52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	10110000 	.word	0x10110000
 80004f0:	40011000 	.word	0x40011000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a16      	ldr	r2, [pc, #88]	@ (80005d8 <HAL_I2C_MspInit+0x74>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d124      	bne.n	80005ce <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <HAL_I2C_MspInit+0x78>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <HAL_I2C_MspInit+0x78>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_I2C_MspInit+0x78>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800059c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a2:	2312      	movs	r3, #18
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <HAL_I2C_MspInit+0x7c>)
 80005b2:	f000 fae9 	bl	8000b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <HAL_I2C_MspInit+0x78>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <HAL_I2C_MspInit+0x78>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	61d3      	str	r3, [r2, #28]
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <HAL_I2C_MspInit+0x78>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40005800 	.word	0x40005800
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a15      	ldr	r2, [pc, #84]	@ (8000654 <HAL_UART_MspInit+0x70>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d123      	bne.n	800064c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000604:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_UART_MspInit+0x74>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <HAL_UART_MspInit+0x74>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <HAL_UART_MspInit+0x74>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <HAL_UART_MspInit+0x74>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <HAL_UART_MspInit+0x74>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <HAL_UART_MspInit+0x74>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000634:	230c      	movs	r3, #12
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <HAL_UART_MspInit+0x78>)
 8000648:	f000 fa9e 	bl	8000b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40004400 	.word	0x40004400
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <NMI_Handler+0x4>

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <MemManage_Handler+0x4>

08000678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <UsageFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f91c 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006c0:	f000 fbfe 	bl	8000ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	e00a      	b.n	80006f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006da:	f3af 8000 	nop.w
 80006de:	4601      	mov	r1, r0
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	b2ca      	uxtb	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dbf0      	blt.n	80006da <_read+0x12>
  }

  return len;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	60f8      	str	r0, [r7, #12]
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	e009      	b.n	8000728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd15 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3301      	adds	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbf1      	blt.n	8000714 <_write+0x12>
  }
  return len;
 8000730:	687b      	ldr	r3, [r7, #4]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <_close>:

int _close(int file)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000760:	605a      	str	r2, [r3, #4]
  return 0;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <_isatty>:

int _isatty(int file)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000782:	b480      	push	{r7}
 8000784:	b085      	sub	sp, #20
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
	...

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f002 fc62 	bl	8003094 <__errno>
 80007d0:	4603      	mov	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <_sbrk+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20005000 	.word	0x20005000
 80007fc:	00000400 	.word	0x00000400
 8000800:	2000014c 	.word	0x2000014c
 8000804:	200002a0 	.word	0x200002a0

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000814:	f7ff fff8 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480b      	ldr	r0, [pc, #44]	@ (8000848 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800081a:	490c      	ldr	r1, [pc, #48]	@ (800084c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800081c:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <LoopFillZerobss+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a09      	ldr	r2, [pc, #36]	@ (8000854 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000830:	4c09      	ldr	r4, [pc, #36]	@ (8000858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083e:	f002 fc2f 	bl	80030a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fc95 	bl	8000170 <main>
  bx lr
 8000846:	4770      	bx	lr
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000850:	08003c98 	.word	0x08003c98
  ldr r2, =_sbss
 8000854:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000858:	200002a0 	.word	0x200002a0

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <HAL_Init+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <HAL_Init+0x28>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f947 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff fe40 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f95f 	bl	8000b6e <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f927 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	@ (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000010 	.word	0x20000010
 80008e8:	2000000c 	.word	0x2000000c

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a03      	ldr	r2, [pc, #12]	@ (800090c <HAL_IncTick+0x20>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000010 	.word	0x20000010
 800090c:	20000150 	.word	0x20000150

08000910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	@ (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000150 	.word	0x20000150

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff0 	bl	8000910 <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffe0 	bl	8000910 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000010 	.word	0x20000010

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4906      	ldr	r1, [pc, #24]	@ (8000a04 <__NVIC_EnableIRQ+0x34>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	@ (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	@ (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	@ 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff90 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff2d 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff42 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff90 	bl	8000a5c <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5f 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff35 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa2 	bl	8000ac0 <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b08b      	sub	sp, #44	@ 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	e169      	b.n	8000e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 8158 	bne.w	8000e6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a9a      	ldr	r2, [pc, #616]	@ (8000e28 <HAL_GPIO_Init+0x2a0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d05e      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bc4:	4a98      	ldr	r2, [pc, #608]	@ (8000e28 <HAL_GPIO_Init+0x2a0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d875      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bca:	4a98      	ldr	r2, [pc, #608]	@ (8000e2c <HAL_GPIO_Init+0x2a4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d058      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bd0:	4a96      	ldr	r2, [pc, #600]	@ (8000e2c <HAL_GPIO_Init+0x2a4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d86f      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bd6:	4a96      	ldr	r2, [pc, #600]	@ (8000e30 <HAL_GPIO_Init+0x2a8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d052      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bdc:	4a94      	ldr	r2, [pc, #592]	@ (8000e30 <HAL_GPIO_Init+0x2a8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d869      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000be2:	4a94      	ldr	r2, [pc, #592]	@ (8000e34 <HAL_GPIO_Init+0x2ac>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d04c      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000be8:	4a92      	ldr	r2, [pc, #584]	@ (8000e34 <HAL_GPIO_Init+0x2ac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d863      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bee:	4a92      	ldr	r2, [pc, #584]	@ (8000e38 <HAL_GPIO_Init+0x2b0>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d046      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
 8000bf4:	4a90      	ldr	r2, [pc, #576]	@ (8000e38 <HAL_GPIO_Init+0x2b0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d85d      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d82a      	bhi.n	8000c54 <HAL_GPIO_Init+0xcc>
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d859      	bhi.n	8000cb6 <HAL_GPIO_Init+0x12e>
 8000c02:	a201      	add	r2, pc, #4	@ (adr r2, 8000c08 <HAL_GPIO_Init+0x80>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c5d 	.word	0x08000c5d
 8000c10:	08000c6f 	.word	0x08000c6f
 8000c14:	08000cb1 	.word	0x08000cb1
 8000c18:	08000cb7 	.word	0x08000cb7
 8000c1c:	08000cb7 	.word	0x08000cb7
 8000c20:	08000cb7 	.word	0x08000cb7
 8000c24:	08000cb7 	.word	0x08000cb7
 8000c28:	08000cb7 	.word	0x08000cb7
 8000c2c:	08000cb7 	.word	0x08000cb7
 8000c30:	08000cb7 	.word	0x08000cb7
 8000c34:	08000cb7 	.word	0x08000cb7
 8000c38:	08000cb7 	.word	0x08000cb7
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000cb7 	.word	0x08000cb7
 8000c44:	08000cb7 	.word	0x08000cb7
 8000c48:	08000cb7 	.word	0x08000cb7
 8000c4c:	08000c65 	.word	0x08000c65
 8000c50:	08000c79 	.word	0x08000c79
 8000c54:	4a79      	ldr	r2, [pc, #484]	@ (8000e3c <HAL_GPIO_Init+0x2b4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c5a:	e02c      	b.n	8000cb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e029      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e024      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	3308      	adds	r3, #8
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e01f      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e01a      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e013      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d105      	bne.n	8000ca4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	611a      	str	r2, [r3, #16]
          break;
 8000ca2:	e009      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	615a      	str	r2, [r3, #20]
          break;
 8000cae:	e003      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x130>
          break;
 8000cb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2bff      	cmp	r3, #255	@ 0xff
 8000cbc:	d801      	bhi.n	8000cc2 <HAL_GPIO_Init+0x13a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	e001      	b.n	8000cc6 <HAL_GPIO_Init+0x13e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2bff      	cmp	r3, #255	@ 0xff
 8000ccc:	d802      	bhi.n	8000cd4 <HAL_GPIO_Init+0x14c>
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x152>
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	3b08      	subs	r3, #8
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	401a      	ands	r2, r3
 8000cec:	6a39      	ldr	r1, [r7, #32]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d08:	4b4d      	ldr	r3, [pc, #308]	@ (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b4a      	ldr	r3, [pc, #296]	@ (8000e40 <HAL_GPIO_Init+0x2b8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d20:	4a48      	ldr	r2, [pc, #288]	@ (8000e44 <HAL_GPIO_Init+0x2bc>)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a40      	ldr	r2, [pc, #256]	@ (8000e48 <HAL_GPIO_Init+0x2c0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1ec>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1e8>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3e      	ldr	r2, [pc, #248]	@ (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1e4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1e0>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e004      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_GPIO_Init+0x1ee>
 8000d74:	2300      	movs	r3, #0
 8000d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d86:	492f      	ldr	r1, [pc, #188]	@ (8000e44 <HAL_GPIO_Init+0x2bc>)
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	492c      	ldr	r1, [pc, #176]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	608b      	str	r3, [r1, #8]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4928      	ldr	r1, [pc, #160]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc8:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	4922      	ldr	r1, [pc, #136]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60cb      	str	r3, [r1, #12]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd6:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	491e      	ldr	r1, [pc, #120]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d006      	beq.n	8000dfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4918      	ldr	r1, [pc, #96]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4914      	ldr	r1, [pc, #80]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d021      	beq.n	8000e5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]
 8000e24:	e021      	b.n	8000e6a <HAL_GPIO_Init+0x2e2>
 8000e26:	bf00      	nop
 8000e28:	10320000 	.word	0x10320000
 8000e2c:	10310000 	.word	0x10310000
 8000e30:	10220000 	.word	0x10220000
 8000e34:	10210000 	.word	0x10210000
 8000e38:	10120000 	.word	0x10120000
 8000e3c:	10110000 	.word	0x10110000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40011400 	.word	0x40011400
 8000e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4909      	ldr	r1, [pc, #36]	@ (8000e8c <HAL_GPIO_Init+0x304>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e76:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f47f ae8e 	bne.w	8000b9c <HAL_GPIO_Init+0x14>
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	372c      	adds	r7, #44	@ 0x2c
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	611a      	str	r2, [r3, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f806 	bl	8000ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e12b      	b.n	800116e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fb1a 	bl	8000564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2224      	movs	r2, #36	@ 0x24
 8000f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f68:	f001 fbca 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a81      	ldr	r2, [pc, #516]	@ (8001178 <HAL_I2C_Init+0x274>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d807      	bhi.n	8000f88 <HAL_I2C_Init+0x84>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4a80      	ldr	r2, [pc, #512]	@ (800117c <HAL_I2C_Init+0x278>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	bf94      	ite	ls
 8000f80:	2301      	movls	r3, #1
 8000f82:	2300      	movhi	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e006      	b.n	8000f96 <HAL_I2C_Init+0x92>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8001180 <HAL_I2C_Init+0x27c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	bf94      	ite	ls
 8000f90:	2301      	movls	r3, #1
 8000f92:	2300      	movhi	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0e7      	b.n	800116e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4a78      	ldr	r2, [pc, #480]	@ (8001184 <HAL_I2C_Init+0x280>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9b      	lsrs	r3, r3, #18
 8000fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8001178 <HAL_I2C_Init+0x274>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d802      	bhi.n	8000fd8 <HAL_I2C_Init+0xd4>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	e009      	b.n	8000fec <HAL_I2C_Init+0xe8>
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a69      	ldr	r2, [pc, #420]	@ (8001188 <HAL_I2C_Init+0x284>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	099b      	lsrs	r3, r3, #6
 8000fea:	3301      	adds	r3, #1
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	495c      	ldr	r1, [pc, #368]	@ (8001178 <HAL_I2C_Init+0x274>)
 8001008:	428b      	cmp	r3, r1
 800100a:	d819      	bhi.n	8001040 <HAL_I2C_Init+0x13c>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e59      	subs	r1, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fbb1 f3f3 	udiv	r3, r1, r3
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001020:	400b      	ands	r3, r1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00a      	beq.n	800103c <HAL_I2C_Init+0x138>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1e59      	subs	r1, r3, #1
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	3301      	adds	r3, #1
 8001036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103a:	e051      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 800103c:	2304      	movs	r3, #4
 800103e:	e04f      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d111      	bne.n	800106c <HAL_I2C_Init+0x168>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1e58      	subs	r0, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	440b      	add	r3, r1
 8001056:	fbb0 f3f3 	udiv	r3, r0, r3
 800105a:	3301      	adds	r3, #1
 800105c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e012      	b.n	8001092 <HAL_I2C_Init+0x18e>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1e58      	subs	r0, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	0099      	lsls	r1, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001082:	3301      	adds	r3, #1
 8001084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Init+0x196>
 8001096:	2301      	movs	r3, #1
 8001098:	e022      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10e      	bne.n	80010c0 <HAL_I2C_Init+0x1bc>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1e58      	subs	r0, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6859      	ldr	r1, [r3, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010be:	e00f      	b.n	80010e0 <HAL_I2C_Init+0x1dc>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1e58      	subs	r0, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	0099      	lsls	r1, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	6809      	ldr	r1, [r1, #0]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800110e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6911      	ldr	r1, [r2, #16]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68d2      	ldr	r2, [r2, #12]
 800111a:	4311      	orrs	r1, r2
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	430b      	orrs	r3, r1
 8001122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	000186a0 	.word	0x000186a0
 800117c:	001e847f 	.word	0x001e847f
 8001180:	003d08ff 	.word	0x003d08ff
 8001184:	431bde83 	.word	0x431bde83
 8001188:	10624dd3 	.word	0x10624dd3

0800118c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	461a      	mov	r2, r3
 8001198:	460b      	mov	r3, r1
 800119a:	817b      	strh	r3, [r7, #10]
 800119c:	4613      	mov	r3, r2
 800119e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff fbb6 	bl	8000910 <HAL_GetTick>
 80011a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	f040 80e0 	bne.w	8001374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2319      	movs	r3, #25
 80011ba:	2201      	movs	r2, #1
 80011bc:	4970      	ldr	r1, [pc, #448]	@ (8001380 <HAL_I2C_Master_Transmit+0x1f4>)
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 fc9e 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
 80011cc:	e0d3      	b.n	8001376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_I2C_Master_Transmit+0x50>
 80011d8:	2302      	movs	r3, #2
 80011da:	e0cc      	b.n	8001376 <HAL_I2C_Master_Transmit+0x1ea>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d007      	beq.n	8001202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2221      	movs	r2, #33	@ 0x21
 8001216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2210      	movs	r2, #16
 800121e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	893a      	ldrh	r2, [r7, #8]
 8001232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4a50      	ldr	r2, [pc, #320]	@ (8001384 <HAL_I2C_Master_Transmit+0x1f8>)
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001244:	8979      	ldrh	r1, [r7, #10]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fb08 	bl	8001860 <I2C_MasterRequestWrite>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e08d      	b.n	8001376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001270:	e066      	b.n	8001340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	6a39      	ldr	r1, [r7, #32]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 fd5c 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00d      	beq.n	800129e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	2b04      	cmp	r3, #4
 8001288:	d107      	bne.n	800129a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06b      	b.n	8001376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29a      	uxth	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d11b      	bne.n	8001314 <HAL_I2C_Master_Transmit+0x188>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d017      	beq.n	8001314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800130c:	3b01      	subs	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	6a39      	ldr	r1, [r7, #32]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 fd53 	bl	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00d      	beq.n	8001340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	2b04      	cmp	r3, #4
 800132a:	d107      	bne.n	800133c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800133a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e01a      	b.n	8001376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001344:	2b00      	cmp	r3, #0
 8001346:	d194      	bne.n	8001272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2220      	movs	r2, #32
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	e000      	b.n	8001376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001374:	2302      	movs	r3, #2
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	00100002 	.word	0x00100002
 8001384:	ffff0000 	.word	0xffff0000

08001388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	461a      	mov	r2, r3
 8001394:	460b      	mov	r3, r1
 8001396:	817b      	strh	r3, [r7, #10]
 8001398:	4613      	mov	r3, r2
 800139a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fab6 	bl	8000910 <HAL_GetTick>
 80013a4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	f040 824b 	bne.w	800184a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2319      	movs	r3, #25
 80013ba:	2201      	movs	r2, #1
 80013bc:	497f      	ldr	r1, [pc, #508]	@ (80015bc <HAL_I2C_Master_Receive+0x234>)
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fb9e 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
 80013cc:	e23e      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_I2C_Master_Receive+0x54>
 80013d8:	2302      	movs	r3, #2
 80013da:	e237      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d007      	beq.n	8001402 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2222      	movs	r2, #34	@ 0x22
 8001416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2210      	movs	r2, #16
 800141e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	893a      	ldrh	r2, [r7, #8]
 8001432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a5f      	ldr	r2, [pc, #380]	@ (80015c0 <HAL_I2C_Master_Receive+0x238>)
 8001442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001444:	8979      	ldrh	r1, [r7, #10]
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fa8a 	bl	8001964 <I2C_MasterRequestRead>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e1f8      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145e:	2b00      	cmp	r3, #0
 8001460:	d113      	bne.n	800148a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e1cc      	b.n	8001824 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148e:	2b01      	cmp	r3, #1
 8001490:	d11e      	bne.n	80014d0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014a2:	b672      	cpsid	i
}
 80014a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014cc:	b662      	cpsie	i
}
 80014ce:	e035      	b.n	800153c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d11e      	bne.n	8001516 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001510:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001512:	b662      	cpsie	i
}
 8001514:	e012      	b.n	800153c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800153c:	e172      	b.n	8001824 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001542:	2b03      	cmp	r3, #3
 8001544:	f200 811f 	bhi.w	8001786 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154c:	2b01      	cmp	r3, #1
 800154e:	d123      	bne.n	8001598 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001552:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fc7d 	bl	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e173      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001580:	3b01      	subs	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158c:	b29b      	uxth	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001596:	e145      	b.n	8001824 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800159c:	2b02      	cmp	r3, #2
 800159e:	d152      	bne.n	8001646 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a6:	2200      	movs	r2, #0
 80015a8:	4906      	ldr	r1, [pc, #24]	@ (80015c4 <HAL_I2C_Master_Receive+0x23c>)
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 faa8 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e148      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
 80015ba:	bf00      	nop
 80015bc:	00100002 	.word	0x00100002
 80015c0:	ffff0000 	.word	0xffff0000
 80015c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800160e:	b662      	cpsie	i
}
 8001610:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162e:	3b01      	subs	r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001644:	e0ee      	b.n	8001824 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164c:	2200      	movs	r2, #0
 800164e:	4981      	ldr	r1, [pc, #516]	@ (8001854 <HAL_I2C_Master_Receive+0x4cc>)
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fa55 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0f5      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800166e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80016a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001858 <HAL_I2C_Master_Receive+0x4d0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <HAL_I2C_Master_Receive+0x4d4>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0a1a      	lsrs	r2, r3, #8
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d118      	bne.n	80016fe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80016ee:	b662      	cpsie	i
}
 80016f0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0a6      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b04      	cmp	r3, #4
 800170a:	d1d9      	bne.n	80016c0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800171a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800174e:	b662      	cpsie	i
}
 8001750:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001784:	e04e      	b.n	8001824 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001788:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fb62 	bl	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e058      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d124      	bne.n	8001824 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180e:	3b01      	subs	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	f47f ae88 	bne.w	800153e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2220      	movs	r2, #32
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800184a:	2302      	movs	r3, #2
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	00010004 	.word	0x00010004
 8001858:	20000008 	.word	0x20000008
 800185c:	14f8b589 	.word	0x14f8b589

08001860 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	460b      	mov	r3, r1
 800186e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d006      	beq.n	800188a <I2C_MasterRequestWrite+0x2a>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d003      	beq.n	800188a <I2C_MasterRequestWrite+0x2a>
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001888:	d108      	bne.n	800189c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e00b      	b.n	80018b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	2b12      	cmp	r3, #18
 80018a2:	d107      	bne.n	80018b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f91d 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018da:	d103      	bne.n	80018e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e035      	b.n	8001954 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018f0:	d108      	bne.n	8001904 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018f2:	897b      	ldrh	r3, [r7, #10]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	e01b      	b.n	800193c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001904:	897b      	ldrh	r3, [r7, #10]
 8001906:	11db      	asrs	r3, r3, #7
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 0306 	and.w	r3, r3, #6
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f063 030f 	orn	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	490e      	ldr	r1, [pc, #56]	@ (800195c <I2C_MasterRequestWrite+0xfc>)
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f966 	bl	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e010      	b.n	8001954 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <I2C_MasterRequestWrite+0x100>)
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f956 	bl	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	00010008 	.word	0x00010008
 8001960:	00010002 	.word	0x00010002

08001964 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	460b      	mov	r3, r1
 8001972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001988:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d006      	beq.n	800199e <I2C_MasterRequestRead+0x3a>
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d003      	beq.n	800199e <I2C_MasterRequestRead+0x3a>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800199c:	d108      	bne.n	80019b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e00b      	b.n	80019c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	2b11      	cmp	r3, #17
 80019b6:	d107      	bne.n	80019c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f893 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019ee:	d103      	bne.n	80019f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e079      	b.n	8001af0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a04:	d108      	bne.n	8001a18 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	e05f      	b.n	8001ad8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a18:	897b      	ldrh	r3, [r7, #10]
 8001a1a:	11db      	asrs	r3, r3, #7
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 0306 	and.w	r3, r3, #6
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f063 030f 	orn	r3, r3, #15
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4930      	ldr	r1, [pc, #192]	@ (8001af8 <I2C_MasterRequestRead+0x194>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f8dc 	bl	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e054      	b.n	8001af0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4929      	ldr	r1, [pc, #164]	@ (8001afc <I2C_MasterRequestRead+0x198>)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f8cc 	bl	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e044      	b.n	8001af0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f831 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00d      	beq.n	8001ac0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab2:	d103      	bne.n	8001abc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e017      	b.n	8001af0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ac0:	897b      	ldrh	r3, [r7, #10]
 8001ac2:	11db      	asrs	r3, r3, #7
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 0306 	and.w	r3, r3, #6
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f063 030e 	orn	r3, r3, #14
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <I2C_MasterRequestRead+0x198>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f888 	bl	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	00010008 	.word	0x00010008
 8001afc:	00010002 	.word	0x00010002

08001b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b10:	e048      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d044      	beq.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7fe fef9 	bl	8000910 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d139      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10d      	bne.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	43da      	mvns	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	e00c      	b.n	8001b70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4013      	ands	r3, r2
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d116      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e023      	b.n	8001bec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	0c1b      	lsrs	r3, r3, #16
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10d      	bne.n	8001bca <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	e00c      	b.n	8001be4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d093      	beq.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c02:	e071      	b.n	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d123      	bne.n	8001c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	f043 0204 	orr.w	r2, r3, #4
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e067      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c62:	d041      	beq.n	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c64:	f7fe fe54 	bl	8000910 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d302      	bcc.n	8001c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d136      	bne.n	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d10c      	bne.n	8001c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	e00b      	b.n	8001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e021      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10c      	bne.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e00b      	b.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f47f af6d 	bne.w	8001c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d40:	e034      	b.n	8001dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8e3 	bl	8001f0e <I2C_IsAcknowledgeFailed>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e034      	b.n	8001dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d028      	beq.n	8001dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7fe fdd9 	bl	8000910 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11d      	bne.n	8001dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7a:	2b80      	cmp	r3, #128	@ 0x80
 8001d7c:	d016      	beq.n	8001dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e007      	b.n	8001dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db6:	2b80      	cmp	r3, #128	@ 0x80
 8001db8:	d1c3      	bne.n	8001d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd0:	e034      	b.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f89b 	bl	8001f0e <I2C_IsAcknowledgeFailed>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e034      	b.n	8001e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d028      	beq.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dea:	f7fe fd91 	bl	8000910 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d11d      	bne.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d016      	beq.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e007      	b.n	8001e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d1c3      	bne.n	8001dd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e60:	e049      	b.n	8001ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d119      	bne.n	8001ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0210 	mvn.w	r2, #16
 8001e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e030      	b.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7fe fd34 	bl	8000910 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d11d      	bne.n	8001ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec4:	2b40      	cmp	r3, #64	@ 0x40
 8001ec6:	d016      	beq.n	8001ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f043 0220 	orr.w	r2, r3, #32
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e007      	b.n	8001f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f00:	2b40      	cmp	r3, #64	@ 0x40
 8001f02:	d1ae      	bne.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f24:	d11b      	bne.n	8001f5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f043 0204 	orr.w	r2, r3, #4
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e272      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e24c      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fc62 	bl	8000910 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe fc5e 	bl	8000910 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e200      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fc4e 	bl	8000910 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe fc4a 	bl	8000910 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	@ 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1ec      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1c0      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe fc03 	bl	8000910 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7fe fbff 	bl	8000910 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1a1      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fbe2 	bl	8000910 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7fe fbde 	bl	8000910 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e180      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7fe fbc2 	bl	8000910 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe fbbe 	bl	8000910 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e160      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 face 	bl	8002750 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fba8 	bl	8000910 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7fe fba4 	bl	8000910 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e146      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b92      	ldr	r3, [pc, #584]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b8b      	ldr	r3, [pc, #556]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b88      	ldr	r3, [pc, #544]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a87      	ldr	r2, [pc, #540]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b85      	ldr	r3, [pc, #532]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b82      	ldr	r3, [pc, #520]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b7f      	ldr	r3, [pc, #508]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7e      	ldr	r2, [pc, #504]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7fe fb65 	bl	8000910 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7fe fb61 	bl	8000910 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	@ 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e103      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b75      	ldr	r3, [pc, #468]	@ (8002434 <HAL_RCC_OscConfig+0x4c8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b6f      	ldr	r3, [pc, #444]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a6e      	ldr	r2, [pc, #440]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b6a      	ldr	r3, [pc, #424]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a69      	ldr	r2, [pc, #420]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b67      	ldr	r3, [pc, #412]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a66      	ldr	r2, [pc, #408]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b61      	ldr	r3, [pc, #388]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a60      	ldr	r2, [pc, #384]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b58      	ldr	r3, [pc, #352]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a57      	ldr	r2, [pc, #348]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fb15 	bl	8000910 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fb11 	bl	8000910 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0b1      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b4b      	ldr	r3, [pc, #300]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe faff 	bl	8000910 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fafb 	bl	8000910 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e09b      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b40      	ldr	r3, [pc, #256]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a3b      	ldr	r2, [pc, #236]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b36      	ldr	r3, [pc, #216]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe facf 	bl	8000910 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe facb 	bl	8000910 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e06d      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4921      	ldr	r1, [pc, #132]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	491b      	ldr	r1, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fa9f 	bl	8000910 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fa9b 	bl	8000910 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e03d      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e035      	b.n	8002462 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fa88 	bl	8000910 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7fe fa84 	bl	8000910 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e026      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e01e      	b.n	8002462 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e019      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
 8002438:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_RCC_OscConfig+0x500>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d0      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b6a      	ldr	r3, [pc, #424]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b67      	ldr	r3, [pc, #412]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4965      	ldr	r1, [pc, #404]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a58      	ldr	r2, [pc, #352]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a52      	ldr	r2, [pc, #328]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d040      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e073      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4936      	ldr	r1, [pc, #216]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe f9d6 	bl	8000910 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe f9d2 	bl	8000910 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e053      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2d      	ldr	r3, [pc, #180]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d210      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4922      	ldr	r1, [pc, #136]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	@ (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1cc>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe f934 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
 8002638:	08003c30 	.word	0x08003c30
 800263c:	20000008 	.word	0x20000008
 8002640:	2000000c 	.word	0x2000000c

08002644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b04      	cmp	r3, #4
 800266c:	d002      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x30>
 800266e:	2b08      	cmp	r3, #8
 8002670:	d003      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x36>
 8002672:	e027      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	613b      	str	r3, [r7, #16]
      break;
 8002678:	e027      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0c9b      	lsrs	r3, r3, #18
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d010      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0c5b      	lsrs	r3, r3, #17
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x98>)
 80026a6:	fb03 f202 	mul.w	r2, r3, r2
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e004      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	613b      	str	r3, [r7, #16]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x98>)
 80026c6:	613b      	str	r3, [r7, #16]
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	693b      	ldr	r3, [r7, #16]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	007a1200 	.word	0x007a1200
 80026e0:	08003c48 	.word	0x08003c48
 80026e4:	08003c58 	.word	0x08003c58
 80026e8:	003d0900 	.word	0x003d0900

080026ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b02      	ldr	r3, [pc, #8]	@ (80026fc <HAL_RCC_GetHCLKFreq+0x10>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff2 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	08003c40 	.word	0x08003c40

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800272c:	f7ff ffde 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	0adb      	lsrs	r3, r3, #11
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4903      	ldr	r1, [pc, #12]	@ (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	08003c40 	.word	0x08003c40

08002750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002758:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <RCC_Delay+0x34>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <RCC_Delay+0x38>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0a5b      	lsrs	r3, r3, #9
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800276c:	bf00      	nop
  }
  while (Delay --);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	60fa      	str	r2, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f9      	bne.n	800276c <RCC_Delay+0x1c>
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	20000008 	.word	0x20000008
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e042      	b.n	8002824 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fd ff16 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	@ 0x24
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f971 	bl	8002ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b20      	cmp	r3, #32
 800284a:	d175      	bne.n	8002938 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Transmit+0x2c>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e06e      	b.n	800293a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2221      	movs	r2, #33	@ 0x21
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286a:	f7fe f851 	bl	8000910 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002884:	d108      	bne.n	8002898 <HAL_UART_Transmit+0x6c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e003      	b.n	80028a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a0:	e02e      	b.n	8002900 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	@ 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f848 	bl	8002942 <UART_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e03a      	b.n	800293a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10b      	bne.n	80028e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3302      	adds	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e007      	b.n	80028f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1cb      	bne.n	80028a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	2140      	movs	r1, #64	@ 0x40
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f814 	bl	8002942 <UART_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e006      	b.n	800293a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002952:	e03b      	b.n	80029cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d037      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295c:	f7fd ffd8 	bl	8000910 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	6a3a      	ldr	r2, [r7, #32]
 8002968:	429a      	cmp	r2, r3
 800296a:	d302      	bcc.n	8002972 <UART_WaitOnFlagUntilTimeout+0x30>
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e03a      	b.n	80029ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d020      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d01d      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d116      	bne.n	80029cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f81d 	bl	80029f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2208      	movs	r2, #8
 80029be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e00f      	b.n	80029ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d0b4      	beq.n	8002954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b095      	sub	sp, #84	@ 0x54
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a06:	e853 3f00 	ldrex	r3, [r3]
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a24:	e841 2300 	strex	r3, r2, [r1]
 8002a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e5      	bne.n	80029fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3314      	adds	r3, #20
 8002a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	e853 3f00 	ldrex	r3, [r3]
 8002a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a58:	e841 2300 	strex	r3, r2, [r1]
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e5      	bne.n	8002a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d119      	bne.n	8002aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 0310 	bic.w	r3, r3, #16
 8002a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a8c:	61ba      	str	r2, [r7, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6979      	ldr	r1, [r7, #20]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aae:	bf00      	nop
 8002ab0:	3754      	adds	r7, #84	@ 0x54
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002af2:	f023 030c 	bic.w	r3, r3, #12
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002bcc <UART_SetConfig+0x114>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d103      	bne.n	8002b28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff fe02 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7ff fdea 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8002b2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a22      	ldr	r2, [pc, #136]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	0119      	lsls	r1, r3, #4
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009a      	lsls	r2, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b66:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2064      	movs	r0, #100	@ 0x64
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	@ 0x32
 8002b78:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b84:	4419      	add	r1, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2064      	movs	r0, #100	@ 0x64
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	@ 0x32
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	51eb851f 	.word	0x51eb851f

08002bd4 <std>:
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	e9c0 3300 	strd	r3, r3, [r0]
 8002bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002be2:	6083      	str	r3, [r0, #8]
 8002be4:	8181      	strh	r1, [r0, #12]
 8002be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002be8:	81c2      	strh	r2, [r0, #14]
 8002bea:	6183      	str	r3, [r0, #24]
 8002bec:	4619      	mov	r1, r3
 8002bee:	2208      	movs	r2, #8
 8002bf0:	305c      	adds	r0, #92	@ 0x5c
 8002bf2:	f000 fa01 	bl	8002ff8 <memset>
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <std+0x58>)
 8002bf8:	6224      	str	r4, [r4, #32]
 8002bfa:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <std+0x5c>)
 8002bfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <std+0x60>)
 8002c02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <std+0x64>)
 8002c06:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <std+0x68>)
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	d006      	beq.n	8002c1c <std+0x48>
 8002c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c12:	4294      	cmp	r4, r2
 8002c14:	d002      	beq.n	8002c1c <std+0x48>
 8002c16:	33d0      	adds	r3, #208	@ 0xd0
 8002c18:	429c      	cmp	r4, r3
 8002c1a:	d105      	bne.n	8002c28 <std+0x54>
 8002c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c24:	f000 ba60 	b.w	80030e8 <__retarget_lock_init_recursive>
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08002e49 	.word	0x08002e49
 8002c30:	08002e6b 	.word	0x08002e6b
 8002c34:	08002ea3 	.word	0x08002ea3
 8002c38:	08002ec7 	.word	0x08002ec7
 8002c3c:	20000154 	.word	0x20000154

08002c40 <stdio_exit_handler>:
 8002c40:	4a02      	ldr	r2, [pc, #8]	@ (8002c4c <stdio_exit_handler+0xc>)
 8002c42:	4903      	ldr	r1, [pc, #12]	@ (8002c50 <stdio_exit_handler+0x10>)
 8002c44:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <stdio_exit_handler+0x14>)
 8002c46:	f000 b869 	b.w	8002d1c <_fwalk_sglue>
 8002c4a:	bf00      	nop
 8002c4c:	20000014 	.word	0x20000014
 8002c50:	08003981 	.word	0x08003981
 8002c54:	20000024 	.word	0x20000024

08002c58 <cleanup_stdio>:
 8002c58:	6841      	ldr	r1, [r0, #4]
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <cleanup_stdio+0x34>)
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	4299      	cmp	r1, r3
 8002c60:	4604      	mov	r4, r0
 8002c62:	d001      	beq.n	8002c68 <cleanup_stdio+0x10>
 8002c64:	f000 fe8c 	bl	8003980 <_fflush_r>
 8002c68:	68a1      	ldr	r1, [r4, #8]
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <cleanup_stdio+0x38>)
 8002c6c:	4299      	cmp	r1, r3
 8002c6e:	d002      	beq.n	8002c76 <cleanup_stdio+0x1e>
 8002c70:	4620      	mov	r0, r4
 8002c72:	f000 fe85 	bl	8003980 <_fflush_r>
 8002c76:	68e1      	ldr	r1, [r4, #12]
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <cleanup_stdio+0x3c>)
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	d004      	beq.n	8002c88 <cleanup_stdio+0x30>
 8002c7e:	4620      	mov	r0, r4
 8002c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c84:	f000 be7c 	b.w	8003980 <_fflush_r>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000154 	.word	0x20000154
 8002c90:	200001bc 	.word	0x200001bc
 8002c94:	20000224 	.word	0x20000224

08002c98 <global_stdio_init.part.0>:
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <global_stdio_init.part.0+0x30>)
 8002c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8002ccc <global_stdio_init.part.0+0x34>)
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd0 <global_stdio_init.part.0+0x38>)
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	2104      	movs	r1, #4
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f7ff ff94 	bl	8002bd4 <std>
 8002cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2109      	movs	r1, #9
 8002cb4:	f7ff ff8e 	bl	8002bd4 <std>
 8002cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc2:	2112      	movs	r1, #18
 8002cc4:	f7ff bf86 	b.w	8002bd4 <std>
 8002cc8:	2000028c 	.word	0x2000028c
 8002ccc:	20000154 	.word	0x20000154
 8002cd0:	08002c41 	.word	0x08002c41

08002cd4 <__sfp_lock_acquire>:
 8002cd4:	4801      	ldr	r0, [pc, #4]	@ (8002cdc <__sfp_lock_acquire+0x8>)
 8002cd6:	f000 ba08 	b.w	80030ea <__retarget_lock_acquire_recursive>
 8002cda:	bf00      	nop
 8002cdc:	20000295 	.word	0x20000295

08002ce0 <__sfp_lock_release>:
 8002ce0:	4801      	ldr	r0, [pc, #4]	@ (8002ce8 <__sfp_lock_release+0x8>)
 8002ce2:	f000 ba03 	b.w	80030ec <__retarget_lock_release_recursive>
 8002ce6:	bf00      	nop
 8002ce8:	20000295 	.word	0x20000295

08002cec <__sinit>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
 8002cf0:	f7ff fff0 	bl	8002cd4 <__sfp_lock_acquire>
 8002cf4:	6a23      	ldr	r3, [r4, #32]
 8002cf6:	b11b      	cbz	r3, 8002d00 <__sinit+0x14>
 8002cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cfc:	f7ff bff0 	b.w	8002ce0 <__sfp_lock_release>
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__sinit+0x28>)
 8002d02:	6223      	str	r3, [r4, #32]
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <__sinit+0x2c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f5      	bne.n	8002cf8 <__sinit+0xc>
 8002d0c:	f7ff ffc4 	bl	8002c98 <global_stdio_init.part.0>
 8002d10:	e7f2      	b.n	8002cf8 <__sinit+0xc>
 8002d12:	bf00      	nop
 8002d14:	08002c59 	.word	0x08002c59
 8002d18:	2000028c 	.word	0x2000028c

08002d1c <_fwalk_sglue>:
 8002d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d20:	4607      	mov	r7, r0
 8002d22:	4688      	mov	r8, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	2600      	movs	r6, #0
 8002d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8002d30:	d505      	bpl.n	8002d3e <_fwalk_sglue+0x22>
 8002d32:	6824      	ldr	r4, [r4, #0]
 8002d34:	2c00      	cmp	r4, #0
 8002d36:	d1f7      	bne.n	8002d28 <_fwalk_sglue+0xc>
 8002d38:	4630      	mov	r0, r6
 8002d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d3e:	89ab      	ldrh	r3, [r5, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d907      	bls.n	8002d54 <_fwalk_sglue+0x38>
 8002d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	d003      	beq.n	8002d54 <_fwalk_sglue+0x38>
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4638      	mov	r0, r7
 8002d50:	47c0      	blx	r8
 8002d52:	4306      	orrs	r6, r0
 8002d54:	3568      	adds	r5, #104	@ 0x68
 8002d56:	e7e9      	b.n	8002d2c <_fwalk_sglue+0x10>

08002d58 <iprintf>:
 8002d58:	b40f      	push	{r0, r1, r2, r3}
 8002d5a:	b507      	push	{r0, r1, r2, lr}
 8002d5c:	4906      	ldr	r1, [pc, #24]	@ (8002d78 <iprintf+0x20>)
 8002d5e:	ab04      	add	r3, sp, #16
 8002d60:	6808      	ldr	r0, [r1, #0]
 8002d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d66:	6881      	ldr	r1, [r0, #8]
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	f000 fadf 	bl	800332c <_vfiprintf_r>
 8002d6e:	b003      	add	sp, #12
 8002d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d74:	b004      	add	sp, #16
 8002d76:	4770      	bx	lr
 8002d78:	20000020 	.word	0x20000020

08002d7c <putchar>:
 8002d7c:	4b02      	ldr	r3, [pc, #8]	@ (8002d88 <putchar+0xc>)
 8002d7e:	4601      	mov	r1, r0
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	6882      	ldr	r2, [r0, #8]
 8002d84:	f000 be85 	b.w	8003a92 <_putc_r>
 8002d88:	20000020 	.word	0x20000020

08002d8c <_puts_r>:
 8002d8c:	6a03      	ldr	r3, [r0, #32]
 8002d8e:	b570      	push	{r4, r5, r6, lr}
 8002d90:	4605      	mov	r5, r0
 8002d92:	460e      	mov	r6, r1
 8002d94:	6884      	ldr	r4, [r0, #8]
 8002d96:	b90b      	cbnz	r3, 8002d9c <_puts_r+0x10>
 8002d98:	f7ff ffa8 	bl	8002cec <__sinit>
 8002d9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d9e:	07db      	lsls	r3, r3, #31
 8002da0:	d405      	bmi.n	8002dae <_puts_r+0x22>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	0598      	lsls	r0, r3, #22
 8002da6:	d402      	bmi.n	8002dae <_puts_r+0x22>
 8002da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002daa:	f000 f99e 	bl	80030ea <__retarget_lock_acquire_recursive>
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	0719      	lsls	r1, r3, #28
 8002db2:	d502      	bpl.n	8002dba <_puts_r+0x2e>
 8002db4:	6923      	ldr	r3, [r4, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d135      	bne.n	8002e26 <_puts_r+0x9a>
 8002dba:	4621      	mov	r1, r4
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f000 f8c5 	bl	8002f4c <__swsetup_r>
 8002dc2:	b380      	cbz	r0, 8002e26 <_puts_r+0x9a>
 8002dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8002dc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dca:	07da      	lsls	r2, r3, #31
 8002dcc:	d405      	bmi.n	8002dda <_puts_r+0x4e>
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	059b      	lsls	r3, r3, #22
 8002dd2:	d402      	bmi.n	8002dda <_puts_r+0x4e>
 8002dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dd6:	f000 f989 	bl	80030ec <__retarget_lock_release_recursive>
 8002dda:	4628      	mov	r0, r5
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	da04      	bge.n	8002dec <_puts_r+0x60>
 8002de2:	69a2      	ldr	r2, [r4, #24]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dc17      	bgt.n	8002e18 <_puts_r+0x8c>
 8002de8:	290a      	cmp	r1, #10
 8002dea:	d015      	beq.n	8002e18 <_puts_r+0x8c>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	6022      	str	r2, [r4, #0]
 8002df2:	7019      	strb	r1, [r3, #0]
 8002df4:	68a3      	ldr	r3, [r4, #8]
 8002df6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	2900      	cmp	r1, #0
 8002e00:	d1ed      	bne.n	8002dde <_puts_r+0x52>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	da11      	bge.n	8002e2a <_puts_r+0x9e>
 8002e06:	4622      	mov	r2, r4
 8002e08:	210a      	movs	r1, #10
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f000 f85f 	bl	8002ece <__swbuf_r>
 8002e10:	3001      	adds	r0, #1
 8002e12:	d0d7      	beq.n	8002dc4 <_puts_r+0x38>
 8002e14:	250a      	movs	r5, #10
 8002e16:	e7d7      	b.n	8002dc8 <_puts_r+0x3c>
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 f857 	bl	8002ece <__swbuf_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d1e7      	bne.n	8002df4 <_puts_r+0x68>
 8002e24:	e7ce      	b.n	8002dc4 <_puts_r+0x38>
 8002e26:	3e01      	subs	r6, #1
 8002e28:	e7e4      	b.n	8002df4 <_puts_r+0x68>
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	6022      	str	r2, [r4, #0]
 8002e30:	220a      	movs	r2, #10
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e7ee      	b.n	8002e14 <_puts_r+0x88>
	...

08002e38 <puts>:
 8002e38:	4b02      	ldr	r3, [pc, #8]	@ (8002e44 <puts+0xc>)
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	f7ff bfa5 	b.w	8002d8c <_puts_r>
 8002e42:	bf00      	nop
 8002e44:	20000020 	.word	0x20000020

08002e48 <__sread>:
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e50:	f000 f8fc 	bl	800304c <_read_r>
 8002e54:	2800      	cmp	r0, #0
 8002e56:	bfab      	itete	ge
 8002e58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e5c:	181b      	addge	r3, r3, r0
 8002e5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e62:	bfac      	ite	ge
 8002e64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e66:	81a3      	strhlt	r3, [r4, #12]
 8002e68:	bd10      	pop	{r4, pc}

08002e6a <__swrite>:
 8002e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6e:	461f      	mov	r7, r3
 8002e70:	898b      	ldrh	r3, [r1, #12]
 8002e72:	4605      	mov	r5, r0
 8002e74:	05db      	lsls	r3, r3, #23
 8002e76:	460c      	mov	r4, r1
 8002e78:	4616      	mov	r6, r2
 8002e7a:	d505      	bpl.n	8002e88 <__swrite+0x1e>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e84:	f000 f8d0 	bl	8003028 <_lseek_r>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	4632      	mov	r2, r6
 8002e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	4628      	mov	r0, r5
 8002e94:	463b      	mov	r3, r7
 8002e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9e:	f000 b8e7 	b.w	8003070 <_write_r>

08002ea2 <__sseek>:
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eaa:	f000 f8bd 	bl	8003028 <_lseek_r>
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	bf15      	itete	ne
 8002eb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ebe:	81a3      	strheq	r3, [r4, #12]
 8002ec0:	bf18      	it	ne
 8002ec2:	81a3      	strhne	r3, [r4, #12]
 8002ec4:	bd10      	pop	{r4, pc}

08002ec6 <__sclose>:
 8002ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eca:	f000 b89d 	b.w	8003008 <_close_r>

08002ece <__swbuf_r>:
 8002ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed0:	460e      	mov	r6, r1
 8002ed2:	4614      	mov	r4, r2
 8002ed4:	4605      	mov	r5, r0
 8002ed6:	b118      	cbz	r0, 8002ee0 <__swbuf_r+0x12>
 8002ed8:	6a03      	ldr	r3, [r0, #32]
 8002eda:	b90b      	cbnz	r3, 8002ee0 <__swbuf_r+0x12>
 8002edc:	f7ff ff06 	bl	8002cec <__sinit>
 8002ee0:	69a3      	ldr	r3, [r4, #24]
 8002ee2:	60a3      	str	r3, [r4, #8]
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	071a      	lsls	r2, r3, #28
 8002ee8:	d501      	bpl.n	8002eee <__swbuf_r+0x20>
 8002eea:	6923      	ldr	r3, [r4, #16]
 8002eec:	b943      	cbnz	r3, 8002f00 <__swbuf_r+0x32>
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f000 f82b 	bl	8002f4c <__swsetup_r>
 8002ef6:	b118      	cbz	r0, 8002f00 <__swbuf_r+0x32>
 8002ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8002efc:	4638      	mov	r0, r7
 8002efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	6922      	ldr	r2, [r4, #16]
 8002f04:	b2f6      	uxtb	r6, r6
 8002f06:	1a98      	subs	r0, r3, r2
 8002f08:	6963      	ldr	r3, [r4, #20]
 8002f0a:	4637      	mov	r7, r6
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	dc05      	bgt.n	8002f1c <__swbuf_r+0x4e>
 8002f10:	4621      	mov	r1, r4
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 fd34 	bl	8003980 <_fflush_r>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d1ed      	bne.n	8002ef8 <__swbuf_r+0x2a>
 8002f1c:	68a3      	ldr	r3, [r4, #8]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60a3      	str	r3, [r4, #8]
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	6022      	str	r2, [r4, #0]
 8002f28:	701e      	strb	r6, [r3, #0]
 8002f2a:	6962      	ldr	r2, [r4, #20]
 8002f2c:	1c43      	adds	r3, r0, #1
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d004      	beq.n	8002f3c <__swbuf_r+0x6e>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	07db      	lsls	r3, r3, #31
 8002f36:	d5e1      	bpl.n	8002efc <__swbuf_r+0x2e>
 8002f38:	2e0a      	cmp	r6, #10
 8002f3a:	d1df      	bne.n	8002efc <__swbuf_r+0x2e>
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 fd1e 	bl	8003980 <_fflush_r>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d0d9      	beq.n	8002efc <__swbuf_r+0x2e>
 8002f48:	e7d6      	b.n	8002ef8 <__swbuf_r+0x2a>
	...

08002f4c <__swsetup_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <__swsetup_r+0xa8>)
 8002f50:	4605      	mov	r5, r0
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	460c      	mov	r4, r1
 8002f56:	b118      	cbz	r0, 8002f60 <__swsetup_r+0x14>
 8002f58:	6a03      	ldr	r3, [r0, #32]
 8002f5a:	b90b      	cbnz	r3, 8002f60 <__swsetup_r+0x14>
 8002f5c:	f7ff fec6 	bl	8002cec <__sinit>
 8002f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f64:	0719      	lsls	r1, r3, #28
 8002f66:	d422      	bmi.n	8002fae <__swsetup_r+0x62>
 8002f68:	06da      	lsls	r2, r3, #27
 8002f6a:	d407      	bmi.n	8002f7c <__swsetup_r+0x30>
 8002f6c:	2209      	movs	r2, #9
 8002f6e:	602a      	str	r2, [r5, #0]
 8002f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	e033      	b.n	8002fe4 <__swsetup_r+0x98>
 8002f7c:	0758      	lsls	r0, r3, #29
 8002f7e:	d512      	bpl.n	8002fa6 <__swsetup_r+0x5a>
 8002f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f82:	b141      	cbz	r1, 8002f96 <__swsetup_r+0x4a>
 8002f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f88:	4299      	cmp	r1, r3
 8002f8a:	d002      	beq.n	8002f92 <__swsetup_r+0x46>
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f000 f8af 	bl	80030f0 <_free_r>
 8002f92:	2300      	movs	r3, #0
 8002f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6063      	str	r3, [r4, #4]
 8002fa2:	6923      	ldr	r3, [r4, #16]
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	b94b      	cbnz	r3, 8002fc6 <__swsetup_r+0x7a>
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fbc:	d003      	beq.n	8002fc6 <__swsetup_r+0x7a>
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 fd2a 	bl	8003a1a <__smakebuf_r>
 8002fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fca:	f013 0201 	ands.w	r2, r3, #1
 8002fce:	d00a      	beq.n	8002fe6 <__swsetup_r+0x9a>
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60a2      	str	r2, [r4, #8]
 8002fd4:	6962      	ldr	r2, [r4, #20]
 8002fd6:	4252      	negs	r2, r2
 8002fd8:	61a2      	str	r2, [r4, #24]
 8002fda:	6922      	ldr	r2, [r4, #16]
 8002fdc:	b942      	cbnz	r2, 8002ff0 <__swsetup_r+0xa4>
 8002fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fe2:	d1c5      	bne.n	8002f70 <__swsetup_r+0x24>
 8002fe4:	bd38      	pop	{r3, r4, r5, pc}
 8002fe6:	0799      	lsls	r1, r3, #30
 8002fe8:	bf58      	it	pl
 8002fea:	6962      	ldrpl	r2, [r4, #20]
 8002fec:	60a2      	str	r2, [r4, #8]
 8002fee:	e7f4      	b.n	8002fda <__swsetup_r+0x8e>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e7f7      	b.n	8002fe4 <__swsetup_r+0x98>
 8002ff4:	20000020 	.word	0x20000020

08002ff8 <memset>:
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4402      	add	r2, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_close_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	2300      	movs	r3, #0
 800300c:	4d05      	ldr	r5, [pc, #20]	@ (8003024 <_close_r+0x1c>)
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	602b      	str	r3, [r5, #0]
 8003014:	f7fd fb91 	bl	800073a <_close>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_close_r+0x1a>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	b103      	cbz	r3, 8003022 <_close_r+0x1a>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	20000290 	.word	0x20000290

08003028 <_lseek_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4604      	mov	r4, r0
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	2200      	movs	r2, #0
 8003032:	4d05      	ldr	r5, [pc, #20]	@ (8003048 <_lseek_r+0x20>)
 8003034:	602a      	str	r2, [r5, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f7fd fba3 	bl	8000782 <_lseek>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_lseek_r+0x1e>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_lseek_r+0x1e>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	20000290 	.word	0x20000290

0800304c <_read_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	2200      	movs	r2, #0
 8003056:	4d05      	ldr	r5, [pc, #20]	@ (800306c <_read_r+0x20>)
 8003058:	602a      	str	r2, [r5, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f7fd fb34 	bl	80006c8 <_read>
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d102      	bne.n	800306a <_read_r+0x1e>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	b103      	cbz	r3, 800306a <_read_r+0x1e>
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	bd38      	pop	{r3, r4, r5, pc}
 800306c:	20000290 	.word	0x20000290

08003070 <_write_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	2200      	movs	r2, #0
 800307a:	4d05      	ldr	r5, [pc, #20]	@ (8003090 <_write_r+0x20>)
 800307c:	602a      	str	r2, [r5, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	f7fd fb3f 	bl	8000702 <_write>
 8003084:	1c43      	adds	r3, r0, #1
 8003086:	d102      	bne.n	800308e <_write_r+0x1e>
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	b103      	cbz	r3, 800308e <_write_r+0x1e>
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	bd38      	pop	{r3, r4, r5, pc}
 8003090:	20000290 	.word	0x20000290

08003094 <__errno>:
 8003094:	4b01      	ldr	r3, [pc, #4]	@ (800309c <__errno+0x8>)
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000020 	.word	0x20000020

080030a0 <__libc_init_array>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	2600      	movs	r6, #0
 80030a4:	4d0c      	ldr	r5, [pc, #48]	@ (80030d8 <__libc_init_array+0x38>)
 80030a6:	4c0d      	ldr	r4, [pc, #52]	@ (80030dc <__libc_init_array+0x3c>)
 80030a8:	1b64      	subs	r4, r4, r5
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	42a6      	cmp	r6, r4
 80030ae:	d109      	bne.n	80030c4 <__libc_init_array+0x24>
 80030b0:	f000 fd64 	bl	8003b7c <_init>
 80030b4:	2600      	movs	r6, #0
 80030b6:	4d0a      	ldr	r5, [pc, #40]	@ (80030e0 <__libc_init_array+0x40>)
 80030b8:	4c0a      	ldr	r4, [pc, #40]	@ (80030e4 <__libc_init_array+0x44>)
 80030ba:	1b64      	subs	r4, r4, r5
 80030bc:	10a4      	asrs	r4, r4, #2
 80030be:	42a6      	cmp	r6, r4
 80030c0:	d105      	bne.n	80030ce <__libc_init_array+0x2e>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c8:	4798      	blx	r3
 80030ca:	3601      	adds	r6, #1
 80030cc:	e7ee      	b.n	80030ac <__libc_init_array+0xc>
 80030ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d2:	4798      	blx	r3
 80030d4:	3601      	adds	r6, #1
 80030d6:	e7f2      	b.n	80030be <__libc_init_array+0x1e>
 80030d8:	08003c90 	.word	0x08003c90
 80030dc:	08003c90 	.word	0x08003c90
 80030e0:	08003c90 	.word	0x08003c90
 80030e4:	08003c94 	.word	0x08003c94

080030e8 <__retarget_lock_init_recursive>:
 80030e8:	4770      	bx	lr

080030ea <__retarget_lock_acquire_recursive>:
 80030ea:	4770      	bx	lr

080030ec <__retarget_lock_release_recursive>:
 80030ec:	4770      	bx	lr
	...

080030f0 <_free_r>:
 80030f0:	b538      	push	{r3, r4, r5, lr}
 80030f2:	4605      	mov	r5, r0
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d040      	beq.n	800317a <_free_r+0x8a>
 80030f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030fc:	1f0c      	subs	r4, r1, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bfb8      	it	lt
 8003102:	18e4      	addlt	r4, r4, r3
 8003104:	f000 f8de 	bl	80032c4 <__malloc_lock>
 8003108:	4a1c      	ldr	r2, [pc, #112]	@ (800317c <_free_r+0x8c>)
 800310a:	6813      	ldr	r3, [r2, #0]
 800310c:	b933      	cbnz	r3, 800311c <_free_r+0x2c>
 800310e:	6063      	str	r3, [r4, #4]
 8003110:	6014      	str	r4, [r2, #0]
 8003112:	4628      	mov	r0, r5
 8003114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003118:	f000 b8da 	b.w	80032d0 <__malloc_unlock>
 800311c:	42a3      	cmp	r3, r4
 800311e:	d908      	bls.n	8003132 <_free_r+0x42>
 8003120:	6820      	ldr	r0, [r4, #0]
 8003122:	1821      	adds	r1, r4, r0
 8003124:	428b      	cmp	r3, r1
 8003126:	bf01      	itttt	eq
 8003128:	6819      	ldreq	r1, [r3, #0]
 800312a:	685b      	ldreq	r3, [r3, #4]
 800312c:	1809      	addeq	r1, r1, r0
 800312e:	6021      	streq	r1, [r4, #0]
 8003130:	e7ed      	b.n	800310e <_free_r+0x1e>
 8003132:	461a      	mov	r2, r3
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	b10b      	cbz	r3, 800313c <_free_r+0x4c>
 8003138:	42a3      	cmp	r3, r4
 800313a:	d9fa      	bls.n	8003132 <_free_r+0x42>
 800313c:	6811      	ldr	r1, [r2, #0]
 800313e:	1850      	adds	r0, r2, r1
 8003140:	42a0      	cmp	r0, r4
 8003142:	d10b      	bne.n	800315c <_free_r+0x6c>
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	4401      	add	r1, r0
 8003148:	1850      	adds	r0, r2, r1
 800314a:	4283      	cmp	r3, r0
 800314c:	6011      	str	r1, [r2, #0]
 800314e:	d1e0      	bne.n	8003112 <_free_r+0x22>
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4408      	add	r0, r1
 8003156:	6010      	str	r0, [r2, #0]
 8003158:	6053      	str	r3, [r2, #4]
 800315a:	e7da      	b.n	8003112 <_free_r+0x22>
 800315c:	d902      	bls.n	8003164 <_free_r+0x74>
 800315e:	230c      	movs	r3, #12
 8003160:	602b      	str	r3, [r5, #0]
 8003162:	e7d6      	b.n	8003112 <_free_r+0x22>
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	1821      	adds	r1, r4, r0
 8003168:	428b      	cmp	r3, r1
 800316a:	bf01      	itttt	eq
 800316c:	6819      	ldreq	r1, [r3, #0]
 800316e:	685b      	ldreq	r3, [r3, #4]
 8003170:	1809      	addeq	r1, r1, r0
 8003172:	6021      	streq	r1, [r4, #0]
 8003174:	6063      	str	r3, [r4, #4]
 8003176:	6054      	str	r4, [r2, #4]
 8003178:	e7cb      	b.n	8003112 <_free_r+0x22>
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	2000029c 	.word	0x2000029c

08003180 <sbrk_aligned>:
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	4e0f      	ldr	r6, [pc, #60]	@ (80031c0 <sbrk_aligned+0x40>)
 8003184:	460c      	mov	r4, r1
 8003186:	6831      	ldr	r1, [r6, #0]
 8003188:	4605      	mov	r5, r0
 800318a:	b911      	cbnz	r1, 8003192 <sbrk_aligned+0x12>
 800318c:	f000 fcd8 	bl	8003b40 <_sbrk_r>
 8003190:	6030      	str	r0, [r6, #0]
 8003192:	4621      	mov	r1, r4
 8003194:	4628      	mov	r0, r5
 8003196:	f000 fcd3 	bl	8003b40 <_sbrk_r>
 800319a:	1c43      	adds	r3, r0, #1
 800319c:	d103      	bne.n	80031a6 <sbrk_aligned+0x26>
 800319e:	f04f 34ff 	mov.w	r4, #4294967295
 80031a2:	4620      	mov	r0, r4
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
 80031a6:	1cc4      	adds	r4, r0, #3
 80031a8:	f024 0403 	bic.w	r4, r4, #3
 80031ac:	42a0      	cmp	r0, r4
 80031ae:	d0f8      	beq.n	80031a2 <sbrk_aligned+0x22>
 80031b0:	1a21      	subs	r1, r4, r0
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 fcc4 	bl	8003b40 <_sbrk_r>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d1f2      	bne.n	80031a2 <sbrk_aligned+0x22>
 80031bc:	e7ef      	b.n	800319e <sbrk_aligned+0x1e>
 80031be:	bf00      	nop
 80031c0:	20000298 	.word	0x20000298

080031c4 <_malloc_r>:
 80031c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031c8:	1ccd      	adds	r5, r1, #3
 80031ca:	f025 0503 	bic.w	r5, r5, #3
 80031ce:	3508      	adds	r5, #8
 80031d0:	2d0c      	cmp	r5, #12
 80031d2:	bf38      	it	cc
 80031d4:	250c      	movcc	r5, #12
 80031d6:	2d00      	cmp	r5, #0
 80031d8:	4606      	mov	r6, r0
 80031da:	db01      	blt.n	80031e0 <_malloc_r+0x1c>
 80031dc:	42a9      	cmp	r1, r5
 80031de:	d904      	bls.n	80031ea <_malloc_r+0x26>
 80031e0:	230c      	movs	r3, #12
 80031e2:	6033      	str	r3, [r6, #0]
 80031e4:	2000      	movs	r0, #0
 80031e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032c0 <_malloc_r+0xfc>
 80031ee:	f000 f869 	bl	80032c4 <__malloc_lock>
 80031f2:	f8d8 3000 	ldr.w	r3, [r8]
 80031f6:	461c      	mov	r4, r3
 80031f8:	bb44      	cbnz	r4, 800324c <_malloc_r+0x88>
 80031fa:	4629      	mov	r1, r5
 80031fc:	4630      	mov	r0, r6
 80031fe:	f7ff ffbf 	bl	8003180 <sbrk_aligned>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	4604      	mov	r4, r0
 8003206:	d158      	bne.n	80032ba <_malloc_r+0xf6>
 8003208:	f8d8 4000 	ldr.w	r4, [r8]
 800320c:	4627      	mov	r7, r4
 800320e:	2f00      	cmp	r7, #0
 8003210:	d143      	bne.n	800329a <_malloc_r+0xd6>
 8003212:	2c00      	cmp	r4, #0
 8003214:	d04b      	beq.n	80032ae <_malloc_r+0xea>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	4639      	mov	r1, r7
 800321a:	4630      	mov	r0, r6
 800321c:	eb04 0903 	add.w	r9, r4, r3
 8003220:	f000 fc8e 	bl	8003b40 <_sbrk_r>
 8003224:	4581      	cmp	r9, r0
 8003226:	d142      	bne.n	80032ae <_malloc_r+0xea>
 8003228:	6821      	ldr	r1, [r4, #0]
 800322a:	4630      	mov	r0, r6
 800322c:	1a6d      	subs	r5, r5, r1
 800322e:	4629      	mov	r1, r5
 8003230:	f7ff ffa6 	bl	8003180 <sbrk_aligned>
 8003234:	3001      	adds	r0, #1
 8003236:	d03a      	beq.n	80032ae <_malloc_r+0xea>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	442b      	add	r3, r5
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	f8d8 3000 	ldr.w	r3, [r8]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	bb62      	cbnz	r2, 80032a0 <_malloc_r+0xdc>
 8003246:	f8c8 7000 	str.w	r7, [r8]
 800324a:	e00f      	b.n	800326c <_malloc_r+0xa8>
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	1b52      	subs	r2, r2, r5
 8003250:	d420      	bmi.n	8003294 <_malloc_r+0xd0>
 8003252:	2a0b      	cmp	r2, #11
 8003254:	d917      	bls.n	8003286 <_malloc_r+0xc2>
 8003256:	1961      	adds	r1, r4, r5
 8003258:	42a3      	cmp	r3, r4
 800325a:	6025      	str	r5, [r4, #0]
 800325c:	bf18      	it	ne
 800325e:	6059      	strne	r1, [r3, #4]
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	bf08      	it	eq
 8003264:	f8c8 1000 	streq.w	r1, [r8]
 8003268:	5162      	str	r2, [r4, r5]
 800326a:	604b      	str	r3, [r1, #4]
 800326c:	4630      	mov	r0, r6
 800326e:	f000 f82f 	bl	80032d0 <__malloc_unlock>
 8003272:	f104 000b 	add.w	r0, r4, #11
 8003276:	1d23      	adds	r3, r4, #4
 8003278:	f020 0007 	bic.w	r0, r0, #7
 800327c:	1ac2      	subs	r2, r0, r3
 800327e:	bf1c      	itt	ne
 8003280:	1a1b      	subne	r3, r3, r0
 8003282:	50a3      	strne	r3, [r4, r2]
 8003284:	e7af      	b.n	80031e6 <_malloc_r+0x22>
 8003286:	6862      	ldr	r2, [r4, #4]
 8003288:	42a3      	cmp	r3, r4
 800328a:	bf0c      	ite	eq
 800328c:	f8c8 2000 	streq.w	r2, [r8]
 8003290:	605a      	strne	r2, [r3, #4]
 8003292:	e7eb      	b.n	800326c <_malloc_r+0xa8>
 8003294:	4623      	mov	r3, r4
 8003296:	6864      	ldr	r4, [r4, #4]
 8003298:	e7ae      	b.n	80031f8 <_malloc_r+0x34>
 800329a:	463c      	mov	r4, r7
 800329c:	687f      	ldr	r7, [r7, #4]
 800329e:	e7b6      	b.n	800320e <_malloc_r+0x4a>
 80032a0:	461a      	mov	r2, r3
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	d1fb      	bne.n	80032a0 <_malloc_r+0xdc>
 80032a8:	2300      	movs	r3, #0
 80032aa:	6053      	str	r3, [r2, #4]
 80032ac:	e7de      	b.n	800326c <_malloc_r+0xa8>
 80032ae:	230c      	movs	r3, #12
 80032b0:	4630      	mov	r0, r6
 80032b2:	6033      	str	r3, [r6, #0]
 80032b4:	f000 f80c 	bl	80032d0 <__malloc_unlock>
 80032b8:	e794      	b.n	80031e4 <_malloc_r+0x20>
 80032ba:	6005      	str	r5, [r0, #0]
 80032bc:	e7d6      	b.n	800326c <_malloc_r+0xa8>
 80032be:	bf00      	nop
 80032c0:	2000029c 	.word	0x2000029c

080032c4 <__malloc_lock>:
 80032c4:	4801      	ldr	r0, [pc, #4]	@ (80032cc <__malloc_lock+0x8>)
 80032c6:	f7ff bf10 	b.w	80030ea <__retarget_lock_acquire_recursive>
 80032ca:	bf00      	nop
 80032cc:	20000294 	.word	0x20000294

080032d0 <__malloc_unlock>:
 80032d0:	4801      	ldr	r0, [pc, #4]	@ (80032d8 <__malloc_unlock+0x8>)
 80032d2:	f7ff bf0b 	b.w	80030ec <__retarget_lock_release_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000294 	.word	0x20000294

080032dc <__sfputc_r>:
 80032dc:	6893      	ldr	r3, [r2, #8]
 80032de:	b410      	push	{r4}
 80032e0:	3b01      	subs	r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	6093      	str	r3, [r2, #8]
 80032e6:	da07      	bge.n	80032f8 <__sfputc_r+0x1c>
 80032e8:	6994      	ldr	r4, [r2, #24]
 80032ea:	42a3      	cmp	r3, r4
 80032ec:	db01      	blt.n	80032f2 <__sfputc_r+0x16>
 80032ee:	290a      	cmp	r1, #10
 80032f0:	d102      	bne.n	80032f8 <__sfputc_r+0x1c>
 80032f2:	bc10      	pop	{r4}
 80032f4:	f7ff bdeb 	b.w	8002ece <__swbuf_r>
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	1c58      	adds	r0, r3, #1
 80032fc:	6010      	str	r0, [r2, #0]
 80032fe:	7019      	strb	r1, [r3, #0]
 8003300:	4608      	mov	r0, r1
 8003302:	bc10      	pop	{r4}
 8003304:	4770      	bx	lr

08003306 <__sfputs_r>:
 8003306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003308:	4606      	mov	r6, r0
 800330a:	460f      	mov	r7, r1
 800330c:	4614      	mov	r4, r2
 800330e:	18d5      	adds	r5, r2, r3
 8003310:	42ac      	cmp	r4, r5
 8003312:	d101      	bne.n	8003318 <__sfputs_r+0x12>
 8003314:	2000      	movs	r0, #0
 8003316:	e007      	b.n	8003328 <__sfputs_r+0x22>
 8003318:	463a      	mov	r2, r7
 800331a:	4630      	mov	r0, r6
 800331c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003320:	f7ff ffdc 	bl	80032dc <__sfputc_r>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d1f3      	bne.n	8003310 <__sfputs_r+0xa>
 8003328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800332c <_vfiprintf_r>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	460d      	mov	r5, r1
 8003332:	4614      	mov	r4, r2
 8003334:	4698      	mov	r8, r3
 8003336:	4606      	mov	r6, r0
 8003338:	b09d      	sub	sp, #116	@ 0x74
 800333a:	b118      	cbz	r0, 8003344 <_vfiprintf_r+0x18>
 800333c:	6a03      	ldr	r3, [r0, #32]
 800333e:	b90b      	cbnz	r3, 8003344 <_vfiprintf_r+0x18>
 8003340:	f7ff fcd4 	bl	8002cec <__sinit>
 8003344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003346:	07d9      	lsls	r1, r3, #31
 8003348:	d405      	bmi.n	8003356 <_vfiprintf_r+0x2a>
 800334a:	89ab      	ldrh	r3, [r5, #12]
 800334c:	059a      	lsls	r2, r3, #22
 800334e:	d402      	bmi.n	8003356 <_vfiprintf_r+0x2a>
 8003350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003352:	f7ff feca 	bl	80030ea <__retarget_lock_acquire_recursive>
 8003356:	89ab      	ldrh	r3, [r5, #12]
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	d501      	bpl.n	8003360 <_vfiprintf_r+0x34>
 800335c:	692b      	ldr	r3, [r5, #16]
 800335e:	b99b      	cbnz	r3, 8003388 <_vfiprintf_r+0x5c>
 8003360:	4629      	mov	r1, r5
 8003362:	4630      	mov	r0, r6
 8003364:	f7ff fdf2 	bl	8002f4c <__swsetup_r>
 8003368:	b170      	cbz	r0, 8003388 <_vfiprintf_r+0x5c>
 800336a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800336c:	07dc      	lsls	r4, r3, #31
 800336e:	d504      	bpl.n	800337a <_vfiprintf_r+0x4e>
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	b01d      	add	sp, #116	@ 0x74
 8003376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337a:	89ab      	ldrh	r3, [r5, #12]
 800337c:	0598      	lsls	r0, r3, #22
 800337e:	d4f7      	bmi.n	8003370 <_vfiprintf_r+0x44>
 8003380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003382:	f7ff feb3 	bl	80030ec <__retarget_lock_release_recursive>
 8003386:	e7f3      	b.n	8003370 <_vfiprintf_r+0x44>
 8003388:	2300      	movs	r3, #0
 800338a:	9309      	str	r3, [sp, #36]	@ 0x24
 800338c:	2320      	movs	r3, #32
 800338e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003392:	2330      	movs	r3, #48	@ 0x30
 8003394:	f04f 0901 	mov.w	r9, #1
 8003398:	f8cd 800c 	str.w	r8, [sp, #12]
 800339c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003548 <_vfiprintf_r+0x21c>
 80033a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033a4:	4623      	mov	r3, r4
 80033a6:	469a      	mov	sl, r3
 80033a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033ac:	b10a      	cbz	r2, 80033b2 <_vfiprintf_r+0x86>
 80033ae:	2a25      	cmp	r2, #37	@ 0x25
 80033b0:	d1f9      	bne.n	80033a6 <_vfiprintf_r+0x7a>
 80033b2:	ebba 0b04 	subs.w	fp, sl, r4
 80033b6:	d00b      	beq.n	80033d0 <_vfiprintf_r+0xa4>
 80033b8:	465b      	mov	r3, fp
 80033ba:	4622      	mov	r2, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	4630      	mov	r0, r6
 80033c0:	f7ff ffa1 	bl	8003306 <__sfputs_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	f000 80a7 	beq.w	8003518 <_vfiprintf_r+0x1ec>
 80033ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033cc:	445a      	add	r2, fp
 80033ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80033d0:	f89a 3000 	ldrb.w	r3, [sl]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 809f 	beq.w	8003518 <_vfiprintf_r+0x1ec>
 80033da:	2300      	movs	r3, #0
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e4:	f10a 0a01 	add.w	sl, sl, #1
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	9307      	str	r3, [sp, #28]
 80033ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80033f2:	4654      	mov	r4, sl
 80033f4:	2205      	movs	r2, #5
 80033f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033fa:	4853      	ldr	r0, [pc, #332]	@ (8003548 <_vfiprintf_r+0x21c>)
 80033fc:	f000 fbb0 	bl	8003b60 <memchr>
 8003400:	9a04      	ldr	r2, [sp, #16]
 8003402:	b9d8      	cbnz	r0, 800343c <_vfiprintf_r+0x110>
 8003404:	06d1      	lsls	r1, r2, #27
 8003406:	bf44      	itt	mi
 8003408:	2320      	movmi	r3, #32
 800340a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800340e:	0713      	lsls	r3, r2, #28
 8003410:	bf44      	itt	mi
 8003412:	232b      	movmi	r3, #43	@ 0x2b
 8003414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003418:	f89a 3000 	ldrb.w	r3, [sl]
 800341c:	2b2a      	cmp	r3, #42	@ 0x2a
 800341e:	d015      	beq.n	800344c <_vfiprintf_r+0x120>
 8003420:	4654      	mov	r4, sl
 8003422:	2000      	movs	r0, #0
 8003424:	f04f 0c0a 	mov.w	ip, #10
 8003428:	9a07      	ldr	r2, [sp, #28]
 800342a:	4621      	mov	r1, r4
 800342c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003430:	3b30      	subs	r3, #48	@ 0x30
 8003432:	2b09      	cmp	r3, #9
 8003434:	d94b      	bls.n	80034ce <_vfiprintf_r+0x1a2>
 8003436:	b1b0      	cbz	r0, 8003466 <_vfiprintf_r+0x13a>
 8003438:	9207      	str	r2, [sp, #28]
 800343a:	e014      	b.n	8003466 <_vfiprintf_r+0x13a>
 800343c:	eba0 0308 	sub.w	r3, r0, r8
 8003440:	fa09 f303 	lsl.w	r3, r9, r3
 8003444:	4313      	orrs	r3, r2
 8003446:	46a2      	mov	sl, r4
 8003448:	9304      	str	r3, [sp, #16]
 800344a:	e7d2      	b.n	80033f2 <_vfiprintf_r+0xc6>
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	1d19      	adds	r1, r3, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	9103      	str	r1, [sp, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	bfbb      	ittet	lt
 8003458:	425b      	neglt	r3, r3
 800345a:	f042 0202 	orrlt.w	r2, r2, #2
 800345e:	9307      	strge	r3, [sp, #28]
 8003460:	9307      	strlt	r3, [sp, #28]
 8003462:	bfb8      	it	lt
 8003464:	9204      	strlt	r2, [sp, #16]
 8003466:	7823      	ldrb	r3, [r4, #0]
 8003468:	2b2e      	cmp	r3, #46	@ 0x2e
 800346a:	d10a      	bne.n	8003482 <_vfiprintf_r+0x156>
 800346c:	7863      	ldrb	r3, [r4, #1]
 800346e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003470:	d132      	bne.n	80034d8 <_vfiprintf_r+0x1ac>
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	3402      	adds	r4, #2
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800354c <_vfiprintf_r+0x220>
 8003486:	2203      	movs	r2, #3
 8003488:	4650      	mov	r0, sl
 800348a:	7821      	ldrb	r1, [r4, #0]
 800348c:	f000 fb68 	bl	8003b60 <memchr>
 8003490:	b138      	cbz	r0, 80034a2 <_vfiprintf_r+0x176>
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	9b04      	ldr	r3, [sp, #16]
 8003496:	eba0 000a 	sub.w	r0, r0, sl
 800349a:	4082      	lsls	r2, r0
 800349c:	4313      	orrs	r3, r2
 800349e:	3401      	adds	r4, #1
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a6:	2206      	movs	r2, #6
 80034a8:	4829      	ldr	r0, [pc, #164]	@ (8003550 <_vfiprintf_r+0x224>)
 80034aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034ae:	f000 fb57 	bl	8003b60 <memchr>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d03f      	beq.n	8003536 <_vfiprintf_r+0x20a>
 80034b6:	4b27      	ldr	r3, [pc, #156]	@ (8003554 <_vfiprintf_r+0x228>)
 80034b8:	bb1b      	cbnz	r3, 8003502 <_vfiprintf_r+0x1d6>
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	3307      	adds	r3, #7
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	3308      	adds	r3, #8
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034c8:	443b      	add	r3, r7
 80034ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80034cc:	e76a      	b.n	80033a4 <_vfiprintf_r+0x78>
 80034ce:	460c      	mov	r4, r1
 80034d0:	2001      	movs	r0, #1
 80034d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d6:	e7a8      	b.n	800342a <_vfiprintf_r+0xfe>
 80034d8:	2300      	movs	r3, #0
 80034da:	f04f 0c0a 	mov.w	ip, #10
 80034de:	4619      	mov	r1, r3
 80034e0:	3401      	adds	r4, #1
 80034e2:	9305      	str	r3, [sp, #20]
 80034e4:	4620      	mov	r0, r4
 80034e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ea:	3a30      	subs	r2, #48	@ 0x30
 80034ec:	2a09      	cmp	r2, #9
 80034ee:	d903      	bls.n	80034f8 <_vfiprintf_r+0x1cc>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0c6      	beq.n	8003482 <_vfiprintf_r+0x156>
 80034f4:	9105      	str	r1, [sp, #20]
 80034f6:	e7c4      	b.n	8003482 <_vfiprintf_r+0x156>
 80034f8:	4604      	mov	r4, r0
 80034fa:	2301      	movs	r3, #1
 80034fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003500:	e7f0      	b.n	80034e4 <_vfiprintf_r+0x1b8>
 8003502:	ab03      	add	r3, sp, #12
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	462a      	mov	r2, r5
 8003508:	4630      	mov	r0, r6
 800350a:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <_vfiprintf_r+0x22c>)
 800350c:	a904      	add	r1, sp, #16
 800350e:	f3af 8000 	nop.w
 8003512:	4607      	mov	r7, r0
 8003514:	1c78      	adds	r0, r7, #1
 8003516:	d1d6      	bne.n	80034c6 <_vfiprintf_r+0x19a>
 8003518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800351a:	07d9      	lsls	r1, r3, #31
 800351c:	d405      	bmi.n	800352a <_vfiprintf_r+0x1fe>
 800351e:	89ab      	ldrh	r3, [r5, #12]
 8003520:	059a      	lsls	r2, r3, #22
 8003522:	d402      	bmi.n	800352a <_vfiprintf_r+0x1fe>
 8003524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003526:	f7ff fde1 	bl	80030ec <__retarget_lock_release_recursive>
 800352a:	89ab      	ldrh	r3, [r5, #12]
 800352c:	065b      	lsls	r3, r3, #25
 800352e:	f53f af1f 	bmi.w	8003370 <_vfiprintf_r+0x44>
 8003532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003534:	e71e      	b.n	8003374 <_vfiprintf_r+0x48>
 8003536:	ab03      	add	r3, sp, #12
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	462a      	mov	r2, r5
 800353c:	4630      	mov	r0, r6
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <_vfiprintf_r+0x22c>)
 8003540:	a904      	add	r1, sp, #16
 8003542:	f000 f87d 	bl	8003640 <_printf_i>
 8003546:	e7e4      	b.n	8003512 <_vfiprintf_r+0x1e6>
 8003548:	08003c5a 	.word	0x08003c5a
 800354c:	08003c60 	.word	0x08003c60
 8003550:	08003c64 	.word	0x08003c64
 8003554:	00000000 	.word	0x00000000
 8003558:	08003307 	.word	0x08003307

0800355c <_printf_common>:
 800355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	4616      	mov	r6, r2
 8003562:	4698      	mov	r8, r3
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	4607      	mov	r7, r0
 800356a:	4293      	cmp	r3, r2
 800356c:	bfb8      	it	lt
 800356e:	4613      	movlt	r3, r2
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003576:	460c      	mov	r4, r1
 8003578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800357c:	b10a      	cbz	r2, 8003582 <_printf_common+0x26>
 800357e:	3301      	adds	r3, #1
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	0699      	lsls	r1, r3, #26
 8003586:	bf42      	ittt	mi
 8003588:	6833      	ldrmi	r3, [r6, #0]
 800358a:	3302      	addmi	r3, #2
 800358c:	6033      	strmi	r3, [r6, #0]
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	f015 0506 	ands.w	r5, r5, #6
 8003594:	d106      	bne.n	80035a4 <_printf_common+0x48>
 8003596:	f104 0a19 	add.w	sl, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	6832      	ldr	r2, [r6, #0]
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	dc2b      	bgt.n	80035fc <_printf_common+0xa0>
 80035a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	3b00      	subs	r3, #0
 80035ac:	bf18      	it	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	0692      	lsls	r2, r2, #26
 80035b2:	d430      	bmi.n	8003616 <_printf_common+0xba>
 80035b4:	4641      	mov	r1, r8
 80035b6:	4638      	mov	r0, r7
 80035b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035bc:	47c8      	blx	r9
 80035be:	3001      	adds	r0, #1
 80035c0:	d023      	beq.n	800360a <_printf_common+0xae>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf14      	ite	ne
 80035ce:	2500      	movne	r5, #0
 80035d0:	6833      	ldreq	r3, [r6, #0]
 80035d2:	f04f 0600 	mov.w	r6, #0
 80035d6:	bf08      	it	eq
 80035d8:	68e5      	ldreq	r5, [r4, #12]
 80035da:	f104 041a 	add.w	r4, r4, #26
 80035de:	bf08      	it	eq
 80035e0:	1aed      	subeq	r5, r5, r3
 80035e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035e6:	bf08      	it	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfc4      	itt	gt
 80035f0:	1a9b      	subgt	r3, r3, r2
 80035f2:	18ed      	addgt	r5, r5, r3
 80035f4:	42b5      	cmp	r5, r6
 80035f6:	d11a      	bne.n	800362e <_printf_common+0xd2>
 80035f8:	2000      	movs	r0, #0
 80035fa:	e008      	b.n	800360e <_printf_common+0xb2>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4652      	mov	r2, sl
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	47c8      	blx	r9
 8003606:	3001      	adds	r0, #1
 8003608:	d103      	bne.n	8003612 <_printf_common+0xb6>
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
 800360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003612:	3501      	adds	r5, #1
 8003614:	e7c1      	b.n	800359a <_printf_common+0x3e>
 8003616:	2030      	movs	r0, #48	@ 0x30
 8003618:	18e1      	adds	r1, r4, r3
 800361a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003624:	4422      	add	r2, r4
 8003626:	3302      	adds	r3, #2
 8003628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800362c:	e7c2      	b.n	80035b4 <_printf_common+0x58>
 800362e:	2301      	movs	r3, #1
 8003630:	4622      	mov	r2, r4
 8003632:	4641      	mov	r1, r8
 8003634:	4638      	mov	r0, r7
 8003636:	47c8      	blx	r9
 8003638:	3001      	adds	r0, #1
 800363a:	d0e6      	beq.n	800360a <_printf_common+0xae>
 800363c:	3601      	adds	r6, #1
 800363e:	e7d9      	b.n	80035f4 <_printf_common+0x98>

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	4691      	mov	r9, r2
 8003648:	2f78      	cmp	r7, #120	@ 0x78
 800364a:	4680      	mov	r8, r0
 800364c:	460c      	mov	r4, r1
 800364e:	469a      	mov	sl, r3
 8003650:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	@ 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d3 	beq.w	8003808 <_printf_i+0x1c8>
 8003662:	2f58      	cmp	r7, #88	@ 0x58
 8003664:	f000 80ba 	beq.w	80037dc <_printf_i+0x19c>
 8003668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	@ (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037ef 	.word	0x080037ef
 80036b0:	08003717 	.word	0x08003717
 80036b4:	080037a9 	.word	0x080037a9
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	08003811 	.word	0x08003811
 80036c4:	08003669 	.word	0x08003669
 80036c8:	08003717 	.word	0x08003717
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037b1 	.word	0x080037b1
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6032      	str	r2, [r6, #0]
 80036e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e09e      	b.n	800382a <_printf_i+0x1ea>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1d19      	adds	r1, r3, #4
 80036f2:	6031      	str	r1, [r6, #0]
 80036f4:	0606      	lsls	r6, r0, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0xbc>
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	e003      	b.n	8003704 <_printf_i+0xc4>
 80036fc:	0645      	lsls	r5, r0, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0xb8>
 8003700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003704:	2d00      	cmp	r5, #0
 8003706:	da03      	bge.n	8003710 <_printf_i+0xd0>
 8003708:	232d      	movs	r3, #45	@ 0x2d
 800370a:	426d      	negs	r5, r5
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003710:	230a      	movs	r3, #10
 8003712:	4859      	ldr	r0, [pc, #356]	@ (8003878 <_printf_i+0x238>)
 8003714:	e011      	b.n	800373a <_printf_i+0xfa>
 8003716:	6821      	ldr	r1, [r4, #0]
 8003718:	6833      	ldr	r3, [r6, #0]
 800371a:	0608      	lsls	r0, r1, #24
 800371c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003720:	d402      	bmi.n	8003728 <_printf_i+0xe8>
 8003722:	0649      	lsls	r1, r1, #25
 8003724:	bf48      	it	mi
 8003726:	b2ad      	uxthmi	r5, r5
 8003728:	2f6f      	cmp	r7, #111	@ 0x6f
 800372a:	6033      	str	r3, [r6, #0]
 800372c:	bf14      	ite	ne
 800372e:	230a      	movne	r3, #10
 8003730:	2308      	moveq	r3, #8
 8003732:	4851      	ldr	r0, [pc, #324]	@ (8003878 <_printf_i+0x238>)
 8003734:	2100      	movs	r1, #0
 8003736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800373a:	6866      	ldr	r6, [r4, #4]
 800373c:	2e00      	cmp	r6, #0
 800373e:	bfa8      	it	ge
 8003740:	6821      	ldrge	r1, [r4, #0]
 8003742:	60a6      	str	r6, [r4, #8]
 8003744:	bfa4      	itt	ge
 8003746:	f021 0104 	bicge.w	r1, r1, #4
 800374a:	6021      	strge	r1, [r4, #0]
 800374c:	b90d      	cbnz	r5, 8003752 <_printf_i+0x112>
 800374e:	2e00      	cmp	r6, #0
 8003750:	d04b      	beq.n	80037ea <_printf_i+0x1aa>
 8003752:	4616      	mov	r6, r2
 8003754:	fbb5 f1f3 	udiv	r1, r5, r3
 8003758:	fb03 5711 	mls	r7, r3, r1, r5
 800375c:	5dc7      	ldrb	r7, [r0, r7]
 800375e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003762:	462f      	mov	r7, r5
 8003764:	42bb      	cmp	r3, r7
 8003766:	460d      	mov	r5, r1
 8003768:	d9f4      	bls.n	8003754 <_printf_i+0x114>
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10b      	bne.n	8003786 <_printf_i+0x146>
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	07df      	lsls	r7, r3, #31
 8003772:	d508      	bpl.n	8003786 <_printf_i+0x146>
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	6861      	ldr	r1, [r4, #4]
 8003778:	4299      	cmp	r1, r3
 800377a:	bfde      	ittt	le
 800377c:	2330      	movle	r3, #48	@ 0x30
 800377e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003782:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003786:	1b92      	subs	r2, r2, r6
 8003788:	6122      	str	r2, [r4, #16]
 800378a:	464b      	mov	r3, r9
 800378c:	4621      	mov	r1, r4
 800378e:	4640      	mov	r0, r8
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	aa03      	add	r2, sp, #12
 8003796:	f7ff fee1 	bl	800355c <_printf_common>
 800379a:	3001      	adds	r0, #1
 800379c:	d14a      	bne.n	8003834 <_printf_i+0x1f4>
 800379e:	f04f 30ff 	mov.w	r0, #4294967295
 80037a2:	b004      	add	sp, #16
 80037a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2778      	movs	r7, #120	@ 0x78
 80037b2:	4832      	ldr	r0, [pc, #200]	@ (800387c <_printf_i+0x23c>)
 80037b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	6831      	ldr	r1, [r6, #0]
 80037bc:	061f      	lsls	r7, r3, #24
 80037be:	f851 5b04 	ldr.w	r5, [r1], #4
 80037c2:	d402      	bmi.n	80037ca <_printf_i+0x18a>
 80037c4:	065f      	lsls	r7, r3, #25
 80037c6:	bf48      	it	mi
 80037c8:	b2ad      	uxthmi	r5, r5
 80037ca:	6031      	str	r1, [r6, #0]
 80037cc:	07d9      	lsls	r1, r3, #31
 80037ce:	bf44      	itt	mi
 80037d0:	f043 0320 	orrmi.w	r3, r3, #32
 80037d4:	6023      	strmi	r3, [r4, #0]
 80037d6:	b11d      	cbz	r5, 80037e0 <_printf_i+0x1a0>
 80037d8:	2310      	movs	r3, #16
 80037da:	e7ab      	b.n	8003734 <_printf_i+0xf4>
 80037dc:	4826      	ldr	r0, [pc, #152]	@ (8003878 <_printf_i+0x238>)
 80037de:	e7e9      	b.n	80037b4 <_printf_i+0x174>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f023 0320 	bic.w	r3, r3, #32
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	e7f6      	b.n	80037d8 <_printf_i+0x198>
 80037ea:	4616      	mov	r6, r2
 80037ec:	e7bd      	b.n	800376a <_printf_i+0x12a>
 80037ee:	6833      	ldr	r3, [r6, #0]
 80037f0:	6825      	ldr	r5, [r4, #0]
 80037f2:	1d18      	adds	r0, r3, #4
 80037f4:	6961      	ldr	r1, [r4, #20]
 80037f6:	6030      	str	r0, [r6, #0]
 80037f8:	062e      	lsls	r6, r5, #24
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	d501      	bpl.n	8003802 <_printf_i+0x1c2>
 80037fe:	6019      	str	r1, [r3, #0]
 8003800:	e002      	b.n	8003808 <_printf_i+0x1c8>
 8003802:	0668      	lsls	r0, r5, #25
 8003804:	d5fb      	bpl.n	80037fe <_printf_i+0x1be>
 8003806:	8019      	strh	r1, [r3, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	4616      	mov	r6, r2
 800380c:	6123      	str	r3, [r4, #16]
 800380e:	e7bc      	b.n	800378a <_printf_i+0x14a>
 8003810:	6833      	ldr	r3, [r6, #0]
 8003812:	2100      	movs	r1, #0
 8003814:	1d1a      	adds	r2, r3, #4
 8003816:	6032      	str	r2, [r6, #0]
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f99f 	bl	8003b60 <memchr>
 8003822:	b108      	cbz	r0, 8003828 <_printf_i+0x1e8>
 8003824:	1b80      	subs	r0, r0, r6
 8003826:	6060      	str	r0, [r4, #4]
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	2300      	movs	r3, #0
 800382e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003832:	e7aa      	b.n	800378a <_printf_i+0x14a>
 8003834:	4632      	mov	r2, r6
 8003836:	4649      	mov	r1, r9
 8003838:	4640      	mov	r0, r8
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	47d0      	blx	sl
 800383e:	3001      	adds	r0, #1
 8003840:	d0ad      	beq.n	800379e <_printf_i+0x15e>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	079b      	lsls	r3, r3, #30
 8003846:	d413      	bmi.n	8003870 <_printf_i+0x230>
 8003848:	68e0      	ldr	r0, [r4, #12]
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	4298      	cmp	r0, r3
 800384e:	bfb8      	it	lt
 8003850:	4618      	movlt	r0, r3
 8003852:	e7a6      	b.n	80037a2 <_printf_i+0x162>
 8003854:	2301      	movs	r3, #1
 8003856:	4632      	mov	r2, r6
 8003858:	4649      	mov	r1, r9
 800385a:	4640      	mov	r0, r8
 800385c:	47d0      	blx	sl
 800385e:	3001      	adds	r0, #1
 8003860:	d09d      	beq.n	800379e <_printf_i+0x15e>
 8003862:	3501      	adds	r5, #1
 8003864:	68e3      	ldr	r3, [r4, #12]
 8003866:	9903      	ldr	r1, [sp, #12]
 8003868:	1a5b      	subs	r3, r3, r1
 800386a:	42ab      	cmp	r3, r5
 800386c:	dcf2      	bgt.n	8003854 <_printf_i+0x214>
 800386e:	e7eb      	b.n	8003848 <_printf_i+0x208>
 8003870:	2500      	movs	r5, #0
 8003872:	f104 0619 	add.w	r6, r4, #25
 8003876:	e7f5      	b.n	8003864 <_printf_i+0x224>
 8003878:	08003c6b 	.word	0x08003c6b
 800387c:	08003c7c 	.word	0x08003c7c

08003880 <__sflush_r>:
 8003880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	0716      	lsls	r6, r2, #28
 8003888:	4605      	mov	r5, r0
 800388a:	460c      	mov	r4, r1
 800388c:	d454      	bmi.n	8003938 <__sflush_r+0xb8>
 800388e:	684b      	ldr	r3, [r1, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	dc02      	bgt.n	800389a <__sflush_r+0x1a>
 8003894:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	dd48      	ble.n	800392c <__sflush_r+0xac>
 800389a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800389c:	2e00      	cmp	r6, #0
 800389e:	d045      	beq.n	800392c <__sflush_r+0xac>
 80038a0:	2300      	movs	r3, #0
 80038a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038a6:	682f      	ldr	r7, [r5, #0]
 80038a8:	6a21      	ldr	r1, [r4, #32]
 80038aa:	602b      	str	r3, [r5, #0]
 80038ac:	d030      	beq.n	8003910 <__sflush_r+0x90>
 80038ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	0759      	lsls	r1, r3, #29
 80038b4:	d505      	bpl.n	80038c2 <__sflush_r+0x42>
 80038b6:	6863      	ldr	r3, [r4, #4]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038bc:	b10b      	cbz	r3, 80038c2 <__sflush_r+0x42>
 80038be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038c0:	1ad2      	subs	r2, r2, r3
 80038c2:	2300      	movs	r3, #0
 80038c4:	4628      	mov	r0, r5
 80038c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038c8:	6a21      	ldr	r1, [r4, #32]
 80038ca:	47b0      	blx	r6
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	d106      	bne.n	80038e0 <__sflush_r+0x60>
 80038d2:	6829      	ldr	r1, [r5, #0]
 80038d4:	291d      	cmp	r1, #29
 80038d6:	d82b      	bhi.n	8003930 <__sflush_r+0xb0>
 80038d8:	4a28      	ldr	r2, [pc, #160]	@ (800397c <__sflush_r+0xfc>)
 80038da:	410a      	asrs	r2, r1
 80038dc:	07d6      	lsls	r6, r2, #31
 80038de:	d427      	bmi.n	8003930 <__sflush_r+0xb0>
 80038e0:	2200      	movs	r2, #0
 80038e2:	6062      	str	r2, [r4, #4]
 80038e4:	6922      	ldr	r2, [r4, #16]
 80038e6:	04d9      	lsls	r1, r3, #19
 80038e8:	6022      	str	r2, [r4, #0]
 80038ea:	d504      	bpl.n	80038f6 <__sflush_r+0x76>
 80038ec:	1c42      	adds	r2, r0, #1
 80038ee:	d101      	bne.n	80038f4 <__sflush_r+0x74>
 80038f0:	682b      	ldr	r3, [r5, #0]
 80038f2:	b903      	cbnz	r3, 80038f6 <__sflush_r+0x76>
 80038f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80038f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038f8:	602f      	str	r7, [r5, #0]
 80038fa:	b1b9      	cbz	r1, 800392c <__sflush_r+0xac>
 80038fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003900:	4299      	cmp	r1, r3
 8003902:	d002      	beq.n	800390a <__sflush_r+0x8a>
 8003904:	4628      	mov	r0, r5
 8003906:	f7ff fbf3 	bl	80030f0 <_free_r>
 800390a:	2300      	movs	r3, #0
 800390c:	6363      	str	r3, [r4, #52]	@ 0x34
 800390e:	e00d      	b.n	800392c <__sflush_r+0xac>
 8003910:	2301      	movs	r3, #1
 8003912:	4628      	mov	r0, r5
 8003914:	47b0      	blx	r6
 8003916:	4602      	mov	r2, r0
 8003918:	1c50      	adds	r0, r2, #1
 800391a:	d1c9      	bne.n	80038b0 <__sflush_r+0x30>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0c6      	beq.n	80038b0 <__sflush_r+0x30>
 8003922:	2b1d      	cmp	r3, #29
 8003924:	d001      	beq.n	800392a <__sflush_r+0xaa>
 8003926:	2b16      	cmp	r3, #22
 8003928:	d11d      	bne.n	8003966 <__sflush_r+0xe6>
 800392a:	602f      	str	r7, [r5, #0]
 800392c:	2000      	movs	r0, #0
 800392e:	e021      	b.n	8003974 <__sflush_r+0xf4>
 8003930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003934:	b21b      	sxth	r3, r3
 8003936:	e01a      	b.n	800396e <__sflush_r+0xee>
 8003938:	690f      	ldr	r7, [r1, #16]
 800393a:	2f00      	cmp	r7, #0
 800393c:	d0f6      	beq.n	800392c <__sflush_r+0xac>
 800393e:	0793      	lsls	r3, r2, #30
 8003940:	bf18      	it	ne
 8003942:	2300      	movne	r3, #0
 8003944:	680e      	ldr	r6, [r1, #0]
 8003946:	bf08      	it	eq
 8003948:	694b      	ldreq	r3, [r1, #20]
 800394a:	1bf6      	subs	r6, r6, r7
 800394c:	600f      	str	r7, [r1, #0]
 800394e:	608b      	str	r3, [r1, #8]
 8003950:	2e00      	cmp	r6, #0
 8003952:	ddeb      	ble.n	800392c <__sflush_r+0xac>
 8003954:	4633      	mov	r3, r6
 8003956:	463a      	mov	r2, r7
 8003958:	4628      	mov	r0, r5
 800395a:	6a21      	ldr	r1, [r4, #32]
 800395c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003960:	47e0      	blx	ip
 8003962:	2800      	cmp	r0, #0
 8003964:	dc07      	bgt.n	8003976 <__sflush_r+0xf6>
 8003966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003976:	4407      	add	r7, r0
 8003978:	1a36      	subs	r6, r6, r0
 800397a:	e7e9      	b.n	8003950 <__sflush_r+0xd0>
 800397c:	dfbffffe 	.word	0xdfbffffe

08003980 <_fflush_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	690b      	ldr	r3, [r1, #16]
 8003984:	4605      	mov	r5, r0
 8003986:	460c      	mov	r4, r1
 8003988:	b913      	cbnz	r3, 8003990 <_fflush_r+0x10>
 800398a:	2500      	movs	r5, #0
 800398c:	4628      	mov	r0, r5
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	b118      	cbz	r0, 800399a <_fflush_r+0x1a>
 8003992:	6a03      	ldr	r3, [r0, #32]
 8003994:	b90b      	cbnz	r3, 800399a <_fflush_r+0x1a>
 8003996:	f7ff f9a9 	bl	8002cec <__sinit>
 800399a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f3      	beq.n	800398a <_fflush_r+0xa>
 80039a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039a4:	07d0      	lsls	r0, r2, #31
 80039a6:	d404      	bmi.n	80039b2 <_fflush_r+0x32>
 80039a8:	0599      	lsls	r1, r3, #22
 80039aa:	d402      	bmi.n	80039b2 <_fflush_r+0x32>
 80039ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ae:	f7ff fb9c 	bl	80030ea <__retarget_lock_acquire_recursive>
 80039b2:	4628      	mov	r0, r5
 80039b4:	4621      	mov	r1, r4
 80039b6:	f7ff ff63 	bl	8003880 <__sflush_r>
 80039ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039bc:	4605      	mov	r5, r0
 80039be:	07da      	lsls	r2, r3, #31
 80039c0:	d4e4      	bmi.n	800398c <_fflush_r+0xc>
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	059b      	lsls	r3, r3, #22
 80039c6:	d4e1      	bmi.n	800398c <_fflush_r+0xc>
 80039c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ca:	f7ff fb8f 	bl	80030ec <__retarget_lock_release_recursive>
 80039ce:	e7dd      	b.n	800398c <_fflush_r+0xc>

080039d0 <__swhatbuf_r>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	460c      	mov	r4, r1
 80039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d8:	4615      	mov	r5, r2
 80039da:	2900      	cmp	r1, #0
 80039dc:	461e      	mov	r6, r3
 80039de:	b096      	sub	sp, #88	@ 0x58
 80039e0:	da0c      	bge.n	80039fc <__swhatbuf_r+0x2c>
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	2100      	movs	r1, #0
 80039e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039ea:	bf14      	ite	ne
 80039ec:	2340      	movne	r3, #64	@ 0x40
 80039ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80039f2:	2000      	movs	r0, #0
 80039f4:	6031      	str	r1, [r6, #0]
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	b016      	add	sp, #88	@ 0x58
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	466a      	mov	r2, sp
 80039fe:	f000 f87d 	bl	8003afc <_fstat_r>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	dbed      	blt.n	80039e2 <__swhatbuf_r+0x12>
 8003a06:	9901      	ldr	r1, [sp, #4]
 8003a08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a10:	4259      	negs	r1, r3
 8003a12:	4159      	adcs	r1, r3
 8003a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a18:	e7eb      	b.n	80039f2 <__swhatbuf_r+0x22>

08003a1a <__smakebuf_r>:
 8003a1a:	898b      	ldrh	r3, [r1, #12]
 8003a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a1e:	079d      	lsls	r5, r3, #30
 8003a20:	4606      	mov	r6, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	d507      	bpl.n	8003a36 <__smakebuf_r+0x1c>
 8003a26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	6163      	str	r3, [r4, #20]
 8003a32:	b003      	add	sp, #12
 8003a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a36:	466a      	mov	r2, sp
 8003a38:	ab01      	add	r3, sp, #4
 8003a3a:	f7ff ffc9 	bl	80039d0 <__swhatbuf_r>
 8003a3e:	9f00      	ldr	r7, [sp, #0]
 8003a40:	4605      	mov	r5, r0
 8003a42:	4639      	mov	r1, r7
 8003a44:	4630      	mov	r0, r6
 8003a46:	f7ff fbbd 	bl	80031c4 <_malloc_r>
 8003a4a:	b948      	cbnz	r0, 8003a60 <__smakebuf_r+0x46>
 8003a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a50:	059a      	lsls	r2, r3, #22
 8003a52:	d4ee      	bmi.n	8003a32 <__smakebuf_r+0x18>
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	e7e2      	b.n	8003a26 <__smakebuf_r+0xc>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	9b01      	ldr	r3, [sp, #4]
 8003a6e:	6020      	str	r0, [r4, #0]
 8003a70:	b15b      	cbz	r3, 8003a8a <__smakebuf_r+0x70>
 8003a72:	4630      	mov	r0, r6
 8003a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a78:	f000 f852 	bl	8003b20 <_isatty_r>
 8003a7c:	b128      	cbz	r0, 8003a8a <__smakebuf_r+0x70>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f023 0303 	bic.w	r3, r3, #3
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	431d      	orrs	r5, r3
 8003a8e:	81a5      	strh	r5, [r4, #12]
 8003a90:	e7cf      	b.n	8003a32 <__smakebuf_r+0x18>

08003a92 <_putc_r>:
 8003a92:	b570      	push	{r4, r5, r6, lr}
 8003a94:	460d      	mov	r5, r1
 8003a96:	4614      	mov	r4, r2
 8003a98:	4606      	mov	r6, r0
 8003a9a:	b118      	cbz	r0, 8003aa4 <_putc_r+0x12>
 8003a9c:	6a03      	ldr	r3, [r0, #32]
 8003a9e:	b90b      	cbnz	r3, 8003aa4 <_putc_r+0x12>
 8003aa0:	f7ff f924 	bl	8002cec <__sinit>
 8003aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003aa6:	07d8      	lsls	r0, r3, #31
 8003aa8:	d405      	bmi.n	8003ab6 <_putc_r+0x24>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	0599      	lsls	r1, r3, #22
 8003aae:	d402      	bmi.n	8003ab6 <_putc_r+0x24>
 8003ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ab2:	f7ff fb1a 	bl	80030ea <__retarget_lock_acquire_recursive>
 8003ab6:	68a3      	ldr	r3, [r4, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	60a3      	str	r3, [r4, #8]
 8003abe:	da05      	bge.n	8003acc <_putc_r+0x3a>
 8003ac0:	69a2      	ldr	r2, [r4, #24]
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	db12      	blt.n	8003aec <_putc_r+0x5a>
 8003ac6:	b2eb      	uxtb	r3, r5
 8003ac8:	2b0a      	cmp	r3, #10
 8003aca:	d00f      	beq.n	8003aec <_putc_r+0x5a>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	6022      	str	r2, [r4, #0]
 8003ad2:	701d      	strb	r5, [r3, #0]
 8003ad4:	b2ed      	uxtb	r5, r5
 8003ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ad8:	07da      	lsls	r2, r3, #31
 8003ada:	d405      	bmi.n	8003ae8 <_putc_r+0x56>
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	059b      	lsls	r3, r3, #22
 8003ae0:	d402      	bmi.n	8003ae8 <_putc_r+0x56>
 8003ae2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ae4:	f7ff fb02 	bl	80030ec <__retarget_lock_release_recursive>
 8003ae8:	4628      	mov	r0, r5
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	4629      	mov	r1, r5
 8003aee:	4622      	mov	r2, r4
 8003af0:	4630      	mov	r0, r6
 8003af2:	f7ff f9ec 	bl	8002ece <__swbuf_r>
 8003af6:	4605      	mov	r5, r0
 8003af8:	e7ed      	b.n	8003ad6 <_putc_r+0x44>
	...

08003afc <_fstat_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	2300      	movs	r3, #0
 8003b00:	4d06      	ldr	r5, [pc, #24]	@ (8003b1c <_fstat_r+0x20>)
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	f7fc fe21 	bl	8000750 <_fstat>
 8003b0e:	1c43      	adds	r3, r0, #1
 8003b10:	d102      	bne.n	8003b18 <_fstat_r+0x1c>
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	b103      	cbz	r3, 8003b18 <_fstat_r+0x1c>
 8003b16:	6023      	str	r3, [r4, #0]
 8003b18:	bd38      	pop	{r3, r4, r5, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000290 	.word	0x20000290

08003b20 <_isatty_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	2300      	movs	r3, #0
 8003b24:	4d05      	ldr	r5, [pc, #20]	@ (8003b3c <_isatty_r+0x1c>)
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	f7fc fe1f 	bl	800076e <_isatty>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_isatty_r+0x1a>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_isatty_r+0x1a>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20000290 	.word	0x20000290

08003b40 <_sbrk_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	2300      	movs	r3, #0
 8003b44:	4d05      	ldr	r5, [pc, #20]	@ (8003b5c <_sbrk_r+0x1c>)
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fc fe26 	bl	800079c <_sbrk>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_sbrk_r+0x1a>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_sbrk_r+0x1a>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	20000290 	.word	0x20000290

08003b60 <memchr>:
 8003b60:	4603      	mov	r3, r0
 8003b62:	b510      	push	{r4, lr}
 8003b64:	b2c9      	uxtb	r1, r1
 8003b66:	4402      	add	r2, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	d101      	bne.n	8003b72 <memchr+0x12>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e003      	b.n	8003b7a <memchr+0x1a>
 8003b72:	7804      	ldrb	r4, [r0, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	428c      	cmp	r4, r1
 8003b78:	d1f6      	bne.n	8003b68 <memchr+0x8>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <_init>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr

08003b88 <_fini>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr
