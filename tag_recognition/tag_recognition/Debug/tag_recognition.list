
tag_recognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  00007070  2**0
                  CONTENTS
  4 .ARM          00000000  08005558  08005558  00007070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005558  08005558  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005558  08005558  00006558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005560  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  080055d0  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080055d0  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6e0  00000000  00000000  00007099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aff  00000000  00000000  00011779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00013278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e8  00000000  00000000  00013c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e83  00000000  00000000  00014470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf1a  00000000  00000000  0002c2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086502  00000000  00000000  0003920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf70f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000315c  00000000  00000000  000bf754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000c28b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005444 	.word	0x08005444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005444 	.word	0x08005444

0800014c <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f003 ffc9 	bl	80040f4 <HAL_UART_Transmit>
    return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000e0 	.word	0x200000e0

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fb85 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f8af 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f94b 	bl	8000418 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000182:	f000 f91f 	bl	80003c4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000186:	f000 f8ef 	bl	8000368 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello from STM32! \n");
 800018a:	4847      	ldr	r0, [pc, #284]	@ (80002a8 <main+0x138>)
 800018c:	f004 fab8 	bl	8004700 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x32 << 1, husky_tx, sizeof(husky_tx), 100) == HAL_OK)
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2308      	movs	r3, #8
 8000196:	4a45      	ldr	r2, [pc, #276]	@ (80002ac <main+0x13c>)
 8000198:	2164      	movs	r1, #100	@ 0x64
 800019a:	4845      	ldr	r0, [pc, #276]	@ (80002b0 <main+0x140>)
 800019c:	f001 f8a2 	bl	80012e4 <HAL_I2C_Master_Transmit>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d177      	bne.n	8000296 <main+0x126>
	  {
	      if (HAL_I2C_Master_Receive(&hi2c2, 0x32 << 1, husky_rx, sizeof(husky_rx), 100) == HAL_OK)
 80001a6:	2364      	movs	r3, #100	@ 0x64
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	231e      	movs	r3, #30
 80001ac:	4a41      	ldr	r2, [pc, #260]	@ (80002b4 <main+0x144>)
 80001ae:	2164      	movs	r1, #100	@ 0x64
 80001b0:	483f      	ldr	r0, [pc, #252]	@ (80002b0 <main+0x140>)
 80001b2:	f001 f995 	bl	80014e0 <HAL_I2C_Master_Receive>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d168      	bne.n	800028e <main+0x11e>
	      {
	    	  printf("RAW: ");
 80001bc:	483e      	ldr	r0, [pc, #248]	@ (80002b8 <main+0x148>)
 80001be:	f004 fa2f 	bl	8004620 <iprintf>
	    	  for (int i = 0; i < 30; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e00a      	b.n	80001de <main+0x6e>
	    	      printf("%02X ", husky_rx[i]);
 80001c8:	4a3a      	ldr	r2, [pc, #232]	@ (80002b4 <main+0x144>)
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	4413      	add	r3, r2
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	483a      	ldr	r0, [pc, #232]	@ (80002bc <main+0x14c>)
 80001d4:	f004 fa24 	bl	8004620 <iprintf>
	    	  for (int i = 0; i < 30; i++) {
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	3301      	adds	r3, #1
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2b1d      	cmp	r3, #29
 80001e2:	ddf1      	ble.n	80001c8 <main+0x58>
	    	  }
	    	  printf("\n");
 80001e4:	200a      	movs	r0, #10
 80001e6:	f004 fa2d 	bl	8004644 <putchar>


	          // 프레임 시작 확인
	          if (husky_rx[0] == 0x55 && husky_rx[1] == 0xAA)
 80001ea:	4b32      	ldr	r3, [pc, #200]	@ (80002b4 <main+0x144>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b55      	cmp	r3, #85	@ 0x55
 80001f0:	d149      	bne.n	8000286 <main+0x116>
 80001f2:	4b30      	ldr	r3, [pc, #192]	@ (80002b4 <main+0x144>)
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	2baa      	cmp	r3, #170	@ 0xaa
 80001f8:	d145      	bne.n	8000286 <main+0x116>
	          {
	              // 체크섬 계산
	              uint8_t length = husky_rx[2];
 80001fa:	4b2e      	ldr	r3, [pc, #184]	@ (80002b4 <main+0x144>)
 80001fc:	789b      	ldrb	r3, [r3, #2]
 80001fe:	70fb      	strb	r3, [r7, #3]
	              uint8_t expected_checksum = husky_rx[4 + length];
 8000200:	78fb      	ldrb	r3, [r7, #3]
 8000202:	3304      	adds	r3, #4
 8000204:	4a2b      	ldr	r2, [pc, #172]	@ (80002b4 <main+0x144>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	70bb      	strb	r3, [r7, #2]
	              uint8_t calculated_checksum = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	72fb      	strb	r3, [r7, #11]
	              for (int i = 4; i < 4 + length; i++)
 800020e:	2304      	movs	r3, #4
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	e009      	b.n	8000228 <main+0xb8>
	                  calculated_checksum += husky_rx[i];
 8000214:	4a27      	ldr	r2, [pc, #156]	@ (80002b4 <main+0x144>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4413      	add	r3, r2
 800021a:	781a      	ldrb	r2, [r3, #0]
 800021c:	7afb      	ldrb	r3, [r7, #11]
 800021e:	4413      	add	r3, r2
 8000220:	72fb      	strb	r3, [r7, #11]
	              for (int i = 4; i < 4 + length; i++)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	3303      	adds	r3, #3
 800022c:	687a      	ldr	r2, [r7, #4]
 800022e:	429a      	cmp	r2, r3
 8000230:	ddf0      	ble.n	8000214 <main+0xa4>

	              if (calculated_checksum == expected_checksum)
 8000232:	7afa      	ldrb	r2, [r7, #11]
 8000234:	78bb      	ldrb	r3, [r7, #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d121      	bne.n	800027e <main+0x10e>
	              {
	                  // 좌표 추출
	                  corx = husky_rx[8] | (husky_rx[9] << 8);
 800023a:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <main+0x144>)
 800023c:	7a1b      	ldrb	r3, [r3, #8]
 800023e:	b21a      	sxth	r2, r3
 8000240:	4b1c      	ldr	r3, [pc, #112]	@ (80002b4 <main+0x144>)
 8000242:	7a5b      	ldrb	r3, [r3, #9]
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	b21b      	sxth	r3, r3
 8000248:	4313      	orrs	r3, r2
 800024a:	b21a      	sxth	r2, r3
 800024c:	4b1c      	ldr	r3, [pc, #112]	@ (80002c0 <main+0x150>)
 800024e:	801a      	strh	r2, [r3, #0]
	                  cory = husky_rx[10] | (husky_rx[11] << 8);
 8000250:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <main+0x144>)
 8000252:	7a9b      	ldrb	r3, [r3, #10]
 8000254:	b21a      	sxth	r2, r3
 8000256:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <main+0x144>)
 8000258:	7adb      	ldrb	r3, [r3, #11]
 800025a:	021b      	lsls	r3, r3, #8
 800025c:	b21b      	sxth	r3, r3
 800025e:	4313      	orrs	r3, r2
 8000260:	b21a      	sxth	r2, r3
 8000262:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <main+0x154>)
 8000264:	801a      	strh	r2, [r3, #0]
	                  printf("x: %d, y: %d \n", corx, cory);
 8000266:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <main+0x150>)
 8000268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800026c:	4619      	mov	r1, r3
 800026e:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <main+0x154>)
 8000270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000274:	461a      	mov	r2, r3
 8000276:	4814      	ldr	r0, [pc, #80]	@ (80002c8 <main+0x158>)
 8000278:	f004 f9d2 	bl	8004620 <iprintf>
	          {
 800027c:	e00e      	b.n	800029c <main+0x12c>
	              }
	              else
	              {
	                  printf("Checksum error \n");
 800027e:	4813      	ldr	r0, [pc, #76]	@ (80002cc <main+0x15c>)
 8000280:	f004 fa3e 	bl	8004700 <puts>
	          {
 8000284:	e00a      	b.n	800029c <main+0x12c>
	              }
	          }
	          else
	          {
	              printf("Invalid frame \n");
 8000286:	4812      	ldr	r0, [pc, #72]	@ (80002d0 <main+0x160>)
 8000288:	f004 fa3a 	bl	8004700 <puts>
 800028c:	e006      	b.n	800029c <main+0x12c>
	          }
	      }
	      else
	      {
	          printf("Failed to receive from HuskyLens \n");
 800028e:	4811      	ldr	r0, [pc, #68]	@ (80002d4 <main+0x164>)
 8000290:	f004 fa36 	bl	8004700 <puts>
 8000294:	e002      	b.n	800029c <main+0x12c>
	      }
	  }
	  else
	  {
	      printf("Failed to transmit to HuskyLens \n");
 8000296:	4810      	ldr	r0, [pc, #64]	@ (80002d8 <main+0x168>)
 8000298:	f004 fa32 	bl	8004700 <puts>
	  }

	  HAL_Delay(1000);  // 100ms 주기로 요청
 800029c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a0:	f000 fb52 	bl	8000948 <HAL_Delay>
	  if (HAL_I2C_Master_Transmit(&hi2c2, 0x32 << 1, husky_tx, sizeof(husky_tx), 100) == HAL_OK)
 80002a4:	e774      	b.n	8000190 <main+0x20>
 80002a6:	bf00      	nop
 80002a8:	0800545c 	.word	0x0800545c
 80002ac:	20000000 	.word	0x20000000
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	2000012c 	.word	0x2000012c
 80002b8:	08005470 	.word	0x08005470
 80002bc:	08005478 	.word	0x08005478
 80002c0:	20000128 	.word	0x20000128
 80002c4:	2000012a 	.word	0x2000012a
 80002c8:	08005480 	.word	0x08005480
 80002cc:	08005490 	.word	0x08005490
 80002d0:	080054a0 	.word	0x080054a0
 80002d4:	080054b0 	.word	0x080054b0
 80002d8:	080054d4 	.word	0x080054d4

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b090      	sub	sp, #64	@ 0x40
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	2228      	movs	r2, #40	@ 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f004 fae8 	bl	80048c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000302:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000306:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	2301      	movs	r3, #1
 800030e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000310:	2302      	movs	r3, #2
 8000312:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800031e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f003 fa85 	bl	8003834 <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000330:	f000 f8e0 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f003 fcf2 	bl	8003d38 <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800035a:	f000 f8cb 	bl	80004f4 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	@ 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800036e:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <MX_I2C2_Init+0x54>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000372:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000374:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <MX_I2C2_Init+0x58>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000386:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800038a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038c:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_I2C2_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <MX_I2C2_Init+0x50>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_I2C2_Init+0x50>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <MX_I2C2_Init+0x50>)
 80003a6:	f000 fe45 	bl	8001034 <HAL_I2C_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003b0:	f000 f8a0 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000008c 	.word	0x2000008c
 80003bc:	40005800 	.word	0x40005800
 80003c0:	000186a0 	.word	0x000186a0

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <MX_USART2_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_USART2_UART_Init+0x4c>)
 80003fc:	f003 fe2a 	bl	8004054 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f875 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000e0 	.word	0x200000e0
 8000414:	40004400 	.word	0x40004400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a2c      	ldr	r2, [pc, #176]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a26      	ldr	r2, [pc, #152]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2120      	movs	r1, #32
 8000490:	4815      	ldr	r0, [pc, #84]	@ (80004e8 <MX_GPIO_Init+0xd0>)
 8000492:	f000 fd95 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_GPIO_Init+0xd4>)
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4811      	ldr	r0, [pc, #68]	@ (80004f0 <MX_GPIO_Init+0xd8>)
 80004ac:	f000 fc04 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b0:	2320      	movs	r3, #32
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4808      	ldr	r0, [pc, #32]	@ (80004e8 <MX_GPIO_Init+0xd0>)
 80004c8:	f000 fbf6 	bl	8000cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2028      	movs	r0, #40	@ 0x28
 80004d2:	f000 fb34 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004d6:	2028      	movs	r0, #40	@ 0x28
 80004d8:	f000 fb4d 	bl	8000b76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	10110000 	.word	0x10110000
 80004f0:	40011000 	.word	0x40011000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1a      	ldr	r2, [pc, #104]	@ (80005e8 <HAL_I2C_MspInit+0x84>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d12c      	bne.n	80005de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a18      	ldr	r2, [pc, #96]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800059c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80005a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a2:	2312      	movs	r3, #18
 80005a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <HAL_I2C_MspInit+0x8c>)
 80005b2:	f000 fb81 	bl	8000cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005b6:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	61d3      	str	r3, [r2, #28]
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <HAL_I2C_MspInit+0x88>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2021      	movs	r0, #33	@ 0x21
 80005d4:	f000 fab3 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80005d8:	2021      	movs	r0, #33	@ 0x21
 80005da:	f000 facc 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40005800 	.word	0x40005800
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <HAL_UART_MspInit+0x70>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d123      	bne.n	800065c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <HAL_UART_MspInit+0x74>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <HAL_UART_MspInit+0x74>)
 800061a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061e:	61d3      	str	r3, [r2, #28]
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <HAL_UART_MspInit+0x74>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <HAL_UART_MspInit+0x74>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <HAL_UART_MspInit+0x74>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <HAL_UART_MspInit+0x74>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000644:	230c      	movs	r3, #12
 8000646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <HAL_UART_MspInit+0x78>)
 8000658:	f000 fb2e 	bl	8000cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40004400 	.word	0x40004400
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <NMI_Handler+0x4>

08000678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <MemManage_Handler+0x4>

08000688 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <UsageFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f926 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80006cc:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <I2C2_EV_IRQHandler+0x10>)
 80006ce:	f001 f973 	bl	80019b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006e4:	f000 fc84 	bl	8000ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e00a      	b.n	8000714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fe:	f3af 8000 	nop.w
 8000702:	4601      	mov	r1, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf0      	blt.n	80006fe <_read+0x12>
  }

  return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e009      	b.n	800074c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd03 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbf1      	blt.n	8000738 <_write+0x12>
  }
  return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_close>:

int _close(int file)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000784:	605a      	str	r2, [r3, #4]
  return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <_isatty>:

int _isatty(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
	...

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	@ (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f004 f8b4 	bl	800495c <__errno>
 80007f4:	4603      	mov	r3, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <_sbrk+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20005000 	.word	0x20005000
 8000820:	00000400 	.word	0x00000400
 8000824:	2000014c 	.word	0x2000014c
 8000828:	200002a0 	.word	0x200002a0

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff fff8 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480b      	ldr	r0, [pc, #44]	@ (800086c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800083e:	490c      	ldr	r1, [pc, #48]	@ (8000870 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000840:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000854:	4c09      	ldr	r4, [pc, #36]	@ (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f004 f881 	bl	8004968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fc83 	bl	8000170 <main>
  bx lr
 800086a:	4770      	bx	lr
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000874:	08005560 	.word	0x08005560
  ldr r2, =_sbss
 8000878:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800087c:	200002a0 	.word	0x200002a0

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f947 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fe2e 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f95f 	bl	8000b92 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f927 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000008 	.word	0x20000008
 8000908:	20000010 	.word	0x20000010
 800090c:	2000000c 	.word	0x2000000c

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	@ (8000930 <HAL_IncTick+0x20>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000010 	.word	0x20000010
 8000930:	20000150 	.word	0x20000150

08000934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	@ (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000150 	.word	0x20000150

08000948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff fff0 	bl	8000934 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffe0 	bl	8000934 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000010 	.word	0x20000010

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4906      	ldr	r1, [pc, #24]	@ (8000a28 <__NVIC_EnableIRQ+0x34>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	@ (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	@ (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	@ 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	@ 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff2d 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff42 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff35 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d005      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e051      	b.n	8000c74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 020e 	bic.w	r2, r2, #14
 8000bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0201 	bic.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <HAL_DMA_Abort_IT+0xd4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d029      	beq.n	8000c4e <HAL_DMA_Abort_IT+0xa2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a21      	ldr	r2, [pc, #132]	@ (8000c84 <HAL_DMA_Abort_IT+0xd8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d022      	beq.n	8000c4a <HAL_DMA_Abort_IT+0x9e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1f      	ldr	r2, [pc, #124]	@ (8000c88 <HAL_DMA_Abort_IT+0xdc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d01a      	beq.n	8000c44 <HAL_DMA_Abort_IT+0x98>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <HAL_DMA_Abort_IT+0xe0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d012      	beq.n	8000c3e <HAL_DMA_Abort_IT+0x92>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <HAL_DMA_Abort_IT+0xe4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00a      	beq.n	8000c38 <HAL_DMA_Abort_IT+0x8c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_DMA_Abort_IT+0xe8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d102      	bne.n	8000c32 <HAL_DMA_Abort_IT+0x86>
 8000c2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c30:	e00e      	b.n	8000c50 <HAL_DMA_Abort_IT+0xa4>
 8000c32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c36:	e00b      	b.n	8000c50 <HAL_DMA_Abort_IT+0xa4>
 8000c38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c3c:	e008      	b.n	8000c50 <HAL_DMA_Abort_IT+0xa4>
 8000c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c42:	e005      	b.n	8000c50 <HAL_DMA_Abort_IT+0xa4>
 8000c44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c48:	e002      	b.n	8000c50 <HAL_DMA_Abort_IT+0xa4>
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	e000      	b.n	8000c50 <HAL_DMA_Abort_IT+0xa4>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4a11      	ldr	r2, [pc, #68]	@ (8000c98 <HAL_DMA_Abort_IT+0xec>)
 8000c52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	4798      	blx	r3
    } 
  }
  return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40020008 	.word	0x40020008
 8000c84:	4002001c 	.word	0x4002001c
 8000c88:	40020030 	.word	0x40020030
 8000c8c:	40020044 	.word	0x40020044
 8000c90:	40020058 	.word	0x40020058
 8000c94:	4002006c 	.word	0x4002006c
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b08b      	sub	sp, #44	@ 0x2c
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e169      	b.n	8000fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8158 	bne.w	8000f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a9a      	ldr	r2, [pc, #616]	@ (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d05e      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a98      	ldr	r2, [pc, #608]	@ (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d875      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000cfa:	4a98      	ldr	r2, [pc, #608]	@ (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d058      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d00:	4a96      	ldr	r2, [pc, #600]	@ (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d86f      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d06:	4a96      	ldr	r2, [pc, #600]	@ (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d052      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d0c:	4a94      	ldr	r2, [pc, #592]	@ (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d869      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d12:	4a94      	ldr	r2, [pc, #592]	@ (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d04c      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d18:	4a92      	ldr	r2, [pc, #584]	@ (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d863      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d1e:	4a92      	ldr	r2, [pc, #584]	@ (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d046      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d24:	4a90      	ldr	r2, [pc, #576]	@ (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d85d      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d82a      	bhi.n	8000d84 <HAL_GPIO_Init+0xcc>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d859      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d32:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <HAL_GPIO_Init+0x80>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000db3 	.word	0x08000db3
 8000d3c:	08000d8d 	.word	0x08000d8d
 8000d40:	08000d9f 	.word	0x08000d9f
 8000d44:	08000de1 	.word	0x08000de1
 8000d48:	08000de7 	.word	0x08000de7
 8000d4c:	08000de7 	.word	0x08000de7
 8000d50:	08000de7 	.word	0x08000de7
 8000d54:	08000de7 	.word	0x08000de7
 8000d58:	08000de7 	.word	0x08000de7
 8000d5c:	08000de7 	.word	0x08000de7
 8000d60:	08000de7 	.word	0x08000de7
 8000d64:	08000de7 	.word	0x08000de7
 8000d68:	08000de7 	.word	0x08000de7
 8000d6c:	08000de7 	.word	0x08000de7
 8000d70:	08000de7 	.word	0x08000de7
 8000d74:	08000de7 	.word	0x08000de7
 8000d78:	08000de7 	.word	0x08000de7
 8000d7c:	08000d95 	.word	0x08000d95
 8000d80:	08000da9 	.word	0x08000da9
 8000d84:	4a79      	ldr	r2, [pc, #484]	@ (8000f6c <HAL_GPIO_Init+0x2b4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8a:	e02c      	b.n	8000de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e029      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e024      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e01f      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e01a      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e013      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	611a      	str	r2, [r3, #16]
          break;
 8000dd2:	e009      	b.n	8000de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	615a      	str	r2, [r3, #20]
          break;
 8000dde:	e003      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          break;
 8000de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2bff      	cmp	r3, #255	@ 0xff
 8000dec:	d801      	bhi.n	8000df2 <HAL_GPIO_Init+0x13a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e001      	b.n	8000df6 <HAL_GPIO_Init+0x13e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3304      	adds	r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2bff      	cmp	r3, #255	@ 0xff
 8000dfc:	d802      	bhi.n	8000e04 <HAL_GPIO_Init+0x14c>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0x152>
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	3b08      	subs	r3, #8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	210f      	movs	r1, #15
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	6a39      	ldr	r1, [r7, #32]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	431a      	orrs	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 80b1 	beq.w	8000f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e38:	4b4d      	ldr	r3, [pc, #308]	@ (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e50:	4a48      	ldr	r2, [pc, #288]	@ (8000f74 <HAL_GPIO_Init+0x2bc>)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a40      	ldr	r2, [pc, #256]	@ (8000f78 <HAL_GPIO_Init+0x2c0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x1ec>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f7c <HAL_GPIO_Init+0x2c4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <HAL_GPIO_Init+0x2c8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1e4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <HAL_GPIO_Init+0x2cc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1e0>
 8000e94:	2303      	movs	r3, #3
 8000e96:	e006      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e98:	2304      	movs	r3, #4
 8000e9a:	e004      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e002      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb6:	492f      	ldr	r1, [pc, #188]	@ (8000f74 <HAL_GPIO_Init+0x2bc>)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	492c      	ldr	r1, [pc, #176]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	608b      	str	r3, [r1, #8]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4928      	ldr	r1, [pc, #160]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	4922      	ldr	r1, [pc, #136]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60cb      	str	r3, [r1, #12]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	491e      	ldr	r1, [pc, #120]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4918      	ldr	r1, [pc, #96]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4914      	ldr	r1, [pc, #80]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d021      	beq.n	8000f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f48:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	490e      	ldr	r1, [pc, #56]	@ (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	e021      	b.n	8000f9a <HAL_GPIO_Init+0x2e2>
 8000f56:	bf00      	nop
 8000f58:	10320000 	.word	0x10320000
 8000f5c:	10310000 	.word	0x10310000
 8000f60:	10220000 	.word	0x10220000
 8000f64:	10210000 	.word	0x10210000
 8000f68:	10120000 	.word	0x10120000
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40011400 	.word	0x40011400
 8000f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_GPIO_Init+0x304>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4909      	ldr	r1, [pc, #36]	@ (8000fbc <HAL_GPIO_Init+0x304>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f47f ae8e 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	372c      	adds	r7, #44	@ 0x2c
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd0:	787b      	ldrb	r3, [r7, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	611a      	str	r2, [r3, #16]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f806 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e12b      	b.n	800129e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fa82 	bl	8000564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2224      	movs	r2, #36	@ 0x24
 8001064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001098:	f002 ff96 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	4a81      	ldr	r2, [pc, #516]	@ (80012a8 <HAL_I2C_Init+0x274>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d807      	bhi.n	80010b8 <HAL_I2C_Init+0x84>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a80      	ldr	r2, [pc, #512]	@ (80012ac <HAL_I2C_Init+0x278>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	bf94      	ite	ls
 80010b0:	2301      	movls	r3, #1
 80010b2:	2300      	movhi	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	e006      	b.n	80010c6 <HAL_I2C_Init+0x92>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a7d      	ldr	r2, [pc, #500]	@ (80012b0 <HAL_I2C_Init+0x27c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	bf94      	ite	ls
 80010c0:	2301      	movls	r3, #1
 80010c2:	2300      	movhi	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e0e7      	b.n	800129e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4a78      	ldr	r2, [pc, #480]	@ (80012b4 <HAL_I2C_Init+0x280>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0c9b      	lsrs	r3, r3, #18
 80010d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a6a      	ldr	r2, [pc, #424]	@ (80012a8 <HAL_I2C_Init+0x274>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d802      	bhi.n	8001108 <HAL_I2C_Init+0xd4>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	e009      	b.n	800111c <HAL_I2C_Init+0xe8>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	4a69      	ldr	r2, [pc, #420]	@ (80012b8 <HAL_I2C_Init+0x284>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	099b      	lsrs	r3, r3, #6
 800111a:	3301      	adds	r3, #1
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	430b      	orrs	r3, r1
 8001122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800112e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	495c      	ldr	r1, [pc, #368]	@ (80012a8 <HAL_I2C_Init+0x274>)
 8001138:	428b      	cmp	r3, r1
 800113a:	d819      	bhi.n	8001170 <HAL_I2C_Init+0x13c>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1e59      	subs	r1, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fbb1 f3f3 	udiv	r3, r1, r3
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001150:	400b      	ands	r3, r1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00a      	beq.n	800116c <HAL_I2C_Init+0x138>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1e59      	subs	r1, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fbb1 f3f3 	udiv	r3, r1, r3
 8001164:	3301      	adds	r3, #1
 8001166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116a:	e051      	b.n	8001210 <HAL_I2C_Init+0x1dc>
 800116c:	2304      	movs	r3, #4
 800116e:	e04f      	b.n	8001210 <HAL_I2C_Init+0x1dc>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d111      	bne.n	800119c <HAL_I2C_Init+0x168>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	1e58      	subs	r0, r3, #1
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6859      	ldr	r1, [r3, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	440b      	add	r3, r1
 8001186:	fbb0 f3f3 	udiv	r3, r0, r3
 800118a:	3301      	adds	r3, #1
 800118c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	e012      	b.n	80011c2 <HAL_I2C_Init+0x18e>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1e58      	subs	r0, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6859      	ldr	r1, [r3, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	0099      	lsls	r1, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf0c      	ite	eq
 80011bc:	2301      	moveq	r3, #1
 80011be:	2300      	movne	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Init+0x196>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e022      	b.n	8001210 <HAL_I2C_Init+0x1dc>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10e      	bne.n	80011f0 <HAL_I2C_Init+0x1bc>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1e58      	subs	r0, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6859      	ldr	r1, [r3, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	440b      	add	r3, r1
 80011e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ee:	e00f      	b.n	8001210 <HAL_I2C_Init+0x1dc>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1e58      	subs	r0, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	0099      	lsls	r1, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	fbb0 f3f3 	udiv	r3, r0, r3
 8001206:	3301      	adds	r3, #1
 8001208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	6809      	ldr	r1, [r1, #0]
 8001214:	4313      	orrs	r3, r2
 8001216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69da      	ldr	r2, [r3, #28]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800123e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6911      	ldr	r1, [r2, #16]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68d2      	ldr	r2, [r2, #12]
 800124a:	4311      	orrs	r1, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0201 	orr.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2220      	movs	r2, #32
 800128a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	000186a0 	.word	0x000186a0
 80012ac:	001e847f 	.word	0x001e847f
 80012b0:	003d08ff 	.word	0x003d08ff
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	10624dd3 	.word	0x10624dd3

080012bc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ce:	2b80      	cmp	r3, #128	@ 0x80
 80012d0:	d103      	bne.n	80012da <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	461a      	mov	r2, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	817b      	strh	r3, [r7, #10]
 80012f4:	4613      	mov	r3, r2
 80012f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff fb1c 	bl	8000934 <HAL_GetTick>
 80012fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b20      	cmp	r3, #32
 8001308:	f040 80e0 	bne.w	80014cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2319      	movs	r3, #25
 8001312:	2201      	movs	r2, #1
 8001314:	4970      	ldr	r1, [pc, #448]	@ (80014d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f002 f80a 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001322:	2302      	movs	r3, #2
 8001324:	e0d3      	b.n	80014ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_I2C_Master_Transmit+0x50>
 8001330:	2302      	movs	r3, #2
 8001332:	e0cc      	b.n	80014ce <HAL_I2C_Master_Transmit+0x1ea>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b01      	cmp	r3, #1
 8001348:	d007      	beq.n	800135a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2221      	movs	r2, #33	@ 0x21
 800136e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2210      	movs	r2, #16
 8001376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	893a      	ldrh	r2, [r7, #8]
 800138a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4a50      	ldr	r2, [pc, #320]	@ (80014dc <HAL_I2C_Master_Transmit+0x1f8>)
 800139a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800139c:	8979      	ldrh	r1, [r7, #10]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	6a3a      	ldr	r2, [r7, #32]
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f001 fdcc 	bl	8002f40 <I2C_MasterRequestWrite>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e08d      	b.n	80014ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013c8:	e066      	b.n	8001498 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	6a39      	ldr	r1, [r7, #32]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f002 f8c8 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d107      	bne.n	80013f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e06b      	b.n	80014ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141e:	3b01      	subs	r3, #1
 8001420:	b29a      	uxth	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b04      	cmp	r3, #4
 8001432:	d11b      	bne.n	800146c <HAL_I2C_Master_Transmit+0x188>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d017      	beq.n	800146c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001456:	b29b      	uxth	r3, r3
 8001458:	3b01      	subs	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001464:	3b01      	subs	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	6a39      	ldr	r1, [r7, #32]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f002 f8bf 	bl	80035f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00d      	beq.n	8001498 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	2b04      	cmp	r3, #4
 8001482:	d107      	bne.n	8001494 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001492:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e01a      	b.n	80014ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800149c:	2b00      	cmp	r3, #0
 800149e:	d194      	bne.n	80013ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2220      	movs	r2, #32
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e000      	b.n	80014ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014cc:	2302      	movs	r3, #2
  }
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	00100002 	.word	0x00100002
 80014dc:	ffff0000 	.word	0xffff0000

080014e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	461a      	mov	r2, r3
 80014ec:	460b      	mov	r3, r1
 80014ee:	817b      	strh	r3, [r7, #10]
 80014f0:	4613      	mov	r3, r2
 80014f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff fa1c 	bl	8000934 <HAL_GetTick>
 80014fc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	f040 824b 	bne.w	80019a2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2319      	movs	r3, #25
 8001512:	2201      	movs	r2, #1
 8001514:	497f      	ldr	r1, [pc, #508]	@ (8001714 <HAL_I2C_Master_Receive+0x234>)
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f001 ff0a 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001522:	2302      	movs	r3, #2
 8001524:	e23e      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_I2C_Master_Receive+0x54>
 8001530:	2302      	movs	r3, #2
 8001532:	e237      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d007      	beq.n	800155a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2222      	movs	r2, #34	@ 0x22
 800156e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2210      	movs	r2, #16
 8001576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	893a      	ldrh	r2, [r7, #8]
 800158a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4a5f      	ldr	r2, [pc, #380]	@ (8001718 <HAL_I2C_Master_Receive+0x238>)
 800159a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800159c:	8979      	ldrh	r1, [r7, #10]
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f001 fd4e 	bl	8003044 <I2C_MasterRequestRead>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1f8      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d113      	bne.n	80015e2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e1cc      	b.n	800197c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d11e      	bne.n	8001628 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015fa:	b672      	cpsid	i
}
 80015fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001622:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001624:	b662      	cpsie	i
}
 8001626:	e035      	b.n	8001694 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800162c:	2b02      	cmp	r3, #2
 800162e:	d11e      	bne.n	800166e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800163e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800166a:	b662      	cpsie	i
}
 800166c:	e012      	b.n	8001694 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800167c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001694:	e172      	b.n	800197c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169a:	2b03      	cmp	r3, #3
 800169c:	f200 811f 	bhi.w	80018de <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d123      	bne.n	80016f0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f002 f81b 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e173      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80016ee:	e145      	b.n	800197c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d152      	bne.n	800179e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fe:	2200      	movs	r2, #0
 8001700:	4906      	ldr	r1, [pc, #24]	@ (800171c <HAL_I2C_Master_Receive+0x23c>)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f001 fe14 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e148      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
 8001712:	bf00      	nop
 8001714:	00100002 	.word	0x00100002
 8001718:	ffff0000 	.word	0xffff0000
 800171c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001766:	b662      	cpsie	i
}
 8001768:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	3b01      	subs	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800179c:	e0ee      	b.n	800197c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a4:	2200      	movs	r2, #0
 80017a6:	4981      	ldr	r1, [pc, #516]	@ (80019ac <HAL_I2C_Master_Receive+0x4cc>)
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f001 fdc1 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0f5      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017fe:	4b6c      	ldr	r3, [pc, #432]	@ (80019b0 <HAL_I2C_Master_Receive+0x4d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	4a6b      	ldr	r2, [pc, #428]	@ (80019b4 <HAL_I2C_Master_Receive+0x4d4>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a1a      	lsrs	r2, r3, #8
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00da      	lsls	r2, r3, #3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	3b01      	subs	r3, #1
 800181c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001846:	b662      	cpsie	i
}
 8001848:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0a6      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d1d9      	bne.n	8001818 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018a6:	b662      	cpsie	i
}
 80018a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018dc:	e04e      	b.n	800197c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f001 ff00 	bl	80036e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e058      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b04      	cmp	r3, #4
 8001930:	d124      	bne.n	800197c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001948:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f ae88 	bne.w	8001696 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	00010004 	.word	0x00010004
 80019b0:	20000008 	.word	0x20000008
 80019b4:	14f8b589 	.word	0x14f8b589

080019b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d003      	beq.n	80019f0 <HAL_I2C_EV_IRQHandler+0x38>
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b40      	cmp	r3, #64	@ 0x40
 80019ec:	f040 80b1 	bne.w	8001b52 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_I2C_EV_IRQHandler+0x6e>
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001a10:	d003      	beq.n	8001a1a <HAL_I2C_EV_IRQHandler+0x62>
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_EV_IRQHandler+0x66>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_I2C_EV_IRQHandler+0x68>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f000 8114 	beq.w	8001c4e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_I2C_EV_IRQHandler+0x90>
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f001 fedf 	bl	80037fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fccd 	bl	80023e0 <I2C_Master_SB>
 8001a46:	e083      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_I2C_EV_IRQHandler+0xac>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fd44 	bl	80024ea <I2C_Master_ADD10>
 8001a62:	e075      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_I2C_EV_IRQHandler+0xc8>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fd5f 	bl	800253c <I2C_Master_ADDR>
 8001a7e:	e067      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d036      	beq.n	8001af8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a98:	f000 80db 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x10a>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x10a>
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f92d 	bl	8001d1a <I2C_MasterTransmit_TXE>
 8001ac0:	e046      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80c2 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80bc 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ada:	7bbb      	ldrb	r3, [r7, #14]
 8001adc:	2b21      	cmp	r3, #33	@ 0x21
 8001ade:	d103      	bne.n	8001ae8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f9b6 	bl	8001e52 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae6:	e0b4      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b40      	cmp	r3, #64	@ 0x40
 8001aec:	f040 80b1 	bne.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fa24 	bl	8001f3e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af6:	e0ac      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b06:	f000 80a4 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x178>
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x178>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 faa0 	bl	800206e <I2C_MasterReceive_RXNE>
 8001b2e:	e00f      	b.n	8001b50 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 808b 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8085 	beq.w	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fb58 	bl	80021fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b4e:	e080      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
 8001b50:	e07f      	b.n	8001c52 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e007      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d011      	beq.n	8001ba2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 ff25 	bl	80029ea <I2C_Slave_ADDR>
 8001ba0:	e05a      	b.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_I2C_EV_IRQHandler+0x206>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 ff60 	bl	8002a7c <I2C_Slave_STOPF>
 8001bbc:	e04c      	b.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	2b21      	cmp	r3, #33	@ 0x21
 8001bc2:	d002      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x212>
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	2b29      	cmp	r3, #41	@ 0x29
 8001bc8:	d120      	bne.n	8001c0c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_I2C_EV_IRQHandler+0x238>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_I2C_EV_IRQHandler+0x238>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d103      	bne.n	8001bf0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fe42 	bl	8002872 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bee:	e032      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d02d      	beq.n	8001c56 <HAL_I2C_EV_IRQHandler+0x29e>
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d028      	beq.n	8001c56 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fe71 	bl	80028ec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c0a:	e024      	b.n	8001c56 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x27a>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_I2C_EV_IRQHandler+0x27a>
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fe7e 	bl	800292c <I2C_SlaveReceive_RXNE>
 8001c30:	e012      	b.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 feae 	bl	80029a8 <I2C_SlaveReceive_BTF>
 8001c4c:	e004      	b.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001c4e:	bf00      	nop
 8001c50:	e002      	b.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c52:	bf00      	nop
 8001c54:	e000      	b.n	8001c58 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d30:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d150      	bne.n	8001de2 <I2C_MasterTransmit_TXE+0xc8>
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b21      	cmp	r3, #33	@ 0x21
 8001d44:	d14d      	bne.n	8001de2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d01d      	beq.n	8001d88 <I2C_MasterTransmit_TXE+0x6e>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d01a      	beq.n	8001d88 <I2C_MasterTransmit_TXE+0x6e>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d58:	d016      	beq.n	8001d88 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d68:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2211      	movs	r2, #17
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff6c 	bl	8001c5e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d86:	e060      	b.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d96:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001da6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b40      	cmp	r3, #64	@ 0x40
 8001dc0:	d107      	bne.n	8001dd2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff81 	bl	8001cd2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dd0:	e03b      	b.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff3f 	bl	8001c5e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001de0:	e033      	b.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	2b21      	cmp	r3, #33	@ 0x21
 8001de6:	d005      	beq.n	8001df4 <I2C_MasterTransmit_TXE+0xda>
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	2b40      	cmp	r3, #64	@ 0x40
 8001dec:	d12d      	bne.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b22      	cmp	r3, #34	@ 0x22
 8001df2:	d12a      	bne.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e0c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e0e:	e01c      	b.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b40      	cmp	r3, #64	@ 0x40
 8001e1a:	d103      	bne.n	8001e24 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f88e 	bl	8001f3e <I2C_MemoryTransmit_TXE_BTF>
}
 8001e22:	e012      	b.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001e48:	e7ff      	b.n	8001e4a <I2C_MasterTransmit_TXE+0x130>
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b21      	cmp	r3, #33	@ 0x21
 8001e6a:	d164      	bne.n	8001f36 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e9a:	e04c      	b.n	8001f36 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d01d      	beq.n	8001ede <I2C_MasterTransmit_BTF+0x8c>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d01a      	beq.n	8001ede <I2C_MasterTransmit_BTF+0x8c>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eae:	d016      	beq.n	8001ede <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ebe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2211      	movs	r2, #17
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fec1 	bl	8001c5e <HAL_I2C_MasterTxCpltCallback>
}
 8001edc:	e02b      	b.n	8001f36 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001eec:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	d107      	bne.n	8001f28 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fed6 	bl	8001cd2 <HAL_I2C_MemTxCpltCallback>
}
 8001f26:	e006      	b.n	8001f36 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fe94 	bl	8001c5e <HAL_I2C_MasterTxCpltCallback>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11d      	bne.n	8001f92 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10b      	bne.n	8001f76 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6e:	1c9a      	adds	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001f74:	e077      	b.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	121b      	asrs	r3, r3, #8
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f90:	e069      	b.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10b      	bne.n	8001fb2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fb0:	e059      	b.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d152      	bne.n	8002060 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b22      	cmp	r3, #34	@ 0x22
 8001fbe:	d10d      	bne.n	8001fdc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fce:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fda:	e044      	b.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d015      	beq.n	8002012 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b21      	cmp	r3, #33	@ 0x21
 8001fea:	d112      	bne.n	8002012 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002010:	e029      	b.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d124      	bne.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b21      	cmp	r3, #33	@ 0x21
 8002020:	d121      	bne.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002030:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002040:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fe3a 	bl	8001cd2 <HAL_I2C_MemTxCpltCallback>
}
 800205e:	e002      	b.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff f92b 	bl	80012bc <I2C_Flush_DR>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b22      	cmp	r3, #34	@ 0x22
 8002080:	f040 80b9 	bne.w	80021f6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d921      	bls.n	80020dc <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	f040 8096 	bne.w	80021f6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020d8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80020da:	e08c      	b.n	80021f6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d07f      	beq.n	80021e4 <I2C_MasterReceive_RXNE+0x176>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d002      	beq.n	80020f0 <I2C_MasterReceive_RXNE+0x82>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d179      	bne.n	80021e4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f001 fac7 	bl	8003684 <I2C_WaitOnSTOPRequestThroughIT>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d14c      	bne.n	8002196 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800210a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800211a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b40      	cmp	r3, #64	@ 0x40
 8002154:	d10a      	bne.n	800216c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fdbd 	bl	8001ce4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800216a:	e044      	b.n	80021f6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b08      	cmp	r3, #8
 8002178:	d002      	beq.n	8002180 <I2C_MasterReceive_RXNE+0x112>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b20      	cmp	r3, #32
 800217e:	d103      	bne.n	8002188 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	@ 0x30
 8002186:	e002      	b.n	800218e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2212      	movs	r2, #18
 800218c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fd6e 	bl	8001c70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002194:	e02f      	b.n	80021f6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fd8a 	bl	8001cf6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021e2:	e008      	b.n	80021f6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f2:	605a      	str	r2, [r3, #4]
}
 80021f4:	e7ff      	b.n	80021f6 <I2C_MasterReceive_RXNE+0x188>
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b04      	cmp	r3, #4
 8002214:	d11b      	bne.n	800224e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002224:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800224c:	e0c4      	b.n	80023d8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d129      	bne.n	80022ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002266:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d00a      	beq.n	8002284 <I2C_MasterReceive_BTF+0x86>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d007      	beq.n	8002284 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002282:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80022aa:	e095      	b.n	80023d8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d17d      	bne.n	80023b2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d002      	beq.n	80022c2 <I2C_MasterReceive_BTF+0xc4>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d108      	bne.n	80022d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e016      	b.n	8002302 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <I2C_MasterReceive_BTF+0xe2>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d108      	bne.n	80022f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e007      	b.n	8002302 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002300:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800235c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b40      	cmp	r3, #64	@ 0x40
 8002370:	d10a      	bne.n	8002388 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fcaf 	bl	8001ce4 <HAL_I2C_MemRxCpltCallback>
}
 8002386:	e027      	b.n	80023d8 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b08      	cmp	r3, #8
 8002394:	d002      	beq.n	800239c <I2C_MasterReceive_BTF+0x19e>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b20      	cmp	r3, #32
 800239a:	d103      	bne.n	80023a4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a2:	e002      	b.n	80023aa <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2212      	movs	r2, #18
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fc60 	bl	8001c70 <HAL_I2C_MasterRxCpltCallback>
}
 80023b0:	e012      	b.n	80023d8 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d117      	bne.n	8002424 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800240c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800240e:	e067      	b.n	80024e0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	611a      	str	r2, [r3, #16]
}
 8002422:	e05d      	b.n	80024e0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800242c:	d133      	bne.n	8002496 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b21      	cmp	r3, #33	@ 0x21
 8002438:	d109      	bne.n	800244e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800244a:	611a      	str	r2, [r3, #16]
 800244c:	e008      	b.n	8002460 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002464:	2b00      	cmp	r3, #0
 8002466:	d004      	beq.n	8002472 <I2C_Master_SB+0x92>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	2b00      	cmp	r3, #0
 8002478:	d032      	beq.n	80024e0 <I2C_Master_SB+0x100>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02d      	beq.n	80024e0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002492:	605a      	str	r2, [r3, #4]
}
 8002494:	e024      	b.n	80024e0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10e      	bne.n	80024bc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	11db      	asrs	r3, r3, #7
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 0306 	and.w	r3, r3, #6
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f063 030f 	orn	r3, r3, #15
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	611a      	str	r2, [r3, #16]
}
 80024ba:	e011      	b.n	80024e0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	11db      	asrs	r3, r3, #7
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0306 	and.w	r3, r3, #6
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f063 030e 	orn	r3, r3, #14
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <I2C_Master_ADD10+0x26>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00c      	beq.n	8002532 <I2C_Master_ADD10+0x48>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002530:	605a      	str	r2, [r3, #4]
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800253c:	b480      	push	{r7}
 800253e:	b091      	sub	sp, #68	@ 0x44
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800254a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b22      	cmp	r3, #34	@ 0x22
 8002564:	f040 8174 	bne.w	8002850 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <I2C_Master_ADDR+0x54>
 8002570:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002574:	2b40      	cmp	r3, #64	@ 0x40
 8002576:	d10b      	bne.n	8002590 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	@ 0x30
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	633b      	str	r3, [r7, #48]	@ 0x30
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	e16b      	b.n	8002868 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11d      	bne.n	80025d4 <I2C_Master_ADDR+0x98>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80025a0:	d118      	bne.n	80025d4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	2300      	movs	r3, #0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80025d2:	e149      	b.n	8002868 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d113      	bne.n	8002606 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e120      	b.n	8002848 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 808a 	bne.w	8002726 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002614:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002618:	d137      	bne.n	800268a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002628:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002638:	d113      	bne.n	8002662 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	e0f2      	b.n	8002848 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e0de      	b.n	8002848 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800268a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268c:	2b08      	cmp	r3, #8
 800268e:	d02e      	beq.n	80026ee <I2C_Master_ADDR+0x1b2>
 8002690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002692:	2b20      	cmp	r3, #32
 8002694:	d02b      	beq.n	80026ee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002698:	2b12      	cmp	r3, #18
 800269a:	d102      	bne.n	80026a2 <I2C_Master_ADDR+0x166>
 800269c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d125      	bne.n	80026ee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00e      	beq.n	80026c6 <I2C_Master_ADDR+0x18a>
 80026a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d00b      	beq.n	80026c6 <I2C_Master_ADDR+0x18a>
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d008      	beq.n	80026c6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e007      	b.n	80026d6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	e0ac      	b.n	8002848 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e090      	b.n	8002848 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d158      	bne.n	80027e2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002732:	2b04      	cmp	r3, #4
 8002734:	d021      	beq.n	800277a <I2C_Master_ADDR+0x23e>
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	2b02      	cmp	r3, #2
 800273a:	d01e      	beq.n	800277a <I2C_Master_ADDR+0x23e>
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b10      	cmp	r3, #16
 8002740:	d01b      	beq.n	800277a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002750:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e012      	b.n	80027a0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002788:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027ae:	d14b      	bne.n	8002848 <I2C_Master_ADDR+0x30c>
 80027b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027b6:	d00b      	beq.n	80027d0 <I2C_Master_ADDR+0x294>
 80027b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d008      	beq.n	80027d0 <I2C_Master_ADDR+0x294>
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d005      	beq.n	80027d0 <I2C_Master_ADDR+0x294>
 80027c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d002      	beq.n	80027d0 <I2C_Master_ADDR+0x294>
 80027ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d13b      	bne.n	8002848 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	e032      	b.n	8002848 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002800:	d117      	bne.n	8002832 <I2C_Master_ADDR+0x2f6>
 8002802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002804:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002808:	d00b      	beq.n	8002822 <I2C_Master_ADDR+0x2e6>
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	2b01      	cmp	r3, #1
 800280e:	d008      	beq.n	8002822 <I2C_Master_ADDR+0x2e6>
 8002810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002812:	2b08      	cmp	r3, #8
 8002814:	d005      	beq.n	8002822 <I2C_Master_ADDR+0x2e6>
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	2b10      	cmp	r3, #16
 800281a:	d002      	beq.n	8002822 <I2C_Master_ADDR+0x2e6>
 800281c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281e:	2b20      	cmp	r3, #32
 8002820:	d107      	bne.n	8002832 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002830:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800284e:	e00b      	b.n	8002868 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
}
 8002866:	e7ff      	b.n	8002868 <I2C_Master_ADDR+0x32c>
 8002868:	bf00      	nop
 800286a:	3744      	adds	r7, #68	@ 0x44
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002880:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02b      	beq.n	80028e4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d114      	bne.n	80028e4 <I2C_SlaveTransmit_TXE+0x72>
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b29      	cmp	r3, #41	@ 0x29
 80028be:	d111      	bne.n	80028e4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2221      	movs	r2, #33	@ 0x21
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2228      	movs	r2, #40	@ 0x28
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff f9cf 	bl	8001c82 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02c      	beq.n	80029a0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d114      	bne.n	80029a0 <I2C_SlaveReceive_RXNE+0x74>
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b2a      	cmp	r3, #42	@ 0x2a
 800297a:	d111      	bne.n	80029a0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800298a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2222      	movs	r2, #34	@ 0x22
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2228      	movs	r2, #40	@ 0x28
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff f97a 	bl	8001c94 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a04:	2b28      	cmp	r3, #40	@ 0x28
 8002a06:	d125      	bne.n	8002a54 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a16:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	81bb      	strh	r3, [r7, #12]
 8002a36:	e002      	b.n	8002a3e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a46:	89ba      	ldrh	r2, [r7, #12]
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff f92a 	bl	8001ca6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a52:	e00e      	b.n	8002a72 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad8:	d172      	bne.n	8002bc0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b22      	cmp	r3, #34	@ 0x22
 8002ade:	d002      	beq.n	8002ae6 <I2C_Slave_STOPF+0x6a>
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ae4:	d135      	bne.n	8002b52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f8bc 	bl	8000c9c <HAL_DMA_GetState>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d049      	beq.n	8002bbe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2e:	4a69      	ldr	r2, [pc, #420]	@ (8002cd4 <I2C_Slave_STOPF+0x258>)
 8002b30:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f838 	bl	8000bac <HAL_DMA_Abort_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03d      	beq.n	8002bbe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b50:	e035      	b.n	8002bbe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f043 0204 	orr.w	r2, r3, #4
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe f886 	bl	8000c9c <HAL_DMA_GetState>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d014      	beq.n	8002bc0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd4 <I2C_Slave_STOPF+0x258>)
 8002b9c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f802 	bl	8000bac <HAL_DMA_Abort_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4798      	blx	r3
 8002bbc:	e000      	b.n	8002bc0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bbe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03e      	beq.n	8002c48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d112      	bne.n	8002bfe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c08:	2b40      	cmp	r3, #64	@ 0x40
 8002c0a:	d112      	bne.n	8002c32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f843 	bl	8002cdc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c56:	e039      	b.n	8002ccc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c5c:	d109      	bne.n	8002c72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2228      	movs	r2, #40	@ 0x28
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff f811 	bl	8001c94 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b28      	cmp	r3, #40	@ 0x28
 8002c7c:	d111      	bne.n	8002ca2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a15      	ldr	r2, [pc, #84]	@ (8002cd8 <I2C_Slave_STOPF+0x25c>)
 8002c82:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff f810 	bl	8001cc0 <HAL_I2C_ListenCpltCallback>
}
 8002ca0:	e014      	b.n	8002ccc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	2b22      	cmp	r3, #34	@ 0x22
 8002ca8:	d002      	beq.n	8002cb0 <I2C_Slave_STOPF+0x234>
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b22      	cmp	r3, #34	@ 0x22
 8002cae:	d10d      	bne.n	8002ccc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe ffe4 	bl	8001c94 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	080031e1 	.word	0x080031e1
 8002cd8:	ffff0000 	.word	0xffff0000

08002cdc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cf4:	7bbb      	ldrb	r3, [r7, #14]
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d002      	beq.n	8002d00 <I2C_ITError+0x24>
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	2b40      	cmp	r3, #64	@ 0x40
 8002cfe:	d10a      	bne.n	8002d16 <I2C_ITError+0x3a>
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b22      	cmp	r3, #34	@ 0x22
 8002d04:	d107      	bne.n	8002d16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d1c:	2b28      	cmp	r3, #40	@ 0x28
 8002d1e:	d107      	bne.n	8002d30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2228      	movs	r2, #40	@ 0x28
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d2e:	e015      	b.n	8002d5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d3e:	d00a      	beq.n	8002d56 <I2C_ITError+0x7a>
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b60      	cmp	r3, #96	@ 0x60
 8002d44:	d007      	beq.n	8002d56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d6a:	d162      	bne.n	8002e32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d020      	beq.n	8002dcc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8e:	4a6a      	ldr	r2, [pc, #424]	@ (8002f38 <I2C_ITError+0x25c>)
 8002d90:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd ff08 	bl	8000bac <HAL_DMA_Abort_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8089 	beq.w	8002eb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4798      	blx	r3
 8002dca:	e074      	b.n	8002eb6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	4a59      	ldr	r2, [pc, #356]	@ (8002f38 <I2C_ITError+0x25c>)
 8002dd2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fee7 	bl	8000bac <HAL_DMA_Abort_IT>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d068      	beq.n	8002eb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dee:	2b40      	cmp	r3, #64	@ 0x40
 8002df0:	d10b      	bne.n	8002e0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
 8002e30:	e041      	b.n	8002eb6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b60      	cmp	r3, #96	@ 0x60
 8002e3c:	d125      	bne.n	8002e8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e56:	2b40      	cmp	r3, #64	@ 0x40
 8002e58:	d10b      	bne.n	8002e72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe ff40 	bl	8001d08 <HAL_I2C_AbortCpltCallback>
 8002e88:	e015      	b.n	8002eb6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b40      	cmp	r3, #64	@ 0x40
 8002e96:	d10b      	bne.n	8002eb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fe ff20 	bl	8001cf6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10e      	bne.n	8002ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d113      	bne.n	8002f30 <I2C_ITError+0x254>
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b28      	cmp	r3, #40	@ 0x28
 8002f0c:	d110      	bne.n	8002f30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <I2C_ITError+0x260>)
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fec8 	bl	8001cc0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	080031e1 	.word	0x080031e1
 8002f3c:	ffff0000 	.word	0xffff0000

08002f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d006      	beq.n	8002f6a <I2C_MasterRequestWrite+0x2a>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d003      	beq.n	8002f6a <I2C_MasterRequestWrite+0x2a>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f68:	d108      	bne.n	8002f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e00b      	b.n	8002f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	2b12      	cmp	r3, #18
 8002f82:	d107      	bne.n	8002f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f9c5 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fba:	d103      	bne.n	8002fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e035      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fd0:	d108      	bne.n	8002fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fe0:	611a      	str	r2, [r3, #16]
 8002fe2:	e01b      	b.n	800301c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	11db      	asrs	r3, r3, #7
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 0306 	and.w	r3, r3, #6
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f063 030f 	orn	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	490e      	ldr	r1, [pc, #56]	@ (800303c <I2C_MasterRequestWrite+0xfc>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fa0e 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e010      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4907      	ldr	r1, [pc, #28]	@ (8003040 <I2C_MasterRequestWrite+0x100>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f9fe 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	00010008 	.word	0x00010008
 8003040:	00010002 	.word	0x00010002

08003044 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003068:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d006      	beq.n	800307e <I2C_MasterRequestRead+0x3a>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d003      	beq.n	800307e <I2C_MasterRequestRead+0x3a>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800307c:	d108      	bne.n	8003090 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e00b      	b.n	80030a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	2b11      	cmp	r3, #17
 8003096:	d107      	bne.n	80030a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f93b 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ce:	d103      	bne.n	80030d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e079      	b.n	80031d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030e4:	d108      	bne.n	80030f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	611a      	str	r2, [r3, #16]
 80030f6:	e05f      	b.n	80031b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	11db      	asrs	r3, r3, #7
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f003 0306 	and.w	r3, r3, #6
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f063 030f 	orn	r3, r3, #15
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4930      	ldr	r1, [pc, #192]	@ (80031d8 <I2C_MasterRequestRead+0x194>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f984 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e054      	b.n	80031d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4929      	ldr	r1, [pc, #164]	@ (80031dc <I2C_MasterRequestRead+0x198>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f974 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e044      	b.n	80031d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800316a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f8d9 	bl	8003330 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003192:	d103      	bne.n	800319c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e017      	b.n	80031d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031a0:	897b      	ldrh	r3, [r7, #10]
 80031a2:	11db      	asrs	r3, r3, #7
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0306 	and.w	r3, r3, #6
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f063 030e 	orn	r3, r3, #14
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4907      	ldr	r1, [pc, #28]	@ (80031dc <I2C_MasterRequestRead+0x198>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f930 	bl	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	00010008 	.word	0x00010008
 80031dc:	00010002 	.word	0x00010002

080031e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003328 <I2C_DMAAbort+0x148>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	4a4a      	ldr	r2, [pc, #296]	@ (800332c <I2C_DMAAbort+0x14c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a1a      	lsrs	r2, r3, #8
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00da      	lsls	r2, r3, #3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003226:	e00a      	b.n	800323e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323c:	d0ea      	beq.n	8003214 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	2200      	movs	r2, #0
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003280:	2200      	movs	r2, #0
 8003282:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	2200      	movs	r2, #0
 8003292:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b60      	cmp	r3, #96	@ 0x60
 80032ae:	d10e      	bne.n	80032ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7fe fd1e 	bl	8001d08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032cc:	e027      	b.n	800331e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032d4:	2b28      	cmp	r3, #40	@ 0x28
 80032d6:	d117      	bne.n	8003308 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2228      	movs	r2, #40	@ 0x28
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003306:	e007      	b.n	8003318 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003318:	6978      	ldr	r0, [r7, #20]
 800331a:	f7fe fcec 	bl	8001cf6 <HAL_I2C_ErrorCallback>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000008 	.word	0x20000008
 800332c:	14f8b589 	.word	0x14f8b589

08003330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003340:	e048      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d044      	beq.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7fd faf3 	bl	8000934 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d139      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10d      	bne.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	e00c      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d116      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e023      	b.n	800341c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10d      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	e00c      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d093      	beq.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003432:	e071      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003442:	d123      	bne.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800345c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e067      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d041      	beq.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003494:	f7fd fa4e 	bl	8000934 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d136      	bne.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10c      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e00b      	b.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e021      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	0c1b      	lsrs	r3, r3, #16
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10c      	bne.n	800353c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e00b      	b.n	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f af6d 	bne.w	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003570:	e034      	b.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f915 	bl	80037a2 <I2C_IsAcknowledgeFailed>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e034      	b.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d028      	beq.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fd f9d3 	bl	8000934 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11d      	bne.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b80      	cmp	r3, #128	@ 0x80
 80035ac:	d016      	beq.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e6:	2b80      	cmp	r3, #128	@ 0x80
 80035e8:	d1c3      	bne.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003600:	e034      	b.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f8cd 	bl	80037a2 <I2C_IsAcknowledgeFailed>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e034      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d028      	beq.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7fd f98b 	bl	8000934 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11d      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d016      	beq.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d1c3      	bne.n	8003602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003690:	4b13      	ldr	r3, [pc, #76]	@ (80036e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	08db      	lsrs	r3, r3, #3
 8003696:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	0a1a      	lsrs	r2, r3, #8
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e008      	b.n	80036d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d0:	d0e9      	beq.n	80036a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000008 	.word	0x20000008
 80036e4:	14f8b589 	.word	0x14f8b589

080036e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f4:	e049      	b.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d119      	bne.n	8003738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e030      	b.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003738:	f7fd f8fc 	bl	8000934 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11d      	bne.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b40      	cmp	r3, #64	@ 0x40
 800375a:	d016      	beq.n	800378a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e007      	b.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d1ae      	bne.n	80036f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b8:	d11b      	bne.n	80037f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800380e:	d103      	bne.n	8003818 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003816:	e007      	b.n	8003828 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003820:	d102      	bne.n	8003828 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2208      	movs	r2, #8
 8003826:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
	...

08003834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e272      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8087 	beq.w	8003962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003854:	4b92      	ldr	r3, [pc, #584]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00c      	beq.n	800387a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003860:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d112      	bne.n	8003892 <HAL_RCC_OscConfig+0x5e>
 800386c:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003878:	d10b      	bne.n	8003892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387a:	4b89      	ldr	r3, [pc, #548]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d06c      	beq.n	8003960 <HAL_RCC_OscConfig+0x12c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d168      	bne.n	8003960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e24c      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x76>
 800389c:	4b80      	ldr	r3, [pc, #512]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7f      	ldr	r2, [pc, #508]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e02e      	b.n	8003908 <HAL_RCC_OscConfig+0xd4>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x98>
 80038b2:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7a      	ldr	r2, [pc, #488]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b78      	ldr	r3, [pc, #480]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a77      	ldr	r2, [pc, #476]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e01d      	b.n	8003908 <HAL_RCC_OscConfig+0xd4>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0xbc>
 80038d6:	4b72      	ldr	r3, [pc, #456]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a71      	ldr	r2, [pc, #452]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0xd4>
 80038f0:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b68      	ldr	r3, [pc, #416]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a67      	ldr	r2, [pc, #412]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd f810 	bl	8000934 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd f80c 	bl	8000934 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e200      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0xe4>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fc fffc 	bl	8000934 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fc fff8 	bl	8000934 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	@ 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1ec      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x10c>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396e:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800397a:	4b49      	ldr	r3, [pc, #292]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x18c>
 8003986:	4b46      	ldr	r3, [pc, #280]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b43      	ldr	r3, [pc, #268]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x176>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1c0      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4939      	ldr	r1, [pc, #228]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e03a      	b.n	8003a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <HAL_RCC_OscConfig+0x270>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fc ffb1 	bl	8000934 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d6:	f7fc ffad 	bl	8000934 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e1a1      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4927      	ldr	r1, [pc, #156]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
 8003a08:	e015      	b.n	8003a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0a:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fc ff90 	bl	8000934 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a18:	f7fc ff8c 	bl	8000934 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e180      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03a      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d019      	beq.n	8003a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4a:	4b17      	ldr	r3, [pc, #92]	@ (8003aa8 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a50:	f7fc ff70 	bl	8000934 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fc ff6c 	bl	8000934 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e160      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f000 face 	bl	8004018 <RCC_Delay>
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <HAL_RCC_OscConfig+0x274>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fc ff56 	bl	8000934 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8a:	e00f      	b.n	8003aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fc ff52 	bl	8000934 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d908      	bls.n	8003aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e146      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	42420000 	.word	0x42420000
 8003aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aac:	4b92      	ldr	r3, [pc, #584]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e9      	bne.n	8003a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80a6 	beq.w	8003c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b8b      	ldr	r3, [pc, #556]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b88      	ldr	r3, [pc, #544]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4a87      	ldr	r2, [pc, #540]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	61d3      	str	r3, [r2, #28]
 8003ae2:	4b85      	ldr	r3, [pc, #532]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af2:	4b82      	ldr	r3, [pc, #520]	@ (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afe:	4b7f      	ldr	r3, [pc, #508]	@ (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7e      	ldr	r2, [pc, #504]	@ (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0a:	f7fc ff13 	bl	8000934 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b12:	f7fc ff0f 	bl	8000934 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	@ 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e103      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	4b75      	ldr	r3, [pc, #468]	@ (8003cfc <HAL_RCC_OscConfig+0x4c8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x312>
 8003b38:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6213      	str	r3, [r2, #32]
 8003b44:	e02d      	b.n	8003ba2 <HAL_RCC_OscConfig+0x36e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x334>
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a69      	ldr	r2, [pc, #420]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	4b67      	ldr	r3, [pc, #412]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a66      	ldr	r2, [pc, #408]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	e01c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x36e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d10c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x356>
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4a60      	ldr	r2, [pc, #384]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	6213      	str	r3, [r2, #32]
 8003b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x36e>
 8003b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a5a      	ldr	r2, [pc, #360]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6213      	str	r3, [r2, #32]
 8003b96:	4b58      	ldr	r3, [pc, #352]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a57      	ldr	r2, [pc, #348]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7fc fec3 	bl	8000934 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fc febf 	bl	8000934 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0b1      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ee      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x37e>
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fc fead 	bl	8000934 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fc fea9 	bl	8000934 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e09b      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	4b40      	ldr	r3, [pc, #256]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1ee      	bne.n	8003bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8087 	beq.w	8003d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1c:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d061      	beq.n	8003cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d146      	bne.n	8003cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c30:	4b33      	ldr	r3, [pc, #204]	@ (8003d00 <HAL_RCC_OscConfig+0x4cc>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fc fe7d 	bl	8000934 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fc fe79 	bl	8000934 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e06d      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c50:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c64:	d108      	bne.n	8003c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c66:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4921      	ldr	r1, [pc, #132]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a19      	ldr	r1, [r3, #32]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	491b      	ldr	r1, [pc, #108]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fc fe4d 	bl	8000934 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fc fe49 	bl	8000934 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e03d      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x46a>
 8003cbc:	e035      	b.n	8003d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <HAL_RCC_OscConfig+0x4cc>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fc fe36 	bl	8000934 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fc fe32 	bl	8000934 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e026      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x498>
 8003cea:	e01e      	b.n	8003d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e019      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_RCC_OscConfig+0x500>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d106      	bne.n	8003d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000

08003d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d0      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b67      	ldr	r3, [pc, #412]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	4965      	ldr	r1, [pc, #404]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b8      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a58      	ldr	r2, [pc, #352]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dac:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a52      	ldr	r2, [pc, #328]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b50      	ldr	r3, [pc, #320]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	494d      	ldr	r1, [pc, #308]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d040      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e07f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b41      	ldr	r3, [pc, #260]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e073      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3d      	ldr	r3, [pc, #244]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b39      	ldr	r3, [pc, #228]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4936      	ldr	r1, [pc, #216]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fc fd84 	bl	8000934 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fc fd80 	bl	8000934 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e053      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2d      	ldr	r3, [pc, #180]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b27      	ldr	r3, [pc, #156]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d210      	bcs.n	8003e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4922      	ldr	r1, [pc, #136]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b20      	ldr	r3, [pc, #128]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e032      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e94:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4916      	ldr	r1, [pc, #88]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eb2:	4b12      	ldr	r3, [pc, #72]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	490e      	ldr	r1, [pc, #56]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec6:	f000 f821 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	490a      	ldr	r1, [pc, #40]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	5ccb      	ldrb	r3, [r1, r3]
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	4a09      	ldr	r2, [pc, #36]	@ (8003f04 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ee2:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fce2 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	080054f8 	.word	0x080054f8
 8003f04:	20000008 	.word	0x20000008
 8003f08:	2000000c 	.word	0x2000000c

08003f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f26:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x30>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d003      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x36>
 8003f3a:	e027      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f3e:	613b      	str	r3, [r7, #16]
      break;
 8003f40:	e027      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0c9b      	lsrs	r3, r3, #18
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d010      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f5a:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0c5b      	lsrs	r3, r3, #17
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	4a11      	ldr	r2, [pc, #68]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f66:	5cd3      	ldrb	r3, [r2, r3]
 8003f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6e:	fb03 f202 	mul.w	r2, r3, r2
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e004      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	613b      	str	r3, [r7, #16]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8e:	613b      	str	r3, [r7, #16]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	693b      	ldr	r3, [r7, #16]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	007a1200 	.word	0x007a1200
 8003fa8:	08005510 	.word	0x08005510
 8003fac:	08005520 	.word	0x08005520
 8003fb0:	003d0900 	.word	0x003d0900

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb8:	4b02      	ldr	r3, [pc, #8]	@ (8003fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	20000008 	.word	0x20000008

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fcc:	f7ff fff2 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4903      	ldr	r1, [pc, #12]	@ (8003fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	08005508 	.word	0x08005508

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffde 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	0adb      	lsrs	r3, r3, #11
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	08005508 	.word	0x08005508

08004018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004020:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <RCC_Delay+0x34>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <RCC_Delay+0x38>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0a5b      	lsrs	r3, r3, #9
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004034:	bf00      	nop
  }
  while (Delay --);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	60fa      	str	r2, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f9      	bne.n	8004034 <RCC_Delay+0x1c>
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	20000008 	.word	0x20000008
 8004050:	10624dd3 	.word	0x10624dd3

08004054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e042      	b.n	80040ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc faba 	bl	80005f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	@ 0x24
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f971 	bl	8004380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	@ 0x28
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b20      	cmp	r3, #32
 8004112:	d175      	bne.n	8004200 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Transmit+0x2c>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e06e      	b.n	8004202 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2221      	movs	r2, #33	@ 0x21
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004132:	f7fc fbff 	bl	8000934 <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414c:	d108      	bne.n	8004160 <HAL_UART_Transmit+0x6c>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e003      	b.n	8004168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004168:	e02e      	b.n	80041c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	@ 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f848 	bl	800420a <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e03a      	b.n	8004202 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	3302      	adds	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e007      	b.n	80041ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cb      	bne.n	800416a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2140      	movs	r1, #64	@ 0x40
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f814 	bl	800420a <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e006      	b.n	8004202 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421a:	e03b      	b.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d037      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7fc fb86 	bl	8000934 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6a3a      	ldr	r2, [r7, #32]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <UART_WaitOnFlagUntilTimeout+0x30>
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e03a      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d023      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d020      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b40      	cmp	r3, #64	@ 0x40
 8004256:	d01d      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b08      	cmp	r3, #8
 8004264:	d116      	bne.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f81d 	bl	80042bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e00f      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d0b4      	beq.n	800421c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b095      	sub	sp, #84	@ 0x54
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	61fb      	str	r3, [r7, #28]
   return(result);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800431e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d119      	bne.n	8004368 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	60bb      	str	r3, [r7, #8]
   return(result);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f023 0310 	bic.w	r3, r3, #16
 800434a:	647b      	str	r3, [r7, #68]	@ 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004354:	61ba      	str	r2, [r7, #24]
 8004356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	613b      	str	r3, [r7, #16]
   return(result);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004376:	bf00      	nop
 8004378:	3754      	adds	r7, #84	@ 0x54
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043ba:	f023 030c 	bic.w	r3, r3, #12
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004494 <UART_SetConfig+0x114>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d103      	bne.n	80043f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7ff fe02 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	e002      	b.n	80043f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7ff fdea 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 80043f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	4a22      	ldr	r2, [pc, #136]	@ (8004498 <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	0119      	lsls	r1, r3, #4
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009a      	lsls	r2, r3, #2
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	fbb2 f2f3 	udiv	r2, r2, r3
 800442c:	4b1a      	ldr	r3, [pc, #104]	@ (8004498 <UART_SetConfig+0x118>)
 800442e:	fba3 0302 	umull	r0, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2064      	movs	r0, #100	@ 0x64
 8004436:	fb00 f303 	mul.w	r3, r0, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	3332      	adds	r3, #50	@ 0x32
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <UART_SetConfig+0x118>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444c:	4419      	add	r1, r3
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	fbb2 f2f3 	udiv	r2, r2, r3
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <UART_SetConfig+0x118>)
 8004466:	fba3 0302 	umull	r0, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2064      	movs	r0, #100	@ 0x64
 800446e:	fb00 f303 	mul.w	r3, r0, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	3332      	adds	r3, #50	@ 0x32
 8004478:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <UART_SetConfig+0x118>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	440a      	add	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40013800 	.word	0x40013800
 8004498:	51eb851f 	.word	0x51eb851f

0800449c <std>:
 800449c:	2300      	movs	r3, #0
 800449e:	b510      	push	{r4, lr}
 80044a0:	4604      	mov	r4, r0
 80044a2:	e9c0 3300 	strd	r3, r3, [r0]
 80044a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044aa:	6083      	str	r3, [r0, #8]
 80044ac:	8181      	strh	r1, [r0, #12]
 80044ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80044b0:	81c2      	strh	r2, [r0, #14]
 80044b2:	6183      	str	r3, [r0, #24]
 80044b4:	4619      	mov	r1, r3
 80044b6:	2208      	movs	r2, #8
 80044b8:	305c      	adds	r0, #92	@ 0x5c
 80044ba:	f000 fa01 	bl	80048c0 <memset>
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <std+0x58>)
 80044c0:	6224      	str	r4, [r4, #32]
 80044c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <std+0x5c>)
 80044c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044c8:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <std+0x60>)
 80044ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <std+0x64>)
 80044ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <std+0x68>)
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d006      	beq.n	80044e4 <std+0x48>
 80044d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044da:	4294      	cmp	r4, r2
 80044dc:	d002      	beq.n	80044e4 <std+0x48>
 80044de:	33d0      	adds	r3, #208	@ 0xd0
 80044e0:	429c      	cmp	r4, r3
 80044e2:	d105      	bne.n	80044f0 <std+0x54>
 80044e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ec:	f000 ba60 	b.w	80049b0 <__retarget_lock_init_recursive>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	bf00      	nop
 80044f4:	08004711 	.word	0x08004711
 80044f8:	08004733 	.word	0x08004733
 80044fc:	0800476b 	.word	0x0800476b
 8004500:	0800478f 	.word	0x0800478f
 8004504:	20000154 	.word	0x20000154

08004508 <stdio_exit_handler>:
 8004508:	4a02      	ldr	r2, [pc, #8]	@ (8004514 <stdio_exit_handler+0xc>)
 800450a:	4903      	ldr	r1, [pc, #12]	@ (8004518 <stdio_exit_handler+0x10>)
 800450c:	4803      	ldr	r0, [pc, #12]	@ (800451c <stdio_exit_handler+0x14>)
 800450e:	f000 b869 	b.w	80045e4 <_fwalk_sglue>
 8004512:	bf00      	nop
 8004514:	20000014 	.word	0x20000014
 8004518:	08005249 	.word	0x08005249
 800451c:	20000024 	.word	0x20000024

08004520 <cleanup_stdio>:
 8004520:	6841      	ldr	r1, [r0, #4]
 8004522:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <cleanup_stdio+0x34>)
 8004524:	b510      	push	{r4, lr}
 8004526:	4299      	cmp	r1, r3
 8004528:	4604      	mov	r4, r0
 800452a:	d001      	beq.n	8004530 <cleanup_stdio+0x10>
 800452c:	f000 fe8c 	bl	8005248 <_fflush_r>
 8004530:	68a1      	ldr	r1, [r4, #8]
 8004532:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <cleanup_stdio+0x38>)
 8004534:	4299      	cmp	r1, r3
 8004536:	d002      	beq.n	800453e <cleanup_stdio+0x1e>
 8004538:	4620      	mov	r0, r4
 800453a:	f000 fe85 	bl	8005248 <_fflush_r>
 800453e:	68e1      	ldr	r1, [r4, #12]
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <cleanup_stdio+0x3c>)
 8004542:	4299      	cmp	r1, r3
 8004544:	d004      	beq.n	8004550 <cleanup_stdio+0x30>
 8004546:	4620      	mov	r0, r4
 8004548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454c:	f000 be7c 	b.w	8005248 <_fflush_r>
 8004550:	bd10      	pop	{r4, pc}
 8004552:	bf00      	nop
 8004554:	20000154 	.word	0x20000154
 8004558:	200001bc 	.word	0x200001bc
 800455c:	20000224 	.word	0x20000224

08004560 <global_stdio_init.part.0>:
 8004560:	b510      	push	{r4, lr}
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <global_stdio_init.part.0+0x30>)
 8004564:	4c0b      	ldr	r4, [pc, #44]	@ (8004594 <global_stdio_init.part.0+0x34>)
 8004566:	4a0c      	ldr	r2, [pc, #48]	@ (8004598 <global_stdio_init.part.0+0x38>)
 8004568:	4620      	mov	r0, r4
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	2104      	movs	r1, #4
 800456e:	2200      	movs	r2, #0
 8004570:	f7ff ff94 	bl	800449c <std>
 8004574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004578:	2201      	movs	r2, #1
 800457a:	2109      	movs	r1, #9
 800457c:	f7ff ff8e 	bl	800449c <std>
 8004580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004584:	2202      	movs	r2, #2
 8004586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458a:	2112      	movs	r1, #18
 800458c:	f7ff bf86 	b.w	800449c <std>
 8004590:	2000028c 	.word	0x2000028c
 8004594:	20000154 	.word	0x20000154
 8004598:	08004509 	.word	0x08004509

0800459c <__sfp_lock_acquire>:
 800459c:	4801      	ldr	r0, [pc, #4]	@ (80045a4 <__sfp_lock_acquire+0x8>)
 800459e:	f000 ba08 	b.w	80049b2 <__retarget_lock_acquire_recursive>
 80045a2:	bf00      	nop
 80045a4:	20000295 	.word	0x20000295

080045a8 <__sfp_lock_release>:
 80045a8:	4801      	ldr	r0, [pc, #4]	@ (80045b0 <__sfp_lock_release+0x8>)
 80045aa:	f000 ba03 	b.w	80049b4 <__retarget_lock_release_recursive>
 80045ae:	bf00      	nop
 80045b0:	20000295 	.word	0x20000295

080045b4 <__sinit>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	4604      	mov	r4, r0
 80045b8:	f7ff fff0 	bl	800459c <__sfp_lock_acquire>
 80045bc:	6a23      	ldr	r3, [r4, #32]
 80045be:	b11b      	cbz	r3, 80045c8 <__sinit+0x14>
 80045c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c4:	f7ff bff0 	b.w	80045a8 <__sfp_lock_release>
 80045c8:	4b04      	ldr	r3, [pc, #16]	@ (80045dc <__sinit+0x28>)
 80045ca:	6223      	str	r3, [r4, #32]
 80045cc:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <__sinit+0x2c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f5      	bne.n	80045c0 <__sinit+0xc>
 80045d4:	f7ff ffc4 	bl	8004560 <global_stdio_init.part.0>
 80045d8:	e7f2      	b.n	80045c0 <__sinit+0xc>
 80045da:	bf00      	nop
 80045dc:	08004521 	.word	0x08004521
 80045e0:	2000028c 	.word	0x2000028c

080045e4 <_fwalk_sglue>:
 80045e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e8:	4607      	mov	r7, r0
 80045ea:	4688      	mov	r8, r1
 80045ec:	4614      	mov	r4, r2
 80045ee:	2600      	movs	r6, #0
 80045f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045f4:	f1b9 0901 	subs.w	r9, r9, #1
 80045f8:	d505      	bpl.n	8004606 <_fwalk_sglue+0x22>
 80045fa:	6824      	ldr	r4, [r4, #0]
 80045fc:	2c00      	cmp	r4, #0
 80045fe:	d1f7      	bne.n	80045f0 <_fwalk_sglue+0xc>
 8004600:	4630      	mov	r0, r6
 8004602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d907      	bls.n	800461c <_fwalk_sglue+0x38>
 800460c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004610:	3301      	adds	r3, #1
 8004612:	d003      	beq.n	800461c <_fwalk_sglue+0x38>
 8004614:	4629      	mov	r1, r5
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	4306      	orrs	r6, r0
 800461c:	3568      	adds	r5, #104	@ 0x68
 800461e:	e7e9      	b.n	80045f4 <_fwalk_sglue+0x10>

08004620 <iprintf>:
 8004620:	b40f      	push	{r0, r1, r2, r3}
 8004622:	b507      	push	{r0, r1, r2, lr}
 8004624:	4906      	ldr	r1, [pc, #24]	@ (8004640 <iprintf+0x20>)
 8004626:	ab04      	add	r3, sp, #16
 8004628:	6808      	ldr	r0, [r1, #0]
 800462a:	f853 2b04 	ldr.w	r2, [r3], #4
 800462e:	6881      	ldr	r1, [r0, #8]
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	f000 fadf 	bl	8004bf4 <_vfiprintf_r>
 8004636:	b003      	add	sp, #12
 8004638:	f85d eb04 	ldr.w	lr, [sp], #4
 800463c:	b004      	add	sp, #16
 800463e:	4770      	bx	lr
 8004640:	20000020 	.word	0x20000020

08004644 <putchar>:
 8004644:	4b02      	ldr	r3, [pc, #8]	@ (8004650 <putchar+0xc>)
 8004646:	4601      	mov	r1, r0
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	6882      	ldr	r2, [r0, #8]
 800464c:	f000 be85 	b.w	800535a <_putc_r>
 8004650:	20000020 	.word	0x20000020

08004654 <_puts_r>:
 8004654:	6a03      	ldr	r3, [r0, #32]
 8004656:	b570      	push	{r4, r5, r6, lr}
 8004658:	4605      	mov	r5, r0
 800465a:	460e      	mov	r6, r1
 800465c:	6884      	ldr	r4, [r0, #8]
 800465e:	b90b      	cbnz	r3, 8004664 <_puts_r+0x10>
 8004660:	f7ff ffa8 	bl	80045b4 <__sinit>
 8004664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004666:	07db      	lsls	r3, r3, #31
 8004668:	d405      	bmi.n	8004676 <_puts_r+0x22>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	0598      	lsls	r0, r3, #22
 800466e:	d402      	bmi.n	8004676 <_puts_r+0x22>
 8004670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004672:	f000 f99e 	bl	80049b2 <__retarget_lock_acquire_recursive>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	0719      	lsls	r1, r3, #28
 800467a:	d502      	bpl.n	8004682 <_puts_r+0x2e>
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d135      	bne.n	80046ee <_puts_r+0x9a>
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 f8c5 	bl	8004814 <__swsetup_r>
 800468a:	b380      	cbz	r0, 80046ee <_puts_r+0x9a>
 800468c:	f04f 35ff 	mov.w	r5, #4294967295
 8004690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004692:	07da      	lsls	r2, r3, #31
 8004694:	d405      	bmi.n	80046a2 <_puts_r+0x4e>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	059b      	lsls	r3, r3, #22
 800469a:	d402      	bmi.n	80046a2 <_puts_r+0x4e>
 800469c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800469e:	f000 f989 	bl	80049b4 <__retarget_lock_release_recursive>
 80046a2:	4628      	mov	r0, r5
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da04      	bge.n	80046b4 <_puts_r+0x60>
 80046aa:	69a2      	ldr	r2, [r4, #24]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	dc17      	bgt.n	80046e0 <_puts_r+0x8c>
 80046b0:	290a      	cmp	r1, #10
 80046b2:	d015      	beq.n	80046e0 <_puts_r+0x8c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	6022      	str	r2, [r4, #0]
 80046ba:	7019      	strb	r1, [r3, #0]
 80046bc:	68a3      	ldr	r3, [r4, #8]
 80046be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046c2:	3b01      	subs	r3, #1
 80046c4:	60a3      	str	r3, [r4, #8]
 80046c6:	2900      	cmp	r1, #0
 80046c8:	d1ed      	bne.n	80046a6 <_puts_r+0x52>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da11      	bge.n	80046f2 <_puts_r+0x9e>
 80046ce:	4622      	mov	r2, r4
 80046d0:	210a      	movs	r1, #10
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 f85f 	bl	8004796 <__swbuf_r>
 80046d8:	3001      	adds	r0, #1
 80046da:	d0d7      	beq.n	800468c <_puts_r+0x38>
 80046dc:	250a      	movs	r5, #10
 80046de:	e7d7      	b.n	8004690 <_puts_r+0x3c>
 80046e0:	4622      	mov	r2, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 f857 	bl	8004796 <__swbuf_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d1e7      	bne.n	80046bc <_puts_r+0x68>
 80046ec:	e7ce      	b.n	800468c <_puts_r+0x38>
 80046ee:	3e01      	subs	r6, #1
 80046f0:	e7e4      	b.n	80046bc <_puts_r+0x68>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	6022      	str	r2, [r4, #0]
 80046f8:	220a      	movs	r2, #10
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e7ee      	b.n	80046dc <_puts_r+0x88>
	...

08004700 <puts>:
 8004700:	4b02      	ldr	r3, [pc, #8]	@ (800470c <puts+0xc>)
 8004702:	4601      	mov	r1, r0
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f7ff bfa5 	b.w	8004654 <_puts_r>
 800470a:	bf00      	nop
 800470c:	20000020 	.word	0x20000020

08004710 <__sread>:
 8004710:	b510      	push	{r4, lr}
 8004712:	460c      	mov	r4, r1
 8004714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004718:	f000 f8fc 	bl	8004914 <_read_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	bfab      	itete	ge
 8004720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004722:	89a3      	ldrhlt	r3, [r4, #12]
 8004724:	181b      	addge	r3, r3, r0
 8004726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800472a:	bfac      	ite	ge
 800472c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800472e:	81a3      	strhlt	r3, [r4, #12]
 8004730:	bd10      	pop	{r4, pc}

08004732 <__swrite>:
 8004732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	461f      	mov	r7, r3
 8004738:	898b      	ldrh	r3, [r1, #12]
 800473a:	4605      	mov	r5, r0
 800473c:	05db      	lsls	r3, r3, #23
 800473e:	460c      	mov	r4, r1
 8004740:	4616      	mov	r6, r2
 8004742:	d505      	bpl.n	8004750 <__swrite+0x1e>
 8004744:	2302      	movs	r3, #2
 8004746:	2200      	movs	r2, #0
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	f000 f8d0 	bl	80048f0 <_lseek_r>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	4632      	mov	r2, r6
 8004754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	4628      	mov	r0, r5
 800475c:	463b      	mov	r3, r7
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004766:	f000 b8e7 	b.w	8004938 <_write_r>

0800476a <__sseek>:
 800476a:	b510      	push	{r4, lr}
 800476c:	460c      	mov	r4, r1
 800476e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004772:	f000 f8bd 	bl	80048f0 <_lseek_r>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	bf15      	itete	ne
 800477c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800477e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004786:	81a3      	strheq	r3, [r4, #12]
 8004788:	bf18      	it	ne
 800478a:	81a3      	strhne	r3, [r4, #12]
 800478c:	bd10      	pop	{r4, pc}

0800478e <__sclose>:
 800478e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004792:	f000 b89d 	b.w	80048d0 <_close_r>

08004796 <__swbuf_r>:
 8004796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004798:	460e      	mov	r6, r1
 800479a:	4614      	mov	r4, r2
 800479c:	4605      	mov	r5, r0
 800479e:	b118      	cbz	r0, 80047a8 <__swbuf_r+0x12>
 80047a0:	6a03      	ldr	r3, [r0, #32]
 80047a2:	b90b      	cbnz	r3, 80047a8 <__swbuf_r+0x12>
 80047a4:	f7ff ff06 	bl	80045b4 <__sinit>
 80047a8:	69a3      	ldr	r3, [r4, #24]
 80047aa:	60a3      	str	r3, [r4, #8]
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	071a      	lsls	r2, r3, #28
 80047b0:	d501      	bpl.n	80047b6 <__swbuf_r+0x20>
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	b943      	cbnz	r3, 80047c8 <__swbuf_r+0x32>
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f82b 	bl	8004814 <__swsetup_r>
 80047be:	b118      	cbz	r0, 80047c8 <__swbuf_r+0x32>
 80047c0:	f04f 37ff 	mov.w	r7, #4294967295
 80047c4:	4638      	mov	r0, r7
 80047c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	6922      	ldr	r2, [r4, #16]
 80047cc:	b2f6      	uxtb	r6, r6
 80047ce:	1a98      	subs	r0, r3, r2
 80047d0:	6963      	ldr	r3, [r4, #20]
 80047d2:	4637      	mov	r7, r6
 80047d4:	4283      	cmp	r3, r0
 80047d6:	dc05      	bgt.n	80047e4 <__swbuf_r+0x4e>
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 fd34 	bl	8005248 <_fflush_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1ed      	bne.n	80047c0 <__swbuf_r+0x2a>
 80047e4:	68a3      	ldr	r3, [r4, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	6022      	str	r2, [r4, #0]
 80047f0:	701e      	strb	r6, [r3, #0]
 80047f2:	6962      	ldr	r2, [r4, #20]
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d004      	beq.n	8004804 <__swbuf_r+0x6e>
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	07db      	lsls	r3, r3, #31
 80047fe:	d5e1      	bpl.n	80047c4 <__swbuf_r+0x2e>
 8004800:	2e0a      	cmp	r6, #10
 8004802:	d1df      	bne.n	80047c4 <__swbuf_r+0x2e>
 8004804:	4621      	mov	r1, r4
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fd1e 	bl	8005248 <_fflush_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	d0d9      	beq.n	80047c4 <__swbuf_r+0x2e>
 8004810:	e7d6      	b.n	80047c0 <__swbuf_r+0x2a>
	...

08004814 <__swsetup_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <__swsetup_r+0xa8>)
 8004818:	4605      	mov	r5, r0
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	460c      	mov	r4, r1
 800481e:	b118      	cbz	r0, 8004828 <__swsetup_r+0x14>
 8004820:	6a03      	ldr	r3, [r0, #32]
 8004822:	b90b      	cbnz	r3, 8004828 <__swsetup_r+0x14>
 8004824:	f7ff fec6 	bl	80045b4 <__sinit>
 8004828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482c:	0719      	lsls	r1, r3, #28
 800482e:	d422      	bmi.n	8004876 <__swsetup_r+0x62>
 8004830:	06da      	lsls	r2, r3, #27
 8004832:	d407      	bmi.n	8004844 <__swsetup_r+0x30>
 8004834:	2209      	movs	r2, #9
 8004836:	602a      	str	r2, [r5, #0]
 8004838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e033      	b.n	80048ac <__swsetup_r+0x98>
 8004844:	0758      	lsls	r0, r3, #29
 8004846:	d512      	bpl.n	800486e <__swsetup_r+0x5a>
 8004848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800484a:	b141      	cbz	r1, 800485e <__swsetup_r+0x4a>
 800484c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <__swsetup_r+0x46>
 8004854:	4628      	mov	r0, r5
 8004856:	f000 f8af 	bl	80049b8 <_free_r>
 800485a:	2300      	movs	r3, #0
 800485c:	6363      	str	r3, [r4, #52]	@ 0x34
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b94b      	cbnz	r3, 800488e <__swsetup_r+0x7a>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004884:	d003      	beq.n	800488e <__swsetup_r+0x7a>
 8004886:	4621      	mov	r1, r4
 8004888:	4628      	mov	r0, r5
 800488a:	f000 fd2a 	bl	80052e2 <__smakebuf_r>
 800488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004892:	f013 0201 	ands.w	r2, r3, #1
 8004896:	d00a      	beq.n	80048ae <__swsetup_r+0x9a>
 8004898:	2200      	movs	r2, #0
 800489a:	60a2      	str	r2, [r4, #8]
 800489c:	6962      	ldr	r2, [r4, #20]
 800489e:	4252      	negs	r2, r2
 80048a0:	61a2      	str	r2, [r4, #24]
 80048a2:	6922      	ldr	r2, [r4, #16]
 80048a4:	b942      	cbnz	r2, 80048b8 <__swsetup_r+0xa4>
 80048a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048aa:	d1c5      	bne.n	8004838 <__swsetup_r+0x24>
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
 80048ae:	0799      	lsls	r1, r3, #30
 80048b0:	bf58      	it	pl
 80048b2:	6962      	ldrpl	r2, [r4, #20]
 80048b4:	60a2      	str	r2, [r4, #8]
 80048b6:	e7f4      	b.n	80048a2 <__swsetup_r+0x8e>
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7f7      	b.n	80048ac <__swsetup_r+0x98>
 80048bc:	20000020 	.word	0x20000020

080048c0 <memset>:
 80048c0:	4603      	mov	r3, r0
 80048c2:	4402      	add	r2, r0
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d100      	bne.n	80048ca <memset+0xa>
 80048c8:	4770      	bx	lr
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	e7f9      	b.n	80048c4 <memset+0x4>

080048d0 <_close_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	2300      	movs	r3, #0
 80048d4:	4d05      	ldr	r5, [pc, #20]	@ (80048ec <_close_r+0x1c>)
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fb ff3f 	bl	800075e <_close>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_close_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_close_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000290 	.word	0x20000290

080048f0 <_lseek_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	4d05      	ldr	r5, [pc, #20]	@ (8004910 <_lseek_r+0x20>)
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fb ff51 	bl	80007a6 <_lseek>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_lseek_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_lseek_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20000290 	.word	0x20000290

08004914 <_read_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	2200      	movs	r2, #0
 800491e:	4d05      	ldr	r5, [pc, #20]	@ (8004934 <_read_r+0x20>)
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fb fee2 	bl	80006ec <_read>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_read_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_read_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000290 	.word	0x20000290

08004938 <_write_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	2200      	movs	r2, #0
 8004942:	4d05      	ldr	r5, [pc, #20]	@ (8004958 <_write_r+0x20>)
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fb feed 	bl	8000726 <_write>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_write_r+0x1e>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_write_r+0x1e>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20000290 	.word	0x20000290

0800495c <__errno>:
 800495c:	4b01      	ldr	r3, [pc, #4]	@ (8004964 <__errno+0x8>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000020 	.word	0x20000020

08004968 <__libc_init_array>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	2600      	movs	r6, #0
 800496c:	4d0c      	ldr	r5, [pc, #48]	@ (80049a0 <__libc_init_array+0x38>)
 800496e:	4c0d      	ldr	r4, [pc, #52]	@ (80049a4 <__libc_init_array+0x3c>)
 8004970:	1b64      	subs	r4, r4, r5
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	42a6      	cmp	r6, r4
 8004976:	d109      	bne.n	800498c <__libc_init_array+0x24>
 8004978:	f000 fd64 	bl	8005444 <_init>
 800497c:	2600      	movs	r6, #0
 800497e:	4d0a      	ldr	r5, [pc, #40]	@ (80049a8 <__libc_init_array+0x40>)
 8004980:	4c0a      	ldr	r4, [pc, #40]	@ (80049ac <__libc_init_array+0x44>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	42a6      	cmp	r6, r4
 8004988:	d105      	bne.n	8004996 <__libc_init_array+0x2e>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004990:	4798      	blx	r3
 8004992:	3601      	adds	r6, #1
 8004994:	e7ee      	b.n	8004974 <__libc_init_array+0xc>
 8004996:	f855 3b04 	ldr.w	r3, [r5], #4
 800499a:	4798      	blx	r3
 800499c:	3601      	adds	r6, #1
 800499e:	e7f2      	b.n	8004986 <__libc_init_array+0x1e>
 80049a0:	08005558 	.word	0x08005558
 80049a4:	08005558 	.word	0x08005558
 80049a8:	08005558 	.word	0x08005558
 80049ac:	0800555c 	.word	0x0800555c

080049b0 <__retarget_lock_init_recursive>:
 80049b0:	4770      	bx	lr

080049b2 <__retarget_lock_acquire_recursive>:
 80049b2:	4770      	bx	lr

080049b4 <__retarget_lock_release_recursive>:
 80049b4:	4770      	bx	lr
	...

080049b8 <_free_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4605      	mov	r5, r0
 80049bc:	2900      	cmp	r1, #0
 80049be:	d040      	beq.n	8004a42 <_free_r+0x8a>
 80049c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c4:	1f0c      	subs	r4, r1, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	bfb8      	it	lt
 80049ca:	18e4      	addlt	r4, r4, r3
 80049cc:	f000 f8de 	bl	8004b8c <__malloc_lock>
 80049d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a44 <_free_r+0x8c>)
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	b933      	cbnz	r3, 80049e4 <_free_r+0x2c>
 80049d6:	6063      	str	r3, [r4, #4]
 80049d8:	6014      	str	r4, [r2, #0]
 80049da:	4628      	mov	r0, r5
 80049dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049e0:	f000 b8da 	b.w	8004b98 <__malloc_unlock>
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	d908      	bls.n	80049fa <_free_r+0x42>
 80049e8:	6820      	ldr	r0, [r4, #0]
 80049ea:	1821      	adds	r1, r4, r0
 80049ec:	428b      	cmp	r3, r1
 80049ee:	bf01      	itttt	eq
 80049f0:	6819      	ldreq	r1, [r3, #0]
 80049f2:	685b      	ldreq	r3, [r3, #4]
 80049f4:	1809      	addeq	r1, r1, r0
 80049f6:	6021      	streq	r1, [r4, #0]
 80049f8:	e7ed      	b.n	80049d6 <_free_r+0x1e>
 80049fa:	461a      	mov	r2, r3
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	b10b      	cbz	r3, 8004a04 <_free_r+0x4c>
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	d9fa      	bls.n	80049fa <_free_r+0x42>
 8004a04:	6811      	ldr	r1, [r2, #0]
 8004a06:	1850      	adds	r0, r2, r1
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d10b      	bne.n	8004a24 <_free_r+0x6c>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	4401      	add	r1, r0
 8004a10:	1850      	adds	r0, r2, r1
 8004a12:	4283      	cmp	r3, r0
 8004a14:	6011      	str	r1, [r2, #0]
 8004a16:	d1e0      	bne.n	80049da <_free_r+0x22>
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4408      	add	r0, r1
 8004a1e:	6010      	str	r0, [r2, #0]
 8004a20:	6053      	str	r3, [r2, #4]
 8004a22:	e7da      	b.n	80049da <_free_r+0x22>
 8004a24:	d902      	bls.n	8004a2c <_free_r+0x74>
 8004a26:	230c      	movs	r3, #12
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	e7d6      	b.n	80049da <_free_r+0x22>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	1821      	adds	r1, r4, r0
 8004a30:	428b      	cmp	r3, r1
 8004a32:	bf01      	itttt	eq
 8004a34:	6819      	ldreq	r1, [r3, #0]
 8004a36:	685b      	ldreq	r3, [r3, #4]
 8004a38:	1809      	addeq	r1, r1, r0
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	6063      	str	r3, [r4, #4]
 8004a3e:	6054      	str	r4, [r2, #4]
 8004a40:	e7cb      	b.n	80049da <_free_r+0x22>
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	2000029c 	.word	0x2000029c

08004a48 <sbrk_aligned>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004a88 <sbrk_aligned+0x40>)
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	6831      	ldr	r1, [r6, #0]
 8004a50:	4605      	mov	r5, r0
 8004a52:	b911      	cbnz	r1, 8004a5a <sbrk_aligned+0x12>
 8004a54:	f000 fcd8 	bl	8005408 <_sbrk_r>
 8004a58:	6030      	str	r0, [r6, #0]
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 fcd3 	bl	8005408 <_sbrk_r>
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	d103      	bne.n	8004a6e <sbrk_aligned+0x26>
 8004a66:	f04f 34ff 	mov.w	r4, #4294967295
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	1cc4      	adds	r4, r0, #3
 8004a70:	f024 0403 	bic.w	r4, r4, #3
 8004a74:	42a0      	cmp	r0, r4
 8004a76:	d0f8      	beq.n	8004a6a <sbrk_aligned+0x22>
 8004a78:	1a21      	subs	r1, r4, r0
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 fcc4 	bl	8005408 <_sbrk_r>
 8004a80:	3001      	adds	r0, #1
 8004a82:	d1f2      	bne.n	8004a6a <sbrk_aligned+0x22>
 8004a84:	e7ef      	b.n	8004a66 <sbrk_aligned+0x1e>
 8004a86:	bf00      	nop
 8004a88:	20000298 	.word	0x20000298

08004a8c <_malloc_r>:
 8004a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a90:	1ccd      	adds	r5, r1, #3
 8004a92:	f025 0503 	bic.w	r5, r5, #3
 8004a96:	3508      	adds	r5, #8
 8004a98:	2d0c      	cmp	r5, #12
 8004a9a:	bf38      	it	cc
 8004a9c:	250c      	movcc	r5, #12
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	db01      	blt.n	8004aa8 <_malloc_r+0x1c>
 8004aa4:	42a9      	cmp	r1, r5
 8004aa6:	d904      	bls.n	8004ab2 <_malloc_r+0x26>
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	2000      	movs	r0, #0
 8004aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b88 <_malloc_r+0xfc>
 8004ab6:	f000 f869 	bl	8004b8c <__malloc_lock>
 8004aba:	f8d8 3000 	ldr.w	r3, [r8]
 8004abe:	461c      	mov	r4, r3
 8004ac0:	bb44      	cbnz	r4, 8004b14 <_malloc_r+0x88>
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff ffbf 	bl	8004a48 <sbrk_aligned>
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	4604      	mov	r4, r0
 8004ace:	d158      	bne.n	8004b82 <_malloc_r+0xf6>
 8004ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ad4:	4627      	mov	r7, r4
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	d143      	bne.n	8004b62 <_malloc_r+0xd6>
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	d04b      	beq.n	8004b76 <_malloc_r+0xea>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	eb04 0903 	add.w	r9, r4, r3
 8004ae8:	f000 fc8e 	bl	8005408 <_sbrk_r>
 8004aec:	4581      	cmp	r9, r0
 8004aee:	d142      	bne.n	8004b76 <_malloc_r+0xea>
 8004af0:	6821      	ldr	r1, [r4, #0]
 8004af2:	4630      	mov	r0, r6
 8004af4:	1a6d      	subs	r5, r5, r1
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7ff ffa6 	bl	8004a48 <sbrk_aligned>
 8004afc:	3001      	adds	r0, #1
 8004afe:	d03a      	beq.n	8004b76 <_malloc_r+0xea>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	442b      	add	r3, r5
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	bb62      	cbnz	r2, 8004b68 <_malloc_r+0xdc>
 8004b0e:	f8c8 7000 	str.w	r7, [r8]
 8004b12:	e00f      	b.n	8004b34 <_malloc_r+0xa8>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	1b52      	subs	r2, r2, r5
 8004b18:	d420      	bmi.n	8004b5c <_malloc_r+0xd0>
 8004b1a:	2a0b      	cmp	r2, #11
 8004b1c:	d917      	bls.n	8004b4e <_malloc_r+0xc2>
 8004b1e:	1961      	adds	r1, r4, r5
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	6025      	str	r5, [r4, #0]
 8004b24:	bf18      	it	ne
 8004b26:	6059      	strne	r1, [r3, #4]
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	bf08      	it	eq
 8004b2c:	f8c8 1000 	streq.w	r1, [r8]
 8004b30:	5162      	str	r2, [r4, r5]
 8004b32:	604b      	str	r3, [r1, #4]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f82f 	bl	8004b98 <__malloc_unlock>
 8004b3a:	f104 000b 	add.w	r0, r4, #11
 8004b3e:	1d23      	adds	r3, r4, #4
 8004b40:	f020 0007 	bic.w	r0, r0, #7
 8004b44:	1ac2      	subs	r2, r0, r3
 8004b46:	bf1c      	itt	ne
 8004b48:	1a1b      	subne	r3, r3, r0
 8004b4a:	50a3      	strne	r3, [r4, r2]
 8004b4c:	e7af      	b.n	8004aae <_malloc_r+0x22>
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	bf0c      	ite	eq
 8004b54:	f8c8 2000 	streq.w	r2, [r8]
 8004b58:	605a      	strne	r2, [r3, #4]
 8004b5a:	e7eb      	b.n	8004b34 <_malloc_r+0xa8>
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	6864      	ldr	r4, [r4, #4]
 8004b60:	e7ae      	b.n	8004ac0 <_malloc_r+0x34>
 8004b62:	463c      	mov	r4, r7
 8004b64:	687f      	ldr	r7, [r7, #4]
 8004b66:	e7b6      	b.n	8004ad6 <_malloc_r+0x4a>
 8004b68:	461a      	mov	r2, r3
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d1fb      	bne.n	8004b68 <_malloc_r+0xdc>
 8004b70:	2300      	movs	r3, #0
 8004b72:	6053      	str	r3, [r2, #4]
 8004b74:	e7de      	b.n	8004b34 <_malloc_r+0xa8>
 8004b76:	230c      	movs	r3, #12
 8004b78:	4630      	mov	r0, r6
 8004b7a:	6033      	str	r3, [r6, #0]
 8004b7c:	f000 f80c 	bl	8004b98 <__malloc_unlock>
 8004b80:	e794      	b.n	8004aac <_malloc_r+0x20>
 8004b82:	6005      	str	r5, [r0, #0]
 8004b84:	e7d6      	b.n	8004b34 <_malloc_r+0xa8>
 8004b86:	bf00      	nop
 8004b88:	2000029c 	.word	0x2000029c

08004b8c <__malloc_lock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	@ (8004b94 <__malloc_lock+0x8>)
 8004b8e:	f7ff bf10 	b.w	80049b2 <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000294 	.word	0x20000294

08004b98 <__malloc_unlock>:
 8004b98:	4801      	ldr	r0, [pc, #4]	@ (8004ba0 <__malloc_unlock+0x8>)
 8004b9a:	f7ff bf0b 	b.w	80049b4 <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	20000294 	.word	0x20000294

08004ba4 <__sfputc_r>:
 8004ba4:	6893      	ldr	r3, [r2, #8]
 8004ba6:	b410      	push	{r4}
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	da07      	bge.n	8004bc0 <__sfputc_r+0x1c>
 8004bb0:	6994      	ldr	r4, [r2, #24]
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	db01      	blt.n	8004bba <__sfputc_r+0x16>
 8004bb6:	290a      	cmp	r1, #10
 8004bb8:	d102      	bne.n	8004bc0 <__sfputc_r+0x1c>
 8004bba:	bc10      	pop	{r4}
 8004bbc:	f7ff bdeb 	b.w	8004796 <__swbuf_r>
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	1c58      	adds	r0, r3, #1
 8004bc4:	6010      	str	r0, [r2, #0]
 8004bc6:	7019      	strb	r1, [r3, #0]
 8004bc8:	4608      	mov	r0, r1
 8004bca:	bc10      	pop	{r4}
 8004bcc:	4770      	bx	lr

08004bce <__sfputs_r>:
 8004bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	460f      	mov	r7, r1
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	18d5      	adds	r5, r2, r3
 8004bd8:	42ac      	cmp	r4, r5
 8004bda:	d101      	bne.n	8004be0 <__sfputs_r+0x12>
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e007      	b.n	8004bf0 <__sfputs_r+0x22>
 8004be0:	463a      	mov	r2, r7
 8004be2:	4630      	mov	r0, r6
 8004be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be8:	f7ff ffdc 	bl	8004ba4 <__sfputc_r>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d1f3      	bne.n	8004bd8 <__sfputs_r+0xa>
 8004bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bf4 <_vfiprintf_r>:
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	4698      	mov	r8, r3
 8004bfe:	4606      	mov	r6, r0
 8004c00:	b09d      	sub	sp, #116	@ 0x74
 8004c02:	b118      	cbz	r0, 8004c0c <_vfiprintf_r+0x18>
 8004c04:	6a03      	ldr	r3, [r0, #32]
 8004c06:	b90b      	cbnz	r3, 8004c0c <_vfiprintf_r+0x18>
 8004c08:	f7ff fcd4 	bl	80045b4 <__sinit>
 8004c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c0e:	07d9      	lsls	r1, r3, #31
 8004c10:	d405      	bmi.n	8004c1e <_vfiprintf_r+0x2a>
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	059a      	lsls	r2, r3, #22
 8004c16:	d402      	bmi.n	8004c1e <_vfiprintf_r+0x2a>
 8004c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c1a:	f7ff feca 	bl	80049b2 <__retarget_lock_acquire_recursive>
 8004c1e:	89ab      	ldrh	r3, [r5, #12]
 8004c20:	071b      	lsls	r3, r3, #28
 8004c22:	d501      	bpl.n	8004c28 <_vfiprintf_r+0x34>
 8004c24:	692b      	ldr	r3, [r5, #16]
 8004c26:	b99b      	cbnz	r3, 8004c50 <_vfiprintf_r+0x5c>
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7ff fdf2 	bl	8004814 <__swsetup_r>
 8004c30:	b170      	cbz	r0, 8004c50 <_vfiprintf_r+0x5c>
 8004c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c34:	07dc      	lsls	r4, r3, #31
 8004c36:	d504      	bpl.n	8004c42 <_vfiprintf_r+0x4e>
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	b01d      	add	sp, #116	@ 0x74
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	0598      	lsls	r0, r3, #22
 8004c46:	d4f7      	bmi.n	8004c38 <_vfiprintf_r+0x44>
 8004c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c4a:	f7ff feb3 	bl	80049b4 <__retarget_lock_release_recursive>
 8004c4e:	e7f3      	b.n	8004c38 <_vfiprintf_r+0x44>
 8004c50:	2300      	movs	r3, #0
 8004c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c54:	2320      	movs	r3, #32
 8004c56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c5a:	2330      	movs	r3, #48	@ 0x30
 8004c5c:	f04f 0901 	mov.w	r9, #1
 8004c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004e10 <_vfiprintf_r+0x21c>
 8004c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	469a      	mov	sl, r3
 8004c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c74:	b10a      	cbz	r2, 8004c7a <_vfiprintf_r+0x86>
 8004c76:	2a25      	cmp	r2, #37	@ 0x25
 8004c78:	d1f9      	bne.n	8004c6e <_vfiprintf_r+0x7a>
 8004c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004c7e:	d00b      	beq.n	8004c98 <_vfiprintf_r+0xa4>
 8004c80:	465b      	mov	r3, fp
 8004c82:	4622      	mov	r2, r4
 8004c84:	4629      	mov	r1, r5
 8004c86:	4630      	mov	r0, r6
 8004c88:	f7ff ffa1 	bl	8004bce <__sfputs_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	f000 80a7 	beq.w	8004de0 <_vfiprintf_r+0x1ec>
 8004c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c94:	445a      	add	r2, fp
 8004c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c98:	f89a 3000 	ldrb.w	r3, [sl]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 809f 	beq.w	8004de0 <_vfiprintf_r+0x1ec>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cac:	f10a 0a01 	add.w	sl, sl, #1
 8004cb0:	9304      	str	r3, [sp, #16]
 8004cb2:	9307      	str	r3, [sp, #28]
 8004cb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cba:	4654      	mov	r4, sl
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc2:	4853      	ldr	r0, [pc, #332]	@ (8004e10 <_vfiprintf_r+0x21c>)
 8004cc4:	f000 fbb0 	bl	8005428 <memchr>
 8004cc8:	9a04      	ldr	r2, [sp, #16]
 8004cca:	b9d8      	cbnz	r0, 8004d04 <_vfiprintf_r+0x110>
 8004ccc:	06d1      	lsls	r1, r2, #27
 8004cce:	bf44      	itt	mi
 8004cd0:	2320      	movmi	r3, #32
 8004cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd6:	0713      	lsls	r3, r2, #28
 8004cd8:	bf44      	itt	mi
 8004cda:	232b      	movmi	r3, #43	@ 0x2b
 8004cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce6:	d015      	beq.n	8004d14 <_vfiprintf_r+0x120>
 8004ce8:	4654      	mov	r4, sl
 8004cea:	2000      	movs	r0, #0
 8004cec:	f04f 0c0a 	mov.w	ip, #10
 8004cf0:	9a07      	ldr	r2, [sp, #28]
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf8:	3b30      	subs	r3, #48	@ 0x30
 8004cfa:	2b09      	cmp	r3, #9
 8004cfc:	d94b      	bls.n	8004d96 <_vfiprintf_r+0x1a2>
 8004cfe:	b1b0      	cbz	r0, 8004d2e <_vfiprintf_r+0x13a>
 8004d00:	9207      	str	r2, [sp, #28]
 8004d02:	e014      	b.n	8004d2e <_vfiprintf_r+0x13a>
 8004d04:	eba0 0308 	sub.w	r3, r0, r8
 8004d08:	fa09 f303 	lsl.w	r3, r9, r3
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	46a2      	mov	sl, r4
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	e7d2      	b.n	8004cba <_vfiprintf_r+0xc6>
 8004d14:	9b03      	ldr	r3, [sp, #12]
 8004d16:	1d19      	adds	r1, r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	9103      	str	r1, [sp, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bfbb      	ittet	lt
 8004d20:	425b      	neglt	r3, r3
 8004d22:	f042 0202 	orrlt.w	r2, r2, #2
 8004d26:	9307      	strge	r3, [sp, #28]
 8004d28:	9307      	strlt	r3, [sp, #28]
 8004d2a:	bfb8      	it	lt
 8004d2c:	9204      	strlt	r2, [sp, #16]
 8004d2e:	7823      	ldrb	r3, [r4, #0]
 8004d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d32:	d10a      	bne.n	8004d4a <_vfiprintf_r+0x156>
 8004d34:	7863      	ldrb	r3, [r4, #1]
 8004d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d38:	d132      	bne.n	8004da0 <_vfiprintf_r+0x1ac>
 8004d3a:	9b03      	ldr	r3, [sp, #12]
 8004d3c:	3402      	adds	r4, #2
 8004d3e:	1d1a      	adds	r2, r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	9203      	str	r2, [sp, #12]
 8004d44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d48:	9305      	str	r3, [sp, #20]
 8004d4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004e14 <_vfiprintf_r+0x220>
 8004d4e:	2203      	movs	r2, #3
 8004d50:	4650      	mov	r0, sl
 8004d52:	7821      	ldrb	r1, [r4, #0]
 8004d54:	f000 fb68 	bl	8005428 <memchr>
 8004d58:	b138      	cbz	r0, 8004d6a <_vfiprintf_r+0x176>
 8004d5a:	2240      	movs	r2, #64	@ 0x40
 8004d5c:	9b04      	ldr	r3, [sp, #16]
 8004d5e:	eba0 000a 	sub.w	r0, r0, sl
 8004d62:	4082      	lsls	r2, r0
 8004d64:	4313      	orrs	r3, r2
 8004d66:	3401      	adds	r4, #1
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6e:	2206      	movs	r2, #6
 8004d70:	4829      	ldr	r0, [pc, #164]	@ (8004e18 <_vfiprintf_r+0x224>)
 8004d72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d76:	f000 fb57 	bl	8005428 <memchr>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d03f      	beq.n	8004dfe <_vfiprintf_r+0x20a>
 8004d7e:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <_vfiprintf_r+0x228>)
 8004d80:	bb1b      	cbnz	r3, 8004dca <_vfiprintf_r+0x1d6>
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	3307      	adds	r3, #7
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	9303      	str	r3, [sp, #12]
 8004d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d90:	443b      	add	r3, r7
 8004d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d94:	e76a      	b.n	8004c6c <_vfiprintf_r+0x78>
 8004d96:	460c      	mov	r4, r1
 8004d98:	2001      	movs	r0, #1
 8004d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d9e:	e7a8      	b.n	8004cf2 <_vfiprintf_r+0xfe>
 8004da0:	2300      	movs	r3, #0
 8004da2:	f04f 0c0a 	mov.w	ip, #10
 8004da6:	4619      	mov	r1, r3
 8004da8:	3401      	adds	r4, #1
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	4620      	mov	r0, r4
 8004dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004db2:	3a30      	subs	r2, #48	@ 0x30
 8004db4:	2a09      	cmp	r2, #9
 8004db6:	d903      	bls.n	8004dc0 <_vfiprintf_r+0x1cc>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0c6      	beq.n	8004d4a <_vfiprintf_r+0x156>
 8004dbc:	9105      	str	r1, [sp, #20]
 8004dbe:	e7c4      	b.n	8004d4a <_vfiprintf_r+0x156>
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc8:	e7f0      	b.n	8004dac <_vfiprintf_r+0x1b8>
 8004dca:	ab03      	add	r3, sp, #12
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	462a      	mov	r2, r5
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <_vfiprintf_r+0x22c>)
 8004dd4:	a904      	add	r1, sp, #16
 8004dd6:	f3af 8000 	nop.w
 8004dda:	4607      	mov	r7, r0
 8004ddc:	1c78      	adds	r0, r7, #1
 8004dde:	d1d6      	bne.n	8004d8e <_vfiprintf_r+0x19a>
 8004de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004de2:	07d9      	lsls	r1, r3, #31
 8004de4:	d405      	bmi.n	8004df2 <_vfiprintf_r+0x1fe>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	059a      	lsls	r2, r3, #22
 8004dea:	d402      	bmi.n	8004df2 <_vfiprintf_r+0x1fe>
 8004dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dee:	f7ff fde1 	bl	80049b4 <__retarget_lock_release_recursive>
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	065b      	lsls	r3, r3, #25
 8004df6:	f53f af1f 	bmi.w	8004c38 <_vfiprintf_r+0x44>
 8004dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dfc:	e71e      	b.n	8004c3c <_vfiprintf_r+0x48>
 8004dfe:	ab03      	add	r3, sp, #12
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	462a      	mov	r2, r5
 8004e04:	4630      	mov	r0, r6
 8004e06:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <_vfiprintf_r+0x22c>)
 8004e08:	a904      	add	r1, sp, #16
 8004e0a:	f000 f87d 	bl	8004f08 <_printf_i>
 8004e0e:	e7e4      	b.n	8004dda <_vfiprintf_r+0x1e6>
 8004e10:	08005522 	.word	0x08005522
 8004e14:	08005528 	.word	0x08005528
 8004e18:	0800552c 	.word	0x0800552c
 8004e1c:	00000000 	.word	0x00000000
 8004e20:	08004bcf 	.word	0x08004bcf

08004e24 <_printf_common>:
 8004e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	4616      	mov	r6, r2
 8004e2a:	4698      	mov	r8, r3
 8004e2c:	688a      	ldr	r2, [r1, #8]
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	4607      	mov	r7, r0
 8004e32:	4293      	cmp	r3, r2
 8004e34:	bfb8      	it	lt
 8004e36:	4613      	movlt	r3, r2
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e3e:	460c      	mov	r4, r1
 8004e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e44:	b10a      	cbz	r2, 8004e4a <_printf_common+0x26>
 8004e46:	3301      	adds	r3, #1
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	0699      	lsls	r1, r3, #26
 8004e4e:	bf42      	ittt	mi
 8004e50:	6833      	ldrmi	r3, [r6, #0]
 8004e52:	3302      	addmi	r3, #2
 8004e54:	6033      	strmi	r3, [r6, #0]
 8004e56:	6825      	ldr	r5, [r4, #0]
 8004e58:	f015 0506 	ands.w	r5, r5, #6
 8004e5c:	d106      	bne.n	8004e6c <_printf_common+0x48>
 8004e5e:	f104 0a19 	add.w	sl, r4, #25
 8004e62:	68e3      	ldr	r3, [r4, #12]
 8004e64:	6832      	ldr	r2, [r6, #0]
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	dc2b      	bgt.n	8004ec4 <_printf_common+0xa0>
 8004e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	3b00      	subs	r3, #0
 8004e74:	bf18      	it	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	0692      	lsls	r2, r2, #26
 8004e7a:	d430      	bmi.n	8004ede <_printf_common+0xba>
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e84:	47c8      	blx	r9
 8004e86:	3001      	adds	r0, #1
 8004e88:	d023      	beq.n	8004ed2 <_printf_common+0xae>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	6922      	ldr	r2, [r4, #16]
 8004e8e:	f003 0306 	and.w	r3, r3, #6
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf14      	ite	ne
 8004e96:	2500      	movne	r5, #0
 8004e98:	6833      	ldreq	r3, [r6, #0]
 8004e9a:	f04f 0600 	mov.w	r6, #0
 8004e9e:	bf08      	it	eq
 8004ea0:	68e5      	ldreq	r5, [r4, #12]
 8004ea2:	f104 041a 	add.w	r4, r4, #26
 8004ea6:	bf08      	it	eq
 8004ea8:	1aed      	subeq	r5, r5, r3
 8004eaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004eae:	bf08      	it	eq
 8004eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	bfc4      	itt	gt
 8004eb8:	1a9b      	subgt	r3, r3, r2
 8004eba:	18ed      	addgt	r5, r5, r3
 8004ebc:	42b5      	cmp	r5, r6
 8004ebe:	d11a      	bne.n	8004ef6 <_printf_common+0xd2>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e008      	b.n	8004ed6 <_printf_common+0xb2>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	4641      	mov	r1, r8
 8004eca:	4638      	mov	r0, r7
 8004ecc:	47c8      	blx	r9
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d103      	bne.n	8004eda <_printf_common+0xb6>
 8004ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eda:	3501      	adds	r5, #1
 8004edc:	e7c1      	b.n	8004e62 <_printf_common+0x3e>
 8004ede:	2030      	movs	r0, #48	@ 0x30
 8004ee0:	18e1      	adds	r1, r4, r3
 8004ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004eec:	4422      	add	r2, r4
 8004eee:	3302      	adds	r3, #2
 8004ef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ef4:	e7c2      	b.n	8004e7c <_printf_common+0x58>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4641      	mov	r1, r8
 8004efc:	4638      	mov	r0, r7
 8004efe:	47c8      	blx	r9
 8004f00:	3001      	adds	r0, #1
 8004f02:	d0e6      	beq.n	8004ed2 <_printf_common+0xae>
 8004f04:	3601      	adds	r6, #1
 8004f06:	e7d9      	b.n	8004ebc <_printf_common+0x98>

08004f08 <_printf_i>:
 8004f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	7e0f      	ldrb	r7, [r1, #24]
 8004f0e:	4691      	mov	r9, r2
 8004f10:	2f78      	cmp	r7, #120	@ 0x78
 8004f12:	4680      	mov	r8, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	469a      	mov	sl, r3
 8004f18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f1e:	d807      	bhi.n	8004f30 <_printf_i+0x28>
 8004f20:	2f62      	cmp	r7, #98	@ 0x62
 8004f22:	d80a      	bhi.n	8004f3a <_printf_i+0x32>
 8004f24:	2f00      	cmp	r7, #0
 8004f26:	f000 80d3 	beq.w	80050d0 <_printf_i+0x1c8>
 8004f2a:	2f58      	cmp	r7, #88	@ 0x58
 8004f2c:	f000 80ba 	beq.w	80050a4 <_printf_i+0x19c>
 8004f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f38:	e03a      	b.n	8004fb0 <_printf_i+0xa8>
 8004f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f3e:	2b15      	cmp	r3, #21
 8004f40:	d8f6      	bhi.n	8004f30 <_printf_i+0x28>
 8004f42:	a101      	add	r1, pc, #4	@ (adr r1, 8004f48 <_printf_i+0x40>)
 8004f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004fb5 	.word	0x08004fb5
 8004f50:	08004f31 	.word	0x08004f31
 8004f54:	08004f31 	.word	0x08004f31
 8004f58:	08004f31 	.word	0x08004f31
 8004f5c:	08004f31 	.word	0x08004f31
 8004f60:	08004fb5 	.word	0x08004fb5
 8004f64:	08004f31 	.word	0x08004f31
 8004f68:	08004f31 	.word	0x08004f31
 8004f6c:	08004f31 	.word	0x08004f31
 8004f70:	08004f31 	.word	0x08004f31
 8004f74:	080050b7 	.word	0x080050b7
 8004f78:	08004fdf 	.word	0x08004fdf
 8004f7c:	08005071 	.word	0x08005071
 8004f80:	08004f31 	.word	0x08004f31
 8004f84:	08004f31 	.word	0x08004f31
 8004f88:	080050d9 	.word	0x080050d9
 8004f8c:	08004f31 	.word	0x08004f31
 8004f90:	08004fdf 	.word	0x08004fdf
 8004f94:	08004f31 	.word	0x08004f31
 8004f98:	08004f31 	.word	0x08004f31
 8004f9c:	08005079 	.word	0x08005079
 8004fa0:	6833      	ldr	r3, [r6, #0]
 8004fa2:	1d1a      	adds	r2, r3, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6032      	str	r2, [r6, #0]
 8004fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e09e      	b.n	80050f2 <_printf_i+0x1ea>
 8004fb4:	6833      	ldr	r3, [r6, #0]
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	1d19      	adds	r1, r3, #4
 8004fba:	6031      	str	r1, [r6, #0]
 8004fbc:	0606      	lsls	r6, r0, #24
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0xbc>
 8004fc0:	681d      	ldr	r5, [r3, #0]
 8004fc2:	e003      	b.n	8004fcc <_printf_i+0xc4>
 8004fc4:	0645      	lsls	r5, r0, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0xb8>
 8004fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	da03      	bge.n	8004fd8 <_printf_i+0xd0>
 8004fd0:	232d      	movs	r3, #45	@ 0x2d
 8004fd2:	426d      	negs	r5, r5
 8004fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd8:	230a      	movs	r3, #10
 8004fda:	4859      	ldr	r0, [pc, #356]	@ (8005140 <_printf_i+0x238>)
 8004fdc:	e011      	b.n	8005002 <_printf_i+0xfa>
 8004fde:	6821      	ldr	r1, [r4, #0]
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	0608      	lsls	r0, r1, #24
 8004fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fe8:	d402      	bmi.n	8004ff0 <_printf_i+0xe8>
 8004fea:	0649      	lsls	r1, r1, #25
 8004fec:	bf48      	it	mi
 8004fee:	b2ad      	uxthmi	r5, r5
 8004ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ff2:	6033      	str	r3, [r6, #0]
 8004ff4:	bf14      	ite	ne
 8004ff6:	230a      	movne	r3, #10
 8004ff8:	2308      	moveq	r3, #8
 8004ffa:	4851      	ldr	r0, [pc, #324]	@ (8005140 <_printf_i+0x238>)
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005002:	6866      	ldr	r6, [r4, #4]
 8005004:	2e00      	cmp	r6, #0
 8005006:	bfa8      	it	ge
 8005008:	6821      	ldrge	r1, [r4, #0]
 800500a:	60a6      	str	r6, [r4, #8]
 800500c:	bfa4      	itt	ge
 800500e:	f021 0104 	bicge.w	r1, r1, #4
 8005012:	6021      	strge	r1, [r4, #0]
 8005014:	b90d      	cbnz	r5, 800501a <_printf_i+0x112>
 8005016:	2e00      	cmp	r6, #0
 8005018:	d04b      	beq.n	80050b2 <_printf_i+0x1aa>
 800501a:	4616      	mov	r6, r2
 800501c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005020:	fb03 5711 	mls	r7, r3, r1, r5
 8005024:	5dc7      	ldrb	r7, [r0, r7]
 8005026:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800502a:	462f      	mov	r7, r5
 800502c:	42bb      	cmp	r3, r7
 800502e:	460d      	mov	r5, r1
 8005030:	d9f4      	bls.n	800501c <_printf_i+0x114>
 8005032:	2b08      	cmp	r3, #8
 8005034:	d10b      	bne.n	800504e <_printf_i+0x146>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	07df      	lsls	r7, r3, #31
 800503a:	d508      	bpl.n	800504e <_printf_i+0x146>
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	6861      	ldr	r1, [r4, #4]
 8005040:	4299      	cmp	r1, r3
 8005042:	bfde      	ittt	le
 8005044:	2330      	movle	r3, #48	@ 0x30
 8005046:	f806 3c01 	strble.w	r3, [r6, #-1]
 800504a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800504e:	1b92      	subs	r2, r2, r6
 8005050:	6122      	str	r2, [r4, #16]
 8005052:	464b      	mov	r3, r9
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f8cd a000 	str.w	sl, [sp]
 800505c:	aa03      	add	r2, sp, #12
 800505e:	f7ff fee1 	bl	8004e24 <_printf_common>
 8005062:	3001      	adds	r0, #1
 8005064:	d14a      	bne.n	80050fc <_printf_i+0x1f4>
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	b004      	add	sp, #16
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	f043 0320 	orr.w	r3, r3, #32
 8005076:	6023      	str	r3, [r4, #0]
 8005078:	2778      	movs	r7, #120	@ 0x78
 800507a:	4832      	ldr	r0, [pc, #200]	@ (8005144 <_printf_i+0x23c>)
 800507c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	6831      	ldr	r1, [r6, #0]
 8005084:	061f      	lsls	r7, r3, #24
 8005086:	f851 5b04 	ldr.w	r5, [r1], #4
 800508a:	d402      	bmi.n	8005092 <_printf_i+0x18a>
 800508c:	065f      	lsls	r7, r3, #25
 800508e:	bf48      	it	mi
 8005090:	b2ad      	uxthmi	r5, r5
 8005092:	6031      	str	r1, [r6, #0]
 8005094:	07d9      	lsls	r1, r3, #31
 8005096:	bf44      	itt	mi
 8005098:	f043 0320 	orrmi.w	r3, r3, #32
 800509c:	6023      	strmi	r3, [r4, #0]
 800509e:	b11d      	cbz	r5, 80050a8 <_printf_i+0x1a0>
 80050a0:	2310      	movs	r3, #16
 80050a2:	e7ab      	b.n	8004ffc <_printf_i+0xf4>
 80050a4:	4826      	ldr	r0, [pc, #152]	@ (8005140 <_printf_i+0x238>)
 80050a6:	e7e9      	b.n	800507c <_printf_i+0x174>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	e7f6      	b.n	80050a0 <_printf_i+0x198>
 80050b2:	4616      	mov	r6, r2
 80050b4:	e7bd      	b.n	8005032 <_printf_i+0x12a>
 80050b6:	6833      	ldr	r3, [r6, #0]
 80050b8:	6825      	ldr	r5, [r4, #0]
 80050ba:	1d18      	adds	r0, r3, #4
 80050bc:	6961      	ldr	r1, [r4, #20]
 80050be:	6030      	str	r0, [r6, #0]
 80050c0:	062e      	lsls	r6, r5, #24
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	d501      	bpl.n	80050ca <_printf_i+0x1c2>
 80050c6:	6019      	str	r1, [r3, #0]
 80050c8:	e002      	b.n	80050d0 <_printf_i+0x1c8>
 80050ca:	0668      	lsls	r0, r5, #25
 80050cc:	d5fb      	bpl.n	80050c6 <_printf_i+0x1be>
 80050ce:	8019      	strh	r1, [r3, #0]
 80050d0:	2300      	movs	r3, #0
 80050d2:	4616      	mov	r6, r2
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	e7bc      	b.n	8005052 <_printf_i+0x14a>
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	2100      	movs	r1, #0
 80050dc:	1d1a      	adds	r2, r3, #4
 80050de:	6032      	str	r2, [r6, #0]
 80050e0:	681e      	ldr	r6, [r3, #0]
 80050e2:	6862      	ldr	r2, [r4, #4]
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f99f 	bl	8005428 <memchr>
 80050ea:	b108      	cbz	r0, 80050f0 <_printf_i+0x1e8>
 80050ec:	1b80      	subs	r0, r0, r6
 80050ee:	6060      	str	r0, [r4, #4]
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	2300      	movs	r3, #0
 80050f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050fa:	e7aa      	b.n	8005052 <_printf_i+0x14a>
 80050fc:	4632      	mov	r2, r6
 80050fe:	4649      	mov	r1, r9
 8005100:	4640      	mov	r0, r8
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	47d0      	blx	sl
 8005106:	3001      	adds	r0, #1
 8005108:	d0ad      	beq.n	8005066 <_printf_i+0x15e>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	079b      	lsls	r3, r3, #30
 800510e:	d413      	bmi.n	8005138 <_printf_i+0x230>
 8005110:	68e0      	ldr	r0, [r4, #12]
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	4298      	cmp	r0, r3
 8005116:	bfb8      	it	lt
 8005118:	4618      	movlt	r0, r3
 800511a:	e7a6      	b.n	800506a <_printf_i+0x162>
 800511c:	2301      	movs	r3, #1
 800511e:	4632      	mov	r2, r6
 8005120:	4649      	mov	r1, r9
 8005122:	4640      	mov	r0, r8
 8005124:	47d0      	blx	sl
 8005126:	3001      	adds	r0, #1
 8005128:	d09d      	beq.n	8005066 <_printf_i+0x15e>
 800512a:	3501      	adds	r5, #1
 800512c:	68e3      	ldr	r3, [r4, #12]
 800512e:	9903      	ldr	r1, [sp, #12]
 8005130:	1a5b      	subs	r3, r3, r1
 8005132:	42ab      	cmp	r3, r5
 8005134:	dcf2      	bgt.n	800511c <_printf_i+0x214>
 8005136:	e7eb      	b.n	8005110 <_printf_i+0x208>
 8005138:	2500      	movs	r5, #0
 800513a:	f104 0619 	add.w	r6, r4, #25
 800513e:	e7f5      	b.n	800512c <_printf_i+0x224>
 8005140:	08005533 	.word	0x08005533
 8005144:	08005544 	.word	0x08005544

08005148 <__sflush_r>:
 8005148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	0716      	lsls	r6, r2, #28
 8005150:	4605      	mov	r5, r0
 8005152:	460c      	mov	r4, r1
 8005154:	d454      	bmi.n	8005200 <__sflush_r+0xb8>
 8005156:	684b      	ldr	r3, [r1, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	dc02      	bgt.n	8005162 <__sflush_r+0x1a>
 800515c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	dd48      	ble.n	80051f4 <__sflush_r+0xac>
 8005162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005164:	2e00      	cmp	r6, #0
 8005166:	d045      	beq.n	80051f4 <__sflush_r+0xac>
 8005168:	2300      	movs	r3, #0
 800516a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800516e:	682f      	ldr	r7, [r5, #0]
 8005170:	6a21      	ldr	r1, [r4, #32]
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	d030      	beq.n	80051d8 <__sflush_r+0x90>
 8005176:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	0759      	lsls	r1, r3, #29
 800517c:	d505      	bpl.n	800518a <__sflush_r+0x42>
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	1ad2      	subs	r2, r2, r3
 8005182:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005184:	b10b      	cbz	r3, 800518a <__sflush_r+0x42>
 8005186:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	2300      	movs	r3, #0
 800518c:	4628      	mov	r0, r5
 800518e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005190:	6a21      	ldr	r1, [r4, #32]
 8005192:	47b0      	blx	r6
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	d106      	bne.n	80051a8 <__sflush_r+0x60>
 800519a:	6829      	ldr	r1, [r5, #0]
 800519c:	291d      	cmp	r1, #29
 800519e:	d82b      	bhi.n	80051f8 <__sflush_r+0xb0>
 80051a0:	4a28      	ldr	r2, [pc, #160]	@ (8005244 <__sflush_r+0xfc>)
 80051a2:	410a      	asrs	r2, r1
 80051a4:	07d6      	lsls	r6, r2, #31
 80051a6:	d427      	bmi.n	80051f8 <__sflush_r+0xb0>
 80051a8:	2200      	movs	r2, #0
 80051aa:	6062      	str	r2, [r4, #4]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	04d9      	lsls	r1, r3, #19
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	d504      	bpl.n	80051be <__sflush_r+0x76>
 80051b4:	1c42      	adds	r2, r0, #1
 80051b6:	d101      	bne.n	80051bc <__sflush_r+0x74>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b903      	cbnz	r3, 80051be <__sflush_r+0x76>
 80051bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80051be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051c0:	602f      	str	r7, [r5, #0]
 80051c2:	b1b9      	cbz	r1, 80051f4 <__sflush_r+0xac>
 80051c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051c8:	4299      	cmp	r1, r3
 80051ca:	d002      	beq.n	80051d2 <__sflush_r+0x8a>
 80051cc:	4628      	mov	r0, r5
 80051ce:	f7ff fbf3 	bl	80049b8 <_free_r>
 80051d2:	2300      	movs	r3, #0
 80051d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d6:	e00d      	b.n	80051f4 <__sflush_r+0xac>
 80051d8:	2301      	movs	r3, #1
 80051da:	4628      	mov	r0, r5
 80051dc:	47b0      	blx	r6
 80051de:	4602      	mov	r2, r0
 80051e0:	1c50      	adds	r0, r2, #1
 80051e2:	d1c9      	bne.n	8005178 <__sflush_r+0x30>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c6      	beq.n	8005178 <__sflush_r+0x30>
 80051ea:	2b1d      	cmp	r3, #29
 80051ec:	d001      	beq.n	80051f2 <__sflush_r+0xaa>
 80051ee:	2b16      	cmp	r3, #22
 80051f0:	d11d      	bne.n	800522e <__sflush_r+0xe6>
 80051f2:	602f      	str	r7, [r5, #0]
 80051f4:	2000      	movs	r0, #0
 80051f6:	e021      	b.n	800523c <__sflush_r+0xf4>
 80051f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051fc:	b21b      	sxth	r3, r3
 80051fe:	e01a      	b.n	8005236 <__sflush_r+0xee>
 8005200:	690f      	ldr	r7, [r1, #16]
 8005202:	2f00      	cmp	r7, #0
 8005204:	d0f6      	beq.n	80051f4 <__sflush_r+0xac>
 8005206:	0793      	lsls	r3, r2, #30
 8005208:	bf18      	it	ne
 800520a:	2300      	movne	r3, #0
 800520c:	680e      	ldr	r6, [r1, #0]
 800520e:	bf08      	it	eq
 8005210:	694b      	ldreq	r3, [r1, #20]
 8005212:	1bf6      	subs	r6, r6, r7
 8005214:	600f      	str	r7, [r1, #0]
 8005216:	608b      	str	r3, [r1, #8]
 8005218:	2e00      	cmp	r6, #0
 800521a:	ddeb      	ble.n	80051f4 <__sflush_r+0xac>
 800521c:	4633      	mov	r3, r6
 800521e:	463a      	mov	r2, r7
 8005220:	4628      	mov	r0, r5
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005228:	47e0      	blx	ip
 800522a:	2800      	cmp	r0, #0
 800522c:	dc07      	bgt.n	800523e <__sflush_r+0xf6>
 800522e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005236:	f04f 30ff 	mov.w	r0, #4294967295
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800523e:	4407      	add	r7, r0
 8005240:	1a36      	subs	r6, r6, r0
 8005242:	e7e9      	b.n	8005218 <__sflush_r+0xd0>
 8005244:	dfbffffe 	.word	0xdfbffffe

08005248 <_fflush_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	690b      	ldr	r3, [r1, #16]
 800524c:	4605      	mov	r5, r0
 800524e:	460c      	mov	r4, r1
 8005250:	b913      	cbnz	r3, 8005258 <_fflush_r+0x10>
 8005252:	2500      	movs	r5, #0
 8005254:	4628      	mov	r0, r5
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	b118      	cbz	r0, 8005262 <_fflush_r+0x1a>
 800525a:	6a03      	ldr	r3, [r0, #32]
 800525c:	b90b      	cbnz	r3, 8005262 <_fflush_r+0x1a>
 800525e:	f7ff f9a9 	bl	80045b4 <__sinit>
 8005262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f3      	beq.n	8005252 <_fflush_r+0xa>
 800526a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800526c:	07d0      	lsls	r0, r2, #31
 800526e:	d404      	bmi.n	800527a <_fflush_r+0x32>
 8005270:	0599      	lsls	r1, r3, #22
 8005272:	d402      	bmi.n	800527a <_fflush_r+0x32>
 8005274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005276:	f7ff fb9c 	bl	80049b2 <__retarget_lock_acquire_recursive>
 800527a:	4628      	mov	r0, r5
 800527c:	4621      	mov	r1, r4
 800527e:	f7ff ff63 	bl	8005148 <__sflush_r>
 8005282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005284:	4605      	mov	r5, r0
 8005286:	07da      	lsls	r2, r3, #31
 8005288:	d4e4      	bmi.n	8005254 <_fflush_r+0xc>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	059b      	lsls	r3, r3, #22
 800528e:	d4e1      	bmi.n	8005254 <_fflush_r+0xc>
 8005290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005292:	f7ff fb8f 	bl	80049b4 <__retarget_lock_release_recursive>
 8005296:	e7dd      	b.n	8005254 <_fflush_r+0xc>

08005298 <__swhatbuf_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a0:	4615      	mov	r5, r2
 80052a2:	2900      	cmp	r1, #0
 80052a4:	461e      	mov	r6, r3
 80052a6:	b096      	sub	sp, #88	@ 0x58
 80052a8:	da0c      	bge.n	80052c4 <__swhatbuf_r+0x2c>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	2100      	movs	r1, #0
 80052ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052b2:	bf14      	ite	ne
 80052b4:	2340      	movne	r3, #64	@ 0x40
 80052b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052ba:	2000      	movs	r0, #0
 80052bc:	6031      	str	r1, [r6, #0]
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	b016      	add	sp, #88	@ 0x58
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	466a      	mov	r2, sp
 80052c6:	f000 f87d 	bl	80053c4 <_fstat_r>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	dbed      	blt.n	80052aa <__swhatbuf_r+0x12>
 80052ce:	9901      	ldr	r1, [sp, #4]
 80052d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052d8:	4259      	negs	r1, r3
 80052da:	4159      	adcs	r1, r3
 80052dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052e0:	e7eb      	b.n	80052ba <__swhatbuf_r+0x22>

080052e2 <__smakebuf_r>:
 80052e2:	898b      	ldrh	r3, [r1, #12]
 80052e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e6:	079d      	lsls	r5, r3, #30
 80052e8:	4606      	mov	r6, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	d507      	bpl.n	80052fe <__smakebuf_r+0x1c>
 80052ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	2301      	movs	r3, #1
 80052f8:	6163      	str	r3, [r4, #20]
 80052fa:	b003      	add	sp, #12
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fe:	466a      	mov	r2, sp
 8005300:	ab01      	add	r3, sp, #4
 8005302:	f7ff ffc9 	bl	8005298 <__swhatbuf_r>
 8005306:	9f00      	ldr	r7, [sp, #0]
 8005308:	4605      	mov	r5, r0
 800530a:	4639      	mov	r1, r7
 800530c:	4630      	mov	r0, r6
 800530e:	f7ff fbbd 	bl	8004a8c <_malloc_r>
 8005312:	b948      	cbnz	r0, 8005328 <__smakebuf_r+0x46>
 8005314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005318:	059a      	lsls	r2, r3, #22
 800531a:	d4ee      	bmi.n	80052fa <__smakebuf_r+0x18>
 800531c:	f023 0303 	bic.w	r3, r3, #3
 8005320:	f043 0302 	orr.w	r3, r3, #2
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	e7e2      	b.n	80052ee <__smakebuf_r+0xc>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800532e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005332:	81a3      	strh	r3, [r4, #12]
 8005334:	9b01      	ldr	r3, [sp, #4]
 8005336:	6020      	str	r0, [r4, #0]
 8005338:	b15b      	cbz	r3, 8005352 <__smakebuf_r+0x70>
 800533a:	4630      	mov	r0, r6
 800533c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005340:	f000 f852 	bl	80053e8 <_isatty_r>
 8005344:	b128      	cbz	r0, 8005352 <__smakebuf_r+0x70>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	431d      	orrs	r5, r3
 8005356:	81a5      	strh	r5, [r4, #12]
 8005358:	e7cf      	b.n	80052fa <__smakebuf_r+0x18>

0800535a <_putc_r>:
 800535a:	b570      	push	{r4, r5, r6, lr}
 800535c:	460d      	mov	r5, r1
 800535e:	4614      	mov	r4, r2
 8005360:	4606      	mov	r6, r0
 8005362:	b118      	cbz	r0, 800536c <_putc_r+0x12>
 8005364:	6a03      	ldr	r3, [r0, #32]
 8005366:	b90b      	cbnz	r3, 800536c <_putc_r+0x12>
 8005368:	f7ff f924 	bl	80045b4 <__sinit>
 800536c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800536e:	07d8      	lsls	r0, r3, #31
 8005370:	d405      	bmi.n	800537e <_putc_r+0x24>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	0599      	lsls	r1, r3, #22
 8005376:	d402      	bmi.n	800537e <_putc_r+0x24>
 8005378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800537a:	f7ff fb1a 	bl	80049b2 <__retarget_lock_acquire_recursive>
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	3b01      	subs	r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	da05      	bge.n	8005394 <_putc_r+0x3a>
 8005388:	69a2      	ldr	r2, [r4, #24]
 800538a:	4293      	cmp	r3, r2
 800538c:	db12      	blt.n	80053b4 <_putc_r+0x5a>
 800538e:	b2eb      	uxtb	r3, r5
 8005390:	2b0a      	cmp	r3, #10
 8005392:	d00f      	beq.n	80053b4 <_putc_r+0x5a>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	701d      	strb	r5, [r3, #0]
 800539c:	b2ed      	uxtb	r5, r5
 800539e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053a0:	07da      	lsls	r2, r3, #31
 80053a2:	d405      	bmi.n	80053b0 <_putc_r+0x56>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	059b      	lsls	r3, r3, #22
 80053a8:	d402      	bmi.n	80053b0 <_putc_r+0x56>
 80053aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ac:	f7ff fb02 	bl	80049b4 <__retarget_lock_release_recursive>
 80053b0:	4628      	mov	r0, r5
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	4629      	mov	r1, r5
 80053b6:	4622      	mov	r2, r4
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7ff f9ec 	bl	8004796 <__swbuf_r>
 80053be:	4605      	mov	r5, r0
 80053c0:	e7ed      	b.n	800539e <_putc_r+0x44>
	...

080053c4 <_fstat_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	2300      	movs	r3, #0
 80053c8:	4d06      	ldr	r5, [pc, #24]	@ (80053e4 <_fstat_r+0x20>)
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	f7fb f9cf 	bl	8000774 <_fstat>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	d102      	bne.n	80053e0 <_fstat_r+0x1c>
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	b103      	cbz	r3, 80053e0 <_fstat_r+0x1c>
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	bd38      	pop	{r3, r4, r5, pc}
 80053e2:	bf00      	nop
 80053e4:	20000290 	.word	0x20000290

080053e8 <_isatty_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	2300      	movs	r3, #0
 80053ec:	4d05      	ldr	r5, [pc, #20]	@ (8005404 <_isatty_r+0x1c>)
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fb f9cd 	bl	8000792 <_isatty>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_isatty_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_isatty_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	20000290 	.word	0x20000290

08005408 <_sbrk_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	2300      	movs	r3, #0
 800540c:	4d05      	ldr	r5, [pc, #20]	@ (8005424 <_sbrk_r+0x1c>)
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fb f9d4 	bl	80007c0 <_sbrk>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_sbrk_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_sbrk_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000290 	.word	0x20000290

08005428 <memchr>:
 8005428:	4603      	mov	r3, r0
 800542a:	b510      	push	{r4, lr}
 800542c:	b2c9      	uxtb	r1, r1
 800542e:	4402      	add	r2, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	4618      	mov	r0, r3
 8005434:	d101      	bne.n	800543a <memchr+0x12>
 8005436:	2000      	movs	r0, #0
 8005438:	e003      	b.n	8005442 <memchr+0x1a>
 800543a:	7804      	ldrb	r4, [r0, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	428c      	cmp	r4, r1
 8005440:	d1f6      	bne.n	8005430 <memchr+0x8>
 8005442:	bd10      	pop	{r4, pc}

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
