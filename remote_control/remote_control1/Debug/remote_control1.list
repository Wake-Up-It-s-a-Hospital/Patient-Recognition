
remote_control1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004554  08004554  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800455c  0800455c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004564  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  080045c0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080045c0  000062c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c33f  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002038  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00014400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000997  00000000  00000000  00015050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017538  00000000  00000000  000159e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee31  00000000  00000000  0002cf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a85  00000000  00000000  0003bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c47d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000c4818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c8210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080043dc 	.word	0x080043dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080043dc 	.word	0x080043dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2d      	ldr	r2, [pc, #180]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <MX_GPIO_Init+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <MX_GPIO_Init+0xd0>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0320 	and.w	r3, r3, #32
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <MX_GPIO_Init+0xd0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0308 	and.w	r3, r3, #8
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80006d2:	4816      	ldr	r0, [pc, #88]	@ (800072c <MX_GPIO_Init+0xd4>)
 80006d4:	f001 f8a2 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_GPIO_Init+0xd8>)
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	4811      	ldr	r0, [pc, #68]	@ (8000734 <MX_GPIO_Init+0xdc>)
 80006ee:	f000 ff11 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80006f2:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4808      	ldr	r0, [pc, #32]	@ (800072c <MX_GPIO_Init+0xd4>)
 800070c:	f000 ff02 	bl	8001514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2028      	movs	r0, #40	@ 0x28
 8000716:	f000 fe14 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071a:	2028      	movs	r0, #40	@ 0x28
 800071c:	f000 fe2d 	bl	800137a <HAL_NVIC_EnableIRQ>

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800
 8000730:	10110000 	.word	0x10110000
 8000734:	40011000 	.word	0x40011000

08000738 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// 블루?��?��(UART) ?��?�� ?��?��?��?��
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a7a      	ldr	r2, [pc, #488]	@ (8000930 <HAL_UART_RxCpltCallback+0x1f8>)
 8000746:	4293      	cmp	r3, r2
 8000748:	f040 81c2 	bne.w	8000ad0 <HAL_UART_RxCpltCallback+0x398>
		//
		for (int i = 0; i < 8; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	e029      	b.n	80007a6 <HAL_UART_RxCpltCallback+0x6e>
			if (uart_buf[(i + 7) % 8] == '.') {
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3307      	adds	r3, #7
 8000756:	425a      	negs	r2, r3
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	f002 0207 	and.w	r2, r2, #7
 8000760:	bf58      	it	pl
 8000762:	4253      	negpl	r3, r2
 8000764:	4a73      	ldr	r2, [pc, #460]	@ (8000934 <HAL_UART_RxCpltCallback+0x1fc>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	2b2e      	cmp	r3, #46	@ 0x2e
 800076a:	d119      	bne.n	80007a0 <HAL_UART_RxCpltCallback+0x68>
				for (int j = 0; j < 8; j++) {
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	e013      	b.n	800079a <HAL_UART_RxCpltCallback+0x62>
					re_data[j] = uart_buf[(i + j) % 8];
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4413      	add	r3, r2
 8000778:	425a      	negs	r2, r3
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	f002 0207 	and.w	r2, r2, #7
 8000782:	bf58      	it	pl
 8000784:	4253      	negpl	r3, r2
 8000786:	4a6b      	ldr	r2, [pc, #428]	@ (8000934 <HAL_UART_RxCpltCallback+0x1fc>)
 8000788:	5cd1      	ldrb	r1, [r2, r3]
 800078a:	4a6b      	ldr	r2, [pc, #428]	@ (8000938 <HAL_UART_RxCpltCallback+0x200>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4413      	add	r3, r2
 8000790:	460a      	mov	r2, r1
 8000792:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++) {
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	3301      	adds	r3, #1
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	2b07      	cmp	r3, #7
 800079e:	dde8      	ble.n	8000772 <HAL_UART_RxCpltCallback+0x3a>
		for (int i = 0; i < 8; i++) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	ddd2      	ble.n	8000752 <HAL_UART_RxCpltCallback+0x1a>
				}
			}
		}

		// ?��?�� �??��
		sscanf(re_data, "%d,%d.", &x_data, &y_data);
 80007ac:	4b63      	ldr	r3, [pc, #396]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80007ae:	4a64      	ldr	r2, [pc, #400]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 80007b0:	4964      	ldr	r1, [pc, #400]	@ (8000944 <HAL_UART_RxCpltCallback+0x20c>)
 80007b2:	4861      	ldr	r0, [pc, #388]	@ (8000938 <HAL_UART_RxCpltCallback+0x200>)
 80007b4:	f002 ffe6 	bl	8003784 <siscanf>
		if (y_data == 101)
 80007b8:	4b60      	ldr	r3, [pc, #384]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b65      	cmp	r3, #101	@ 0x65
 80007be:	d102      	bne.n	80007c6 <HAL_UART_RxCpltCallback+0x8e>
			y_data = 100;
 80007c0:	4b5e      	ldr	r3, [pc, #376]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80007c2:	2264      	movs	r2, #100	@ 0x64
 80007c4:	601a      	str	r2, [r3, #0]

		x_data = x_data - 50;
 80007c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3b32      	subs	r3, #50	@ 0x32
 80007cc:	4a5c      	ldr	r2, [pc, #368]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 80007ce:	6013      	str	r3, [r2, #0]
		y_data = y_data - 50;
 80007d0:	4b5a      	ldr	r3, [pc, #360]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3b32      	subs	r3, #50	@ 0x32
 80007d6:	4a59      	ldr	r2, [pc, #356]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80007d8:	6013      	str	r3, [r2, #0]

		// ?��?�� 차동 구동 코드
		if (x_data >= 0 && y_data >= 0) {
 80007da:	4b59      	ldr	r3, [pc, #356]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db50      	blt.n	8000884 <HAL_UART_RxCpltCallback+0x14c>
 80007e2:	4b56      	ldr	r3, [pc, #344]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db4c      	blt.n	8000884 <HAL_UART_RxCpltCallback+0x14c>
			x_calc = (float)x_data ;
 80007ea:	4b55      	ldr	r3, [pc, #340]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd6e 	bl	80002d0 <__aeabi_i2f>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a54      	ldr	r2, [pc, #336]	@ (8000948 <HAL_UART_RxCpltCallback+0x210>)
 80007f8:	6013      	str	r3, [r2, #0]
			PWM1_value = (uint32_t)x_calc;
 80007fa:	4b53      	ldr	r3, [pc, #332]	@ (8000948 <HAL_UART_RxCpltCallback+0x210>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff0a 	bl	8000618 <__aeabi_f2uiz>
 8000804:	4603      	mov	r3, r0
 8000806:	4a51      	ldr	r2, [pc, #324]	@ (800094c <HAL_UART_RxCpltCallback+0x214>)
 8000808:	6013      	str	r3, [r2, #0]
			y_calc = (float)x_data  * (100 - (float)y_data) / 100;
 800080a:	4b4d      	ldr	r3, [pc, #308]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fd5e 	bl	80002d0 <__aeabi_i2f>
 8000814:	4604      	mov	r4, r0
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fd58 	bl	80002d0 <__aeabi_i2f>
 8000820:	4603      	mov	r3, r0
 8000822:	4619      	mov	r1, r3
 8000824:	484a      	ldr	r0, [pc, #296]	@ (8000950 <HAL_UART_RxCpltCallback+0x218>)
 8000826:	f7ff fc9d 	bl	8000164 <__aeabi_fsub>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	4620      	mov	r0, r4
 8000830:	f7ff fda2 	bl	8000378 <__aeabi_fmul>
 8000834:	4603      	mov	r3, r0
 8000836:	4946      	ldr	r1, [pc, #280]	@ (8000950 <HAL_UART_RxCpltCallback+0x218>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe51 	bl	80004e0 <__aeabi_fdiv>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <HAL_UART_RxCpltCallback+0x21c>)
 8000844:	601a      	str	r2, [r3, #0]
			PWM2_value = (uint32_t)y_calc;
 8000846:	4b43      	ldr	r3, [pc, #268]	@ (8000954 <HAL_UART_RxCpltCallback+0x21c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fee4 	bl	8000618 <__aeabi_f2uiz>
 8000850:	4603      	mov	r3, r0
 8000852:	4a41      	ldr	r2, [pc, #260]	@ (8000958 <HAL_UART_RxCpltCallback+0x220>)
 8000854:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800085c:	483f      	ldr	r0, [pc, #252]	@ (800095c <HAL_UART_RxCpltCallback+0x224>)
 800085e:	f000 ffdd 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000868:	483c      	ldr	r0, [pc, #240]	@ (800095c <HAL_UART_RxCpltCallback+0x224>)
 800086a:	f000 ffd7 	bl	800181c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 800086e:	4b3c      	ldr	r3, [pc, #240]	@ (8000960 <HAL_UART_RxCpltCallback+0x228>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a39      	ldr	r2, [pc, #228]	@ (8000958 <HAL_UART_RxCpltCallback+0x220>)
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8000878:	4b39      	ldr	r3, [pc, #228]	@ (8000960 <HAL_UART_RxCpltCallback+0x228>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a33      	ldr	r2, [pc, #204]	@ (800094c <HAL_UART_RxCpltCallback+0x214>)
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	639a      	str	r2, [r3, #56]	@ 0x38
 8000882:	e120      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x38e>
		}
		else if (x_data >= 0 && y_data < 0) {
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db6b      	blt.n	8000964 <HAL_UART_RxCpltCallback+0x22c>
 800088c:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	da67      	bge.n	8000964 <HAL_UART_RxCpltCallback+0x22c>
			x_calc = (float)x_data  * (100 + (float)y_data) / 100;
 8000894:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd19 	bl	80002d0 <__aeabi_i2f>
 800089e:	4604      	mov	r4, r0
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <HAL_UART_RxCpltCallback+0x204>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd13 	bl	80002d0 <__aeabi_i2f>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4928      	ldr	r1, [pc, #160]	@ (8000950 <HAL_UART_RxCpltCallback+0x218>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fc5a 	bl	8000168 <__addsf3>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4620      	mov	r0, r4
 80008ba:	f7ff fd5d 	bl	8000378 <__aeabi_fmul>
 80008be:	4603      	mov	r3, r0
 80008c0:	4923      	ldr	r1, [pc, #140]	@ (8000950 <HAL_UART_RxCpltCallback+0x218>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe0c 	bl	80004e0 <__aeabi_fdiv>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <HAL_UART_RxCpltCallback+0x210>)
 80008ce:	601a      	str	r2, [r3, #0]
			PWM1_value = (uint32_t)x_calc;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <HAL_UART_RxCpltCallback+0x210>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe9f 	bl	8000618 <__aeabi_f2uiz>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a1b      	ldr	r2, [pc, #108]	@ (800094c <HAL_UART_RxCpltCallback+0x214>)
 80008de:	6013      	str	r3, [r2, #0]
			y_calc = (float)x_data ;
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <HAL_UART_RxCpltCallback+0x208>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fcf3 	bl	80002d0 <__aeabi_i2f>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_UART_RxCpltCallback+0x21c>)
 80008ee:	6013      	str	r3, [r2, #0]
			PWM2_value = (uint32_t)y_calc;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_UART_RxCpltCallback+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe8f 	bl	8000618 <__aeabi_f2uiz>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <HAL_UART_RxCpltCallback+0x220>)
 80008fe:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000906:	4815      	ldr	r0, [pc, #84]	@ (800095c <HAL_UART_RxCpltCallback+0x224>)
 8000908:	f000 ff88 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000912:	4812      	ldr	r0, [pc, #72]	@ (800095c <HAL_UART_RxCpltCallback+0x224>)
 8000914:	f000 ff82 	bl	800181c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_UART_RxCpltCallback+0x228>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_UART_RxCpltCallback+0x220>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_UART_RxCpltCallback+0x228>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a09      	ldr	r2, [pc, #36]	@ (800094c <HAL_UART_RxCpltCallback+0x214>)
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	639a      	str	r2, [r3, #56]	@ 0x38
 800092c:	e0cb      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x38e>
 800092e:	bf00      	nop
 8000930:	40013800 	.word	0x40013800
 8000934:	20000078 	.word	0x20000078
 8000938:	20000080 	.word	0x20000080
 800093c:	2000008c 	.word	0x2000008c
 8000940:	20000088 	.word	0x20000088
 8000944:	080043f4 	.word	0x080043f4
 8000948:	20000090 	.word	0x20000090
 800094c:	20000098 	.word	0x20000098
 8000950:	42c80000 	.word	0x42c80000
 8000954:	20000094 	.word	0x20000094
 8000958:	2000009c 	.word	0x2000009c
 800095c:	40010800 	.word	0x40010800
 8000960:	200000a4 	.word	0x200000a4
		}
		else if (x_data < 0 && y_data >= 0) {
 8000964:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x3a0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da54      	bge.n	8000a16 <HAL_UART_RxCpltCallback+0x2de>
 800096c:	4b5b      	ldr	r3, [pc, #364]	@ (8000adc <HAL_UART_RxCpltCallback+0x3a4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db50      	blt.n	8000a16 <HAL_UART_RxCpltCallback+0x2de>
			x_calc = fabsf((float)x_data) ;
 8000974:	4b58      	ldr	r3, [pc, #352]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x3a0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fca9 	bl	80002d0 <__aeabi_i2f>
 800097e:	4603      	mov	r3, r0
 8000980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000984:	4a56      	ldr	r2, [pc, #344]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x3a8>)
 8000986:	6013      	str	r3, [r2, #0]
			PWM1_value = (uint32_t)x_calc;
 8000988:	4b55      	ldr	r3, [pc, #340]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x3a8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe43 	bl	8000618 <__aeabi_f2uiz>
 8000992:	4603      	mov	r3, r0
 8000994:	4a53      	ldr	r2, [pc, #332]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x3ac>)
 8000996:	6013      	str	r3, [r2, #0]
			y_calc = fabsf((float)x_data)* (100 - (float)y_data) / 100;
 8000998:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x3a0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc97 	bl	80002d0 <__aeabi_i2f>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80009a8:	4b4c      	ldr	r3, [pc, #304]	@ (8000adc <HAL_UART_RxCpltCallback+0x3a4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc8f 	bl	80002d0 <__aeabi_i2f>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4619      	mov	r1, r3
 80009b6:	484c      	ldr	r0, [pc, #304]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x3b0>)
 80009b8:	f7ff fbd4 	bl	8000164 <__aeabi_fsub>
 80009bc:	4603      	mov	r3, r0
 80009be:	4619      	mov	r1, r3
 80009c0:	4620      	mov	r0, r4
 80009c2:	f7ff fcd9 	bl	8000378 <__aeabi_fmul>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4947      	ldr	r1, [pc, #284]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x3b0>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fd88 	bl	80004e0 <__aeabi_fdiv>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b45      	ldr	r3, [pc, #276]	@ (8000aec <HAL_UART_RxCpltCallback+0x3b4>)
 80009d6:	601a      	str	r2, [r3, #0]
			PWM2_value = (uint32_t)y_calc;
 80009d8:	4b44      	ldr	r3, [pc, #272]	@ (8000aec <HAL_UART_RxCpltCallback+0x3b4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe1b 	bl	8000618 <__aeabi_f2uiz>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a42      	ldr	r2, [pc, #264]	@ (8000af0 <HAL_UART_RxCpltCallback+0x3b8>)
 80009e6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ee:	4841      	ldr	r0, [pc, #260]	@ (8000af4 <HAL_UART_RxCpltCallback+0x3bc>)
 80009f0:	f000 ff14 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009fa:	483e      	ldr	r0, [pc, #248]	@ (8000af4 <HAL_UART_RxCpltCallback+0x3bc>)
 80009fc:	f000 ff0e 	bl	800181c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 8000a00:	4b3d      	ldr	r3, [pc, #244]	@ (8000af8 <HAL_UART_RxCpltCallback+0x3c0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a3a      	ldr	r2, [pc, #232]	@ (8000af0 <HAL_UART_RxCpltCallback+0x3b8>)
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <HAL_UART_RxCpltCallback+0x3c0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a35      	ldr	r2, [pc, #212]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x3ac>)
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	639a      	str	r2, [r3, #56]	@ 0x38
		else if (x_data < 0 && y_data >= 0) {
 8000a14:	e057      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x38e>
		}
		else if (x_data < 0 && y_data < 0) {
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x3a0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da53      	bge.n	8000ac6 <HAL_UART_RxCpltCallback+0x38e>
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000adc <HAL_UART_RxCpltCallback+0x3a4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da4f      	bge.n	8000ac6 <HAL_UART_RxCpltCallback+0x38e>
			x_calc = fabsf((float)x_data) * (100 + (float)y_data) / 100;
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x3a0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fc50 	bl	80002d0 <__aeabi_i2f>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <HAL_UART_RxCpltCallback+0x3a4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fc48 	bl	80002d0 <__aeabi_i2f>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4929      	ldr	r1, [pc, #164]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x3b0>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fb8f 	bl	8000168 <__addsf3>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff fc92 	bl	8000378 <__aeabi_fmul>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4924      	ldr	r1, [pc, #144]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x3b0>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fd41 	bl	80004e0 <__aeabi_fdiv>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x3a8>)
 8000a64:	601a      	str	r2, [r3, #0]
			PWM1_value = (uint32_t)x_calc;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x3a8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd4 	bl	8000618 <__aeabi_f2uiz>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x3ac>)
 8000a74:	6013      	str	r3, [r2, #0]
			y_calc = fabsf((float)x_data);
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x3a0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fc28 	bl	80002d0 <__aeabi_i2f>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_UART_RxCpltCallback+0x3b4>)
 8000a88:	6013      	str	r3, [r2, #0]
			PWM2_value = (uint32_t)y_calc;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_UART_RxCpltCallback+0x3b4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fdc2 	bl	8000618 <__aeabi_f2uiz>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_UART_RxCpltCallback+0x3b8>)
 8000a98:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aa0:	4814      	ldr	r0, [pc, #80]	@ (8000af4 <HAL_UART_RxCpltCallback+0x3bc>)
 8000aa2:	f000 febb 	bl	800181c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aac:	4811      	ldr	r0, [pc, #68]	@ (8000af4 <HAL_UART_RxCpltCallback+0x3bc>)
 8000aae:	f000 feb5 	bl	800181c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, PWM2_value);
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_UART_RxCpltCallback+0x3c0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_UART_RxCpltCallback+0x3b8>)
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, PWM1_value);
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_UART_RxCpltCallback+0x3c0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x3ac>)
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		// ?��?�� ?��?�� 받을 �?�?
		HAL_UART_Receive_IT(&huart1, &uart_buf, 8);
 8000ac6:	2208      	movs	r2, #8
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <HAL_UART_RxCpltCallback+0x3c4>)
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <HAL_UART_RxCpltCallback+0x3c8>)
 8000acc:	f002 f922 	bl	8002d14 <HAL_UART_Receive_IT>
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	2000008c 	.word	0x2000008c
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	20000098 	.word	0x20000098
 8000ae8:	42c80000 	.word	0x42c80000
 8000aec:	20000094 	.word	0x20000094
 8000af0:	2000009c 	.word	0x2000009c
 8000af4:	40010800 	.word	0x40010800
 8000af8:	200000a4 	.word	0x200000a4
 8000afc:	20000078 	.word	0x20000078
 8000b00:	200000ec 	.word	0x200000ec

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fae2 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f81e 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f7ff fda2 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b14:	f000 fa0c 	bl	8000f30 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b18:	f000 f910 	bl	8000d3c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b1c:	f000 f9de 	bl	8000edc <MX_USART1_UART_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b20:	2100      	movs	r1, #0
 8000b22:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <main+0x3c>)
 8000b24:	f001 fb6c 	bl	8002200 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <main+0x3c>)
 8000b2c:	f001 fb68 	bl	8002200 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart1, &uart_buf, 8);
 8000b30:	2208      	movs	r2, #8
 8000b32:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <main+0x40>)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <main+0x44>)
 8000b36:	f002 f8ed 	bl	8002d14 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3a:	bf00      	nop
 8000b3c:	e7fd      	b.n	8000b3a <main+0x36>
 8000b3e:	bf00      	nop
 8000b40:	200000a4 	.word	0x200000a4
 8000b44:	20000078 	.word	0x20000078
 8000b48:	200000ec 	.word	0x200000ec

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	@ 0x40
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	2228      	movs	r2, #40	@ 0x28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fe3e 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b72:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2302      	movs	r3, #2
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b8a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fe7b 	bl	8001890 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f819 	bl	8000bd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f8e8 	bl	8001d94 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bca:	f000 f804 	bl	8000bd6 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3740      	adds	r7, #64	@ 0x40
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bda:	b672      	cpsid	i
}
 8000bdc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bde:	bf00      	nop
 8000be0:	e7fd      	b.n	8000bde <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	@ (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <NMI_Handler+0x4>

08000c50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <MemManage_Handler+0x4>

08000c60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 fa60 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <USART1_IRQHandler+0x10>)
 8000ca6:	f002 f85b 	bl	8002d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000ec 	.word	0x200000ec

08000cb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cbc:	f000 fdc6 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	@ (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f002 fd7a 	bl	80037ec <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20005000 	.word	0x20005000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200000a0 	.word	0x200000a0
 8000d2c:	200002c8 	.word	0x200002c8

08000d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	@ 0x38
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d6c:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d6e:	4a32      	ldr	r2, [pc, #200]	@ (8000e38 <MX_TIM3_Init+0xfc>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000d72:	4b30      	ldr	r3, [pc, #192]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d74:	2247      	movs	r2, #71	@ 0x47
 8000d76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b2e      	ldr	r3, [pc, #184]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d80:	2263      	movs	r2, #99	@ 0x63
 8000d82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b2b      	ldr	r3, [pc, #172]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d90:	4828      	ldr	r0, [pc, #160]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000d92:	f001 f98d 	bl	80020b0 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d9c:	f7ff ff1b 	bl	8000bd6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4821      	ldr	r0, [pc, #132]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000dae:	f001 fb8b 	bl	80024c8 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000db8:	f7ff ff0d 	bl	8000bd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dbc:	481d      	ldr	r0, [pc, #116]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000dbe:	f001 f9c6 	bl	800214e <HAL_TIM_PWM_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000dc8:	f7ff ff05 	bl	8000bd6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4816      	ldr	r0, [pc, #88]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000ddc:	f001 feec 	bl	8002bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000de6:	f7ff fef6 	bl	8000bd6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dea:	2360      	movs	r3, #96	@ 0x60
 8000dec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000e02:	f001 fa9f 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e0c:	f7ff fee3 	bl	8000bd6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2204      	movs	r2, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000e18:	f001 fa94 	bl	8002344 <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000e22:	f7ff fed8 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e26:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <MX_TIM3_Init+0xf8>)
 8000e28:	f000 f826 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000e2c:	bf00      	nop
 8000e2e:	3738      	adds	r7, #56	@ 0x38
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	40000400 	.word	0x40000400

08000e3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <HAL_TIM_Base_MspInit+0x34>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10b      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <HAL_TIM_Base_MspInit+0x38>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_TIM_Base_MspInit+0x38>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_TIM_Base_MspInit+0x38>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40000400 	.word	0x40000400
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <HAL_TIM_MspPostInit+0x58>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d117      	bne.n	8000ec8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_TIM_MspPostInit+0x5c>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <HAL_TIM_MspPostInit+0x5c>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_TIM_MspPostInit+0x5c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb0:	23c0      	movs	r3, #192	@ 0xc0
 8000eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <HAL_TIM_MspPostInit+0x60>)
 8000ec4:	f000 fb26 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800

08000edc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_USART1_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_USART1_UART_Init+0x4c>)
 8000f14:	f001 feae 	bl	8002c74 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f7ff fe5a 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000ec 	.word	0x200000ec
 8000f2c:	40013800 	.word	0x40013800

08000f30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f001 fe84 	bl	8002c74 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f7ff fe30 	bl	8000bd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000134 	.word	0x20000134
 8000f80:	40004400 	.word	0x40004400

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a35      	ldr	r2, [pc, #212]	@ (8001074 <HAL_UART_MspInit+0xf0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d13a      	bne.n	800101a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa4:	4b34      	ldr	r3, [pc, #208]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a33      	ldr	r2, [pc, #204]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4824      	ldr	r0, [pc, #144]	@ (800107c <HAL_UART_MspInit+0xf8>)
 8000fea:	f000 fa93 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4619      	mov	r1, r3
 8001002:	481e      	ldr	r0, [pc, #120]	@ (800107c <HAL_UART_MspInit+0xf8>)
 8001004:	f000 fa86 	bl	8001514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2025      	movs	r0, #37	@ 0x25
 800100e:	f000 f998 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001012:	2025      	movs	r0, #37	@ 0x25
 8001014:	f000 f9b1 	bl	800137a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001018:	e028      	b.n	800106c <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <HAL_UART_MspInit+0xfc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d123      	bne.n	800106c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4a13      	ldr	r2, [pc, #76]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 800102a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102e:	61d3      	str	r3, [r2, #28]
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_UART_MspInit+0xf4>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001054:	230c      	movs	r3, #12
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2302      	movs	r3, #2
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_UART_MspInit+0xf8>)
 8001068:	f000 fa54 	bl	8001514 <HAL_GPIO_Init>
}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40013800 	.word	0x40013800
 8001078:	40021000 	.word	0x40021000
 800107c:	40010800 	.word	0x40010800
 8001080:	40004400 	.word	0x40004400

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff fe54 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800108a:	490c      	ldr	r1, [pc, #48]	@ (80010bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800108c:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010a0:	4c09      	ldr	r4, [pc, #36]	@ (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f002 fba3 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fd27 	bl	8000b04 <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010c0:	08004564 	.word	0x08004564
  ldr r2, =_sbss
 80010c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010c8:	200002c8 	.word	0x200002c8

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_Init+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <HAL_Init+0x28>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f923 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fd7a 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f93b 	bl	8001396 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f903 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	@ (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000008 	.word	0x20000008
 800117c:	2000017c 	.word	0x2000017c

08001180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	@ (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	2000017c 	.word	0x2000017c

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4906      	ldr	r1, [pc, #24]	@ (800122c <__NVIC_EnableIRQ+0x34>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff90 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff2d 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff42 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff35 	bl	80011f8 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d008      	beq.n	80013d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e020      	b.n	800141a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d005      	beq.n	8001448 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e051      	b.n	80014ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 020e 	bic.w	r2, r2, #14
 8001456:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a22      	ldr	r2, [pc, #136]	@ (80014f8 <HAL_DMA_Abort_IT+0xd4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d029      	beq.n	80014c6 <HAL_DMA_Abort_IT+0xa2>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <HAL_DMA_Abort_IT+0xd8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d022      	beq.n	80014c2 <HAL_DMA_Abort_IT+0x9e>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1f      	ldr	r2, [pc, #124]	@ (8001500 <HAL_DMA_Abort_IT+0xdc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01a      	beq.n	80014bc <HAL_DMA_Abort_IT+0x98>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <HAL_DMA_Abort_IT+0xe0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d012      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x92>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <HAL_DMA_Abort_IT+0xe4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00a      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x8c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <HAL_DMA_Abort_IT+0xe8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d102      	bne.n	80014aa <HAL_DMA_Abort_IT+0x86>
 80014a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014a8:	e00e      	b.n	80014c8 <HAL_DMA_Abort_IT+0xa4>
 80014aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014ae:	e00b      	b.n	80014c8 <HAL_DMA_Abort_IT+0xa4>
 80014b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b4:	e008      	b.n	80014c8 <HAL_DMA_Abort_IT+0xa4>
 80014b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ba:	e005      	b.n	80014c8 <HAL_DMA_Abort_IT+0xa4>
 80014bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c0:	e002      	b.n	80014c8 <HAL_DMA_Abort_IT+0xa4>
 80014c2:	2310      	movs	r3, #16
 80014c4:	e000      	b.n	80014c8 <HAL_DMA_Abort_IT+0xa4>
 80014c6:	2301      	movs	r3, #1
 80014c8:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <HAL_DMA_Abort_IT+0xec>)
 80014ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
    } 
  }
  return status;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020008 	.word	0x40020008
 80014fc:	4002001c 	.word	0x4002001c
 8001500:	40020030 	.word	0x40020030
 8001504:	40020044 	.word	0x40020044
 8001508:	40020058 	.word	0x40020058
 800150c:	4002006c 	.word	0x4002006c
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b08b      	sub	sp, #44	@ 0x2c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e169      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001528:	2201      	movs	r2, #1
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8158 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a9a      	ldr	r2, [pc, #616]	@ (80017b4 <HAL_GPIO_Init+0x2a0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d05e      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001550:	4a98      	ldr	r2, [pc, #608]	@ (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d875      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001556:	4a98      	ldr	r2, [pc, #608]	@ (80017b8 <HAL_GPIO_Init+0x2a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d058      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 800155c:	4a96      	ldr	r2, [pc, #600]	@ (80017b8 <HAL_GPIO_Init+0x2a4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d86f      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001562:	4a96      	ldr	r2, [pc, #600]	@ (80017bc <HAL_GPIO_Init+0x2a8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d052      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001568:	4a94      	ldr	r2, [pc, #592]	@ (80017bc <HAL_GPIO_Init+0x2a8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d869      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800156e:	4a94      	ldr	r2, [pc, #592]	@ (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04c      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001574:	4a92      	ldr	r2, [pc, #584]	@ (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d863      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800157a:	4a92      	ldr	r2, [pc, #584]	@ (80017c4 <HAL_GPIO_Init+0x2b0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d046      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001580:	4a90      	ldr	r2, [pc, #576]	@ (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d85d      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001586:	2b12      	cmp	r3, #18
 8001588:	d82a      	bhi.n	80015e0 <HAL_GPIO_Init+0xcc>
 800158a:	2b12      	cmp	r3, #18
 800158c:	d859      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800158e:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <HAL_GPIO_Init+0x80>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	0800160f 	.word	0x0800160f
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015fb 	.word	0x080015fb
 80015a0:	0800163d 	.word	0x0800163d
 80015a4:	08001643 	.word	0x08001643
 80015a8:	08001643 	.word	0x08001643
 80015ac:	08001643 	.word	0x08001643
 80015b0:	08001643 	.word	0x08001643
 80015b4:	08001643 	.word	0x08001643
 80015b8:	08001643 	.word	0x08001643
 80015bc:	08001643 	.word	0x08001643
 80015c0:	08001643 	.word	0x08001643
 80015c4:	08001643 	.word	0x08001643
 80015c8:	08001643 	.word	0x08001643
 80015cc:	08001643 	.word	0x08001643
 80015d0:	08001643 	.word	0x08001643
 80015d4:	08001643 	.word	0x08001643
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	08001605 	.word	0x08001605
 80015e0:	4a79      	ldr	r2, [pc, #484]	@ (80017c8 <HAL_GPIO_Init+0x2b4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e029      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e024      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01f      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e01a      	b.n	8001644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e013      	b.n	8001644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e009      	b.n	8001644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e003      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x130>
          break;
 8001642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	@ 0xff
 8001648:	d801      	bhi.n	800164e <HAL_GPIO_Init+0x13a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_Init+0x13e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	@ 0xff
 8001658:	d802      	bhi.n	8001660 <HAL_GPIO_Init+0x14c>
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x152>
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	3b08      	subs	r3, #8
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	210f      	movs	r1, #15
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80b1 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001694:	4b4d      	ldr	r3, [pc, #308]	@ (80017cc <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a4c      	ldr	r2, [pc, #304]	@ (80017cc <HAL_GPIO_Init+0x2b8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ac:	4a48      	ldr	r2, [pc, #288]	@ (80017d0 <HAL_GPIO_Init+0x2bc>)
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a40      	ldr	r2, [pc, #256]	@ (80017d4 <HAL_GPIO_Init+0x2c0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3f      	ldr	r2, [pc, #252]	@ (80017d8 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1e8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	@ (80017dc <HAL_GPIO_Init+0x2c8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1e4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	@ (80017e0 <HAL_GPIO_Init+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1e0>
 80016f0:	2303      	movs	r3, #3
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f4:	2304      	movs	r3, #4
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 8001700:	2300      	movs	r3, #0
 8001702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001712:	492f      	ldr	r1, [pc, #188]	@ (80017d0 <HAL_GPIO_Init+0x2bc>)
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172c:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	492c      	ldr	r1, [pc, #176]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800173a:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4928      	ldr	r1, [pc, #160]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4922      	ldr	r1, [pc, #136]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	491e      	ldr	r1, [pc, #120]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4918      	ldr	r1, [pc, #96]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	4914      	ldr	r1, [pc, #80]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	490e      	ldr	r1, [pc, #56]	@ (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e021      	b.n	80017f6 <HAL_GPIO_Init+0x2e2>
 80017b2:	bf00      	nop
 80017b4:	10320000 	.word	0x10320000
 80017b8:	10310000 	.word	0x10310000
 80017bc:	10220000 	.word	0x10220000
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10110000 	.word	0x10110000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40011400 	.word	0x40011400
 80017e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4909      	ldr	r1, [pc, #36]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f ae8e 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	372c      	adds	r7, #44	@ 0x2c
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	611a      	str	r2, [r3, #16]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f806 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e272      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8087 	beq.w	80019be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b0:	4b92      	ldr	r3, [pc, #584]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d00c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018bc:	4b8f      	ldr	r3, [pc, #572]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d112      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
 80018c8:	4b8c      	ldr	r3, [pc, #560]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d10b      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	4b89      	ldr	r3, [pc, #548]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d06c      	beq.n	80019bc <HAL_RCC_OscConfig+0x12c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d168      	bne.n	80019bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e24c      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x76>
 80018f8:	4b80      	ldr	r3, [pc, #512]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a7f      	ldr	r2, [pc, #508]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e02e      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b7b      	ldr	r3, [pc, #492]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7a      	ldr	r2, [pc, #488]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e01d      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0xbc>
 8001932:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a71      	ldr	r2, [pc, #452]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6e      	ldr	r2, [pc, #440]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 800194c:	4b6b      	ldr	r3, [pc, #428]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a67      	ldr	r2, [pc, #412]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fc08 	bl	8001180 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fc04 	bl	8001180 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e200      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b5d      	ldr	r3, [pc, #372]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0xe4>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fbf4 	bl	8001180 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fbf0 	bl	8001180 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	@ 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1ec      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x10c>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ca:	4b4c      	ldr	r3, [pc, #304]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
 80019e2:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b43      	ldr	r3, [pc, #268]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1c0      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3d      	ldr	r3, [pc, #244]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4939      	ldr	r1, [pc, #228]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b36      	ldr	r3, [pc, #216]	@ (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fba9 	bl	8001180 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fba5 	bl	8001180 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e1a1      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4927      	ldr	r1, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb88 	bl	8001180 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff fb84 	bl	8001180 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e180      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fb68 	bl	8001180 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fb64 	bl	8001180 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e160      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 face 	bl	8002074 <RCC_Delay>
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fb4e 	bl	8001180 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fb4a 	bl	8001180 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d908      	bls.n	8001b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e146      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420000 	.word	0x42420000
 8001b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b92      	ldr	r3, [pc, #584]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e9      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a6 	beq.w	8001c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b8b      	ldr	r3, [pc, #556]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b88      	ldr	r3, [pc, #544]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a87      	ldr	r2, [pc, #540]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b85      	ldr	r3, [pc, #532]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b82      	ldr	r3, [pc, #520]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb0b 	bl	8001180 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff fb07 	bl	8001180 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	@ 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e103      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b75      	ldr	r3, [pc, #468]	@ (8001d58 <HAL_RCC_OscConfig+0x4c8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e02d      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x334>
 8001baa:	4b6a      	ldr	r3, [pc, #424]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a69      	ldr	r2, [pc, #420]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b67      	ldr	r3, [pc, #412]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a66      	ldr	r2, [pc, #408]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	e01c      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x356>
 8001bcc:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a60      	ldr	r2, [pc, #384]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	e00b      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001be6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a5a      	ldr	r2, [pc, #360]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b58      	ldr	r3, [pc, #352]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a57      	ldr	r2, [pc, #348]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d015      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fabb 	bl	8001180 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fab7 	bl	8001180 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0b1      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ee      	beq.n	8001c0e <HAL_RCC_OscConfig+0x37e>
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7ff faa5 	bl	8001180 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7ff faa1 	bl	8001180 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e09b      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	4b40      	ldr	r3, [pc, #256]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ee      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a3b      	ldr	r2, [pc, #236]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d061      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d146      	bne.n	8001d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b33      	ldr	r3, [pc, #204]	@ (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fa75 	bl	8001180 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7ff fa71 	bl	8001180 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e06d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4921      	ldr	r1, [pc, #132]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a19      	ldr	r1, [r3, #32]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	491b      	ldr	r1, [pc, #108]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa45 	bl	8001180 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff fa41 	bl	8001180 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e03d      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
 8001d18:	e035      	b.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_RCC_OscConfig+0x4cc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fa2e 	bl	8001180 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fa2a 	bl	8001180 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e026      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x498>
 8001d46:	e01e      	b.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e019      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <HAL_RCC_OscConfig+0x500>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0d0      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d910      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4965      	ldr	r1, [pc, #404]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a58      	ldr	r2, [pc, #352]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d040      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d115      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e073      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b39      	ldr	r3, [pc, #228]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4936      	ldr	r1, [pc, #216]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7ff f97c 	bl	8001180 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff f978 	bl	8001180 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e053      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d210      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4922      	ldr	r1, [pc, #136]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490a      	ldr	r1, [pc, #40]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <HAL_RCC_ClockConfig+0x1cc>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_RCC_ClockConfig+0x1d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f8da 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004408 	.word	0x08004408
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d002      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x30>
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_GetSysClockFreq+0x36>
 8001f96:	e027      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	613b      	str	r3, [r7, #16]
      break;
 8001f9c:	e027      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0c5b      	lsrs	r3, r3, #17
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	fb03 f202 	mul.w	r2, r3, r2
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e004      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	613b      	str	r3, [r7, #16]
      break;
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fea:	613b      	str	r3, [r7, #16]
      break;
 8001fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fee:	693b      	ldr	r3, [r7, #16]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	007a1200 	.word	0x007a1200
 8002004:	08004420 	.word	0x08004420
 8002008:	08004430 	.word	0x08004430
 800200c:	003d0900 	.word	0x003d0900

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b02      	ldr	r3, [pc, #8]	@ (8002020 <HAL_RCC_GetHCLKFreq+0x10>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff2 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	@ (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	08004418 	.word	0x08004418

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002050:	f7ff ffde 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	0adb      	lsrs	r3, r3, #11
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	@ (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	08004418 	.word	0x08004418

08002074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <RCC_Delay+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <RCC_Delay+0x38>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a5b      	lsrs	r3, r3, #9
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002090:	bf00      	nop
  }
  while (Delay --);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <RCC_Delay+0x1c>
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000000 	.word	0x20000000
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e041      	b.n	8002146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe feb0 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 fab2 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e041      	b.n	80021e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f839 	bl	80021ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f000 fa63 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_TIM_PWM_Start+0x24>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e022      	b.n	800226a <HAL_TIM_PWM_Start+0x6a>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d109      	bne.n	800223e <HAL_TIM_PWM_Start+0x3e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	e015      	b.n	800226a <HAL_TIM_PWM_Start+0x6a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d109      	bne.n	8002258 <HAL_TIM_PWM_Start+0x58>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e008      	b.n	800226a <HAL_TIM_PWM_Start+0x6a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e05e      	b.n	8002330 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_TIM_PWM_Start+0x82>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002280:	e013      	b.n	80022aa <HAL_TIM_PWM_Start+0xaa>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d104      	bne.n	8002292 <HAL_TIM_PWM_Start+0x92>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002290:	e00b      	b.n	80022aa <HAL_TIM_PWM_Start+0xaa>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d104      	bne.n	80022a2 <HAL_TIM_PWM_Start+0xa2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022a0:	e003      	b.n	80022aa <HAL_TIM_PWM_Start+0xaa>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2201      	movs	r2, #1
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fc5c 	bl	8002b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002338 <HAL_TIM_PWM_Start+0x138>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d107      	bne.n	80022d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <HAL_TIM_PWM_Start+0x138>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00e      	beq.n	80022fa <HAL_TIM_PWM_Start+0xfa>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e4:	d009      	beq.n	80022fa <HAL_TIM_PWM_Start+0xfa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a14      	ldr	r2, [pc, #80]	@ (800233c <HAL_TIM_PWM_Start+0x13c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_TIM_PWM_Start+0xfa>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a12      	ldr	r2, [pc, #72]	@ (8002340 <HAL_TIM_PWM_Start+0x140>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d111      	bne.n	800231e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d010      	beq.n	800232e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231c:	e007      	b.n	800232e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40000400 	.word	0x40000400
 8002340:	40000800 	.word	0x40000800

08002344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800235e:	2302      	movs	r3, #2
 8002360:	e0ae      	b.n	80024c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	f200 809f 	bhi.w	80024b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023ad 	.word	0x080023ad
 800237c:	080024b1 	.word	0x080024b1
 8002380:	080024b1 	.word	0x080024b1
 8002384:	080024b1 	.word	0x080024b1
 8002388:	080023ed 	.word	0x080023ed
 800238c:	080024b1 	.word	0x080024b1
 8002390:	080024b1 	.word	0x080024b1
 8002394:	080024b1 	.word	0x080024b1
 8002398:	0800242f 	.word	0x0800242f
 800239c:	080024b1 	.word	0x080024b1
 80023a0:	080024b1 	.word	0x080024b1
 80023a4:	080024b1 	.word	0x080024b1
 80023a8:	0800246f 	.word	0x0800246f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f9be 	bl	8002734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0208 	orr.w	r2, r2, #8
 80023c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6999      	ldr	r1, [r3, #24]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	619a      	str	r2, [r3, #24]
      break;
 80023ea:	e064      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa04 	bl	8002800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6999      	ldr	r1, [r3, #24]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	021a      	lsls	r2, r3, #8
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	619a      	str	r2, [r3, #24]
      break;
 800242c:	e043      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fa4d 	bl	80028d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69da      	ldr	r2, [r3, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0208 	orr.w	r2, r2, #8
 8002448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0204 	bic.w	r2, r2, #4
 8002458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69d9      	ldr	r1, [r3, #28]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	61da      	str	r2, [r3, #28]
      break;
 800246c:	e023      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fa97 	bl	80029a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69d9      	ldr	r1, [r3, #28]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	021a      	lsls	r2, r3, #8
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	61da      	str	r2, [r3, #28]
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
      break;
 80024b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024be:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_ConfigClockSource+0x1c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0b4      	b.n	800264e <HAL_TIM_ConfigClockSource+0x186>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800250a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800251c:	d03e      	beq.n	800259c <HAL_TIM_ConfigClockSource+0xd4>
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002522:	f200 8087 	bhi.w	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800252a:	f000 8086 	beq.w	800263a <HAL_TIM_ConfigClockSource+0x172>
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002532:	d87f      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b70      	cmp	r3, #112	@ 0x70
 8002536:	d01a      	beq.n	800256e <HAL_TIM_ConfigClockSource+0xa6>
 8002538:	2b70      	cmp	r3, #112	@ 0x70
 800253a:	d87b      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b60      	cmp	r3, #96	@ 0x60
 800253e:	d050      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002540:	2b60      	cmp	r3, #96	@ 0x60
 8002542:	d877      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b50      	cmp	r3, #80	@ 0x50
 8002546:	d03c      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002548:	2b50      	cmp	r3, #80	@ 0x50
 800254a:	d873      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d058      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x13a>
 8002550:	2b40      	cmp	r3, #64	@ 0x40
 8002552:	d86f      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b30      	cmp	r3, #48	@ 0x30
 8002556:	d064      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 8002558:	2b30      	cmp	r3, #48	@ 0x30
 800255a:	d86b      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b20      	cmp	r3, #32
 800255e:	d060      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 8002560:	2b20      	cmp	r3, #32
 8002562:	d867      	bhi.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d05c      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 8002568:	2b10      	cmp	r3, #16
 800256a:	d05a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0x15a>
 800256c:	e062      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800257e:	f000 fad8 	bl	8002b32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	609a      	str	r2, [r3, #8]
      break;
 800259a:	e04f      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ac:	f000 fac1 	bl	8002b32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e03c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ce:	461a      	mov	r2, r3
 80025d0:	f000 fa38 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2150      	movs	r1, #80	@ 0x50
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fa8f 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 80025e0:	e02c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 fa56 	bl	8002aa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2160      	movs	r1, #96	@ 0x60
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fa7f 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 8002600:	e01c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	461a      	mov	r2, r3
 8002610:	f000 fa18 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2140      	movs	r1, #64	@ 0x40
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fa6f 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 8002620:	e00c      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f000 fa66 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 8002632:	e003      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e000      	b.n	800263c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800263a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a2f      	ldr	r2, [pc, #188]	@ (8002728 <TIM_Base_SetConfig+0xd0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00b      	beq.n	8002688 <TIM_Base_SetConfig+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002676:	d007      	beq.n	8002688 <TIM_Base_SetConfig+0x30>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a2c      	ldr	r2, [pc, #176]	@ (800272c <TIM_Base_SetConfig+0xd4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <TIM_Base_SetConfig+0x30>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a2b      	ldr	r2, [pc, #172]	@ (8002730 <TIM_Base_SetConfig+0xd8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a22      	ldr	r2, [pc, #136]	@ (8002728 <TIM_Base_SetConfig+0xd0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <TIM_Base_SetConfig+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a8:	d007      	beq.n	80026ba <TIM_Base_SetConfig+0x62>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1f      	ldr	r2, [pc, #124]	@ (800272c <TIM_Base_SetConfig+0xd4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <TIM_Base_SetConfig+0x62>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002730 <TIM_Base_SetConfig+0xd8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d108      	bne.n	80026cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002728 <TIM_Base_SetConfig+0xd0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	611a      	str	r2, [r3, #16]
  }
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	40012c00 	.word	0x40012c00
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800

08002734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f023 0201 	bic.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 0302 	bic.w	r3, r3, #2
 800277c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a1c      	ldr	r2, [pc, #112]	@ (80027fc <TIM_OC1_SetConfig+0xc8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d10c      	bne.n	80027aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f023 0308 	bic.w	r3, r3, #8
 8002796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <TIM_OC1_SetConfig+0xc8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d111      	bne.n	80027d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	621a      	str	r2, [r3, #32]
}
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40012c00 	.word	0x40012c00

08002800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f023 0210 	bic.w	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800282e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0320 	bic.w	r3, r3, #32
 800284a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a1d      	ldr	r2, [pc, #116]	@ (80028d0 <TIM_OC2_SetConfig+0xd0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10d      	bne.n	800287c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800287a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <TIM_OC2_SetConfig+0xd0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d113      	bne.n	80028ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800288a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	621a      	str	r2, [r3, #32]
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00

080028d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800291c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1d      	ldr	r2, [pc, #116]	@ (80029a4 <TIM_OC3_SetConfig+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10d      	bne.n	800294e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800294c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a14      	ldr	r2, [pc, #80]	@ (80029a4 <TIM_OC3_SetConfig+0xd0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d113      	bne.n	800297e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800295c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	621a      	str	r2, [r3, #32]
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40012c00 	.word	0x40012c00

080029a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	031b      	lsls	r3, r3, #12
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a0f      	ldr	r2, [pc, #60]	@ (8002a40 <TIM_OC4_SetConfig+0x98>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d109      	bne.n	8002a1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	40012c00 	.word	0x40012c00

08002a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 030a 	bic.w	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	f023 0210 	bic.w	r2, r3, #16
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	031b      	lsls	r3, r3, #12
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002adc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	621a      	str	r2, [r3, #32]
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f043 0307 	orr.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	021a      	lsls	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2201      	movs	r2, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e046      	b.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1c:	d009      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10c      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800

08002c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e042      	b.n	8002d0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe f972 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	@ 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fcd5 	bl	8003668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d112      	bne.n	8002d54 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_UART_Receive_IT+0x26>
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00b      	b.n	8002d56 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fab7 	bl	80032be <UART_Start_Receive_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0ba      	sub	sp, #232	@ 0xe8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x66>
 8002db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fb93 	bl	80034ea <UART_Receive_IT>
      return;
 8002dc4:	e25b      	b.n	800327e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80de 	beq.w	8002f8c <HAL_UART_IRQHandler+0x22c>
 8002dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80d1 	beq.w	8002f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_UART_IRQHandler+0xae>
 8002df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_UART_IRQHandler+0xd2>
 8002e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_UART_IRQHandler+0xf6>
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d011      	beq.n	8002e86 <HAL_UART_IRQHandler+0x126>
 8002e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f043 0208 	orr.w	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 81f2 	beq.w	8003274 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_UART_IRQHandler+0x14e>
 8002e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb1e 	bl	80034ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_UART_IRQHandler+0x17a>
 8002ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04f      	beq.n	8002f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa28 	bl	8003330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d041      	beq.n	8002f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1d9      	bne.n	8002eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d013      	beq.n	8002f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f46:	4a7e      	ldr	r2, [pc, #504]	@ (8003140 <HAL_UART_IRQHandler+0x3e0>)
 8002f48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fa68 	bl	8001424 <HAL_DMA_Abort_IT>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f64:	4610      	mov	r0, r2
 8002f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e00e      	b.n	8002f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f993 	bl	8003296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	e00a      	b.n	8002f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f98f 	bl	8003296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	e006      	b.n	8002f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f98b 	bl	8003296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f86:	e175      	b.n	8003274 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	bf00      	nop
    return;
 8002f8a:	e173      	b.n	8003274 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 814f 	bne.w	8003234 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8148 	beq.w	8003234 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8141 	beq.w	8003234 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80b6 	beq.w	8003144 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8145 	beq.w	8003278 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f080 813e 	bcs.w	8003278 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003002:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b20      	cmp	r3, #32
 800300c:	f000 8088 	beq.w	8003120 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800301e:	e853 3f00 	ldrex	r3, [r3]
 8003022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800302a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800302e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800303c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003048:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1d9      	bne.n	8003010 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800306c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003080:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003084:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003088:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800308c:	e841 2300 	strex	r3, r2, [r1]
 8003090:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1e1      	bne.n	800305c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3314      	adds	r3, #20
 80030b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e3      	bne.n	8003098 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	330c      	adds	r3, #12
 80030fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003102:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003104:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e3      	bne.n	80030de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe f947 	bl	80013ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800312e:	b29b      	uxth	r3, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8b6 	bl	80032a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800313c:	e09c      	b.n	8003278 <HAL_UART_IRQHandler+0x518>
 800313e:	bf00      	nop
 8003140:	080033f5 	.word	0x080033f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800314c:	b29b      	uxth	r3, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 808e 	beq.w	800327c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8089 	beq.w	800327c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800317a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800318e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800319c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e3      	bne.n	800316a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3314      	adds	r3, #20
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	623b      	str	r3, [r7, #32]
   return(result);
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3314      	adds	r3, #20
 80031c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e3      	bne.n	80031a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0310 	bic.w	r3, r3, #16
 80031fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800320c:	61fa      	str	r2, [r7, #28]
 800320e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69b9      	ldr	r1, [r7, #24]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	617b      	str	r3, [r7, #20]
   return(result);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e3      	bne.n	80031e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f83b 	bl	80032a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003232:	e023      	b.n	800327c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_UART_IRQHandler+0x4f4>
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8e5 	bl	800341c <UART_Transmit_IT>
    return;
 8003252:	e014      	b.n	800327e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00e      	beq.n	800327e <HAL_UART_IRQHandler+0x51e>
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f924 	bl	80034ba <UART_EndTransmit_IT>
    return;
 8003272:	e004      	b.n	800327e <HAL_UART_IRQHandler+0x51e>
    return;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <HAL_UART_IRQHandler+0x51e>
      return;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_UART_IRQHandler+0x51e>
      return;
 800327c:	bf00      	nop
  }
}
 800327e:	37e8      	adds	r7, #232	@ 0xe8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2222      	movs	r2, #34	@ 0x22
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003302:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b095      	sub	sp, #84	@ 0x54
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800334e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003358:	643a      	str	r2, [r7, #64]	@ 0x40
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800335e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	61fb      	str	r3, [r7, #28]
   return(result);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800338c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800338e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e5      	bne.n	800336c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d119      	bne.n	80033dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033c8:	61ba      	str	r2, [r7, #24]
 80033ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6979      	ldr	r1, [r7, #20]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	613b      	str	r3, [r7, #16]
   return(result);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033ea:	bf00      	nop
 80033ec:	3754      	adds	r7, #84	@ 0x54
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff ff41 	bl	8003296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b21      	cmp	r3, #33	@ 0x21
 800342e:	d13e      	bne.n	80034ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003438:	d114      	bne.n	8003464 <UART_Transmit_IT+0x48>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d110      	bne.n	8003464 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003456:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	e008      	b.n	8003476 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	1c59      	adds	r1, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6211      	str	r1, [r2, #32]
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29b      	uxth	r3, r3
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003498:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fed2 	bl	8003284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08c      	sub	sp, #48	@ 0x30
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b22      	cmp	r3, #34	@ 0x22
 80034fc:	f040 80ae 	bne.w	800365c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	d117      	bne.n	800353a <UART_Receive_IT+0x50>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	b29a      	uxth	r2, r3
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
 8003538:	e026      	b.n	8003588 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354c:	d007      	beq.n	800355e <UART_Receive_IT+0x74>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <UART_Receive_IT+0x82>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e008      	b.n	800357e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003578:	b2da      	uxtb	r2, r3
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4619      	mov	r1, r3
 8003596:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003598:	2b00      	cmp	r3, #0
 800359a:	d15d      	bne.n	8003658 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0220 	bic.w	r2, r2, #32
 80035aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d135      	bne.n	800364e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	613b      	str	r3, [r7, #16]
   return(result);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003608:	623a      	str	r2, [r7, #32]
 800360a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69f9      	ldr	r1, [r7, #28]
 800360e:	6a3a      	ldr	r2, [r7, #32]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	61bb      	str	r3, [r7, #24]
   return(result);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d10a      	bne.n	8003640 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fe2e 	bl	80032a8 <HAL_UARTEx_RxEventCallback>
 800364c:	e002      	b.n	8003654 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd f872 	bl	8000738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e002      	b.n	800365e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3730      	adds	r7, #48	@ 0x30
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036a2:	f023 030c 	bic.w	r3, r3, #12
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <UART_SetConfig+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d103      	bne.n	80036d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fcbc 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	e002      	b.n	80036de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7fe fca4 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80036dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	4a22      	ldr	r2, [pc, #136]	@ (8003780 <UART_SetConfig+0x118>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	0119      	lsls	r1, r3, #4
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009a      	lsls	r2, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	fbb2 f2f3 	udiv	r2, r2, r3
 8003714:	4b1a      	ldr	r3, [pc, #104]	@ (8003780 <UART_SetConfig+0x118>)
 8003716:	fba3 0302 	umull	r0, r3, r3, r2
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2064      	movs	r0, #100	@ 0x64
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	@ 0x32
 8003728:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <UART_SetConfig+0x118>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003734:	4419      	add	r1, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	fbb2 f2f3 	udiv	r2, r2, r3
 800374c:	4b0c      	ldr	r3, [pc, #48]	@ (8003780 <UART_SetConfig+0x118>)
 800374e:	fba3 0302 	umull	r0, r3, r3, r2
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2064      	movs	r0, #100	@ 0x64
 8003756:	fb00 f303 	mul.w	r3, r0, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	3332      	adds	r3, #50	@ 0x32
 8003760:	4a07      	ldr	r2, [pc, #28]	@ (8003780 <UART_SetConfig+0x118>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	440a      	add	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40013800 	.word	0x40013800
 8003780:	51eb851f 	.word	0x51eb851f

08003784 <siscanf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800378a:	b530      	push	{r4, r5, lr}
 800378c:	b09c      	sub	sp, #112	@ 0x70
 800378e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003790:	f854 5b04 	ldr.w	r5, [r4], #4
 8003794:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003798:	9002      	str	r0, [sp, #8]
 800379a:	9006      	str	r0, [sp, #24]
 800379c:	f7fc fcd6 	bl	800014c <strlen>
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <siscanf+0x4c>)
 80037a2:	9003      	str	r0, [sp, #12]
 80037a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037a6:	2300      	movs	r3, #0
 80037a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80037aa:	9314      	str	r3, [sp, #80]	@ 0x50
 80037ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037b0:	9007      	str	r0, [sp, #28]
 80037b2:	4808      	ldr	r0, [pc, #32]	@ (80037d4 <siscanf+0x50>)
 80037b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037b8:	462a      	mov	r2, r5
 80037ba:	4623      	mov	r3, r4
 80037bc:	a902      	add	r1, sp, #8
 80037be:	6800      	ldr	r0, [r0, #0]
 80037c0:	9401      	str	r4, [sp, #4]
 80037c2:	f000 f98d 	bl	8003ae0 <__ssvfiscanf_r>
 80037c6:	b01c      	add	sp, #112	@ 0x70
 80037c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037cc:	b003      	add	sp, #12
 80037ce:	4770      	bx	lr
 80037d0:	080037d9 	.word	0x080037d9
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <__seofread>:
 80037d8:	2000      	movs	r0, #0
 80037da:	4770      	bx	lr

080037dc <memset>:
 80037dc:	4603      	mov	r3, r0
 80037de:	4402      	add	r2, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	@ (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	2600      	movs	r6, #0
 80037fc:	4d0c      	ldr	r5, [pc, #48]	@ (8003830 <__libc_init_array+0x38>)
 80037fe:	4c0d      	ldr	r4, [pc, #52]	@ (8003834 <__libc_init_array+0x3c>)
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	f000 fde8 	bl	80043dc <_init>
 800380c:	2600      	movs	r6, #0
 800380e:	4d0a      	ldr	r5, [pc, #40]	@ (8003838 <__libc_init_array+0x40>)
 8003810:	4c0a      	ldr	r4, [pc, #40]	@ (800383c <__libc_init_array+0x44>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	0800455c 	.word	0x0800455c
 8003834:	0800455c 	.word	0x0800455c
 8003838:	0800455c 	.word	0x0800455c
 800383c:	08004560 	.word	0x08004560

08003840 <__retarget_lock_acquire_recursive>:
 8003840:	4770      	bx	lr

08003842 <__retarget_lock_release_recursive>:
 8003842:	4770      	bx	lr

08003844 <_free_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4605      	mov	r5, r0
 8003848:	2900      	cmp	r1, #0
 800384a:	d040      	beq.n	80038ce <_free_r+0x8a>
 800384c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003850:	1f0c      	subs	r4, r1, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	bfb8      	it	lt
 8003856:	18e4      	addlt	r4, r4, r3
 8003858:	f000 f8de 	bl	8003a18 <__malloc_lock>
 800385c:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <_free_r+0x8c>)
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	b933      	cbnz	r3, 8003870 <_free_r+0x2c>
 8003862:	6063      	str	r3, [r4, #4]
 8003864:	6014      	str	r4, [r2, #0]
 8003866:	4628      	mov	r0, r5
 8003868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800386c:	f000 b8da 	b.w	8003a24 <__malloc_unlock>
 8003870:	42a3      	cmp	r3, r4
 8003872:	d908      	bls.n	8003886 <_free_r+0x42>
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	1821      	adds	r1, r4, r0
 8003878:	428b      	cmp	r3, r1
 800387a:	bf01      	itttt	eq
 800387c:	6819      	ldreq	r1, [r3, #0]
 800387e:	685b      	ldreq	r3, [r3, #4]
 8003880:	1809      	addeq	r1, r1, r0
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	e7ed      	b.n	8003862 <_free_r+0x1e>
 8003886:	461a      	mov	r2, r3
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	b10b      	cbz	r3, 8003890 <_free_r+0x4c>
 800388c:	42a3      	cmp	r3, r4
 800388e:	d9fa      	bls.n	8003886 <_free_r+0x42>
 8003890:	6811      	ldr	r1, [r2, #0]
 8003892:	1850      	adds	r0, r2, r1
 8003894:	42a0      	cmp	r0, r4
 8003896:	d10b      	bne.n	80038b0 <_free_r+0x6c>
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	4401      	add	r1, r0
 800389c:	1850      	adds	r0, r2, r1
 800389e:	4283      	cmp	r3, r0
 80038a0:	6011      	str	r1, [r2, #0]
 80038a2:	d1e0      	bne.n	8003866 <_free_r+0x22>
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4408      	add	r0, r1
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	6053      	str	r3, [r2, #4]
 80038ae:	e7da      	b.n	8003866 <_free_r+0x22>
 80038b0:	d902      	bls.n	80038b8 <_free_r+0x74>
 80038b2:	230c      	movs	r3, #12
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	e7d6      	b.n	8003866 <_free_r+0x22>
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	1821      	adds	r1, r4, r0
 80038bc:	428b      	cmp	r3, r1
 80038be:	bf01      	itttt	eq
 80038c0:	6819      	ldreq	r1, [r3, #0]
 80038c2:	685b      	ldreq	r3, [r3, #4]
 80038c4:	1809      	addeq	r1, r1, r0
 80038c6:	6021      	streq	r1, [r4, #0]
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	6054      	str	r4, [r2, #4]
 80038cc:	e7cb      	b.n	8003866 <_free_r+0x22>
 80038ce:	bd38      	pop	{r3, r4, r5, pc}
 80038d0:	200002c4 	.word	0x200002c4

080038d4 <sbrk_aligned>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003914 <sbrk_aligned+0x40>)
 80038d8:	460c      	mov	r4, r1
 80038da:	6831      	ldr	r1, [r6, #0]
 80038dc:	4605      	mov	r5, r0
 80038de:	b911      	cbnz	r1, 80038e6 <sbrk_aligned+0x12>
 80038e0:	f000 fc2e 	bl	8004140 <_sbrk_r>
 80038e4:	6030      	str	r0, [r6, #0]
 80038e6:	4621      	mov	r1, r4
 80038e8:	4628      	mov	r0, r5
 80038ea:	f000 fc29 	bl	8004140 <_sbrk_r>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	d103      	bne.n	80038fa <sbrk_aligned+0x26>
 80038f2:	f04f 34ff 	mov.w	r4, #4294967295
 80038f6:	4620      	mov	r0, r4
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
 80038fa:	1cc4      	adds	r4, r0, #3
 80038fc:	f024 0403 	bic.w	r4, r4, #3
 8003900:	42a0      	cmp	r0, r4
 8003902:	d0f8      	beq.n	80038f6 <sbrk_aligned+0x22>
 8003904:	1a21      	subs	r1, r4, r0
 8003906:	4628      	mov	r0, r5
 8003908:	f000 fc1a 	bl	8004140 <_sbrk_r>
 800390c:	3001      	adds	r0, #1
 800390e:	d1f2      	bne.n	80038f6 <sbrk_aligned+0x22>
 8003910:	e7ef      	b.n	80038f2 <sbrk_aligned+0x1e>
 8003912:	bf00      	nop
 8003914:	200002c0 	.word	0x200002c0

08003918 <_malloc_r>:
 8003918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800391c:	1ccd      	adds	r5, r1, #3
 800391e:	f025 0503 	bic.w	r5, r5, #3
 8003922:	3508      	adds	r5, #8
 8003924:	2d0c      	cmp	r5, #12
 8003926:	bf38      	it	cc
 8003928:	250c      	movcc	r5, #12
 800392a:	2d00      	cmp	r5, #0
 800392c:	4606      	mov	r6, r0
 800392e:	db01      	blt.n	8003934 <_malloc_r+0x1c>
 8003930:	42a9      	cmp	r1, r5
 8003932:	d904      	bls.n	800393e <_malloc_r+0x26>
 8003934:	230c      	movs	r3, #12
 8003936:	6033      	str	r3, [r6, #0]
 8003938:	2000      	movs	r0, #0
 800393a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800393e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a14 <_malloc_r+0xfc>
 8003942:	f000 f869 	bl	8003a18 <__malloc_lock>
 8003946:	f8d8 3000 	ldr.w	r3, [r8]
 800394a:	461c      	mov	r4, r3
 800394c:	bb44      	cbnz	r4, 80039a0 <_malloc_r+0x88>
 800394e:	4629      	mov	r1, r5
 8003950:	4630      	mov	r0, r6
 8003952:	f7ff ffbf 	bl	80038d4 <sbrk_aligned>
 8003956:	1c43      	adds	r3, r0, #1
 8003958:	4604      	mov	r4, r0
 800395a:	d158      	bne.n	8003a0e <_malloc_r+0xf6>
 800395c:	f8d8 4000 	ldr.w	r4, [r8]
 8003960:	4627      	mov	r7, r4
 8003962:	2f00      	cmp	r7, #0
 8003964:	d143      	bne.n	80039ee <_malloc_r+0xd6>
 8003966:	2c00      	cmp	r4, #0
 8003968:	d04b      	beq.n	8003a02 <_malloc_r+0xea>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	4639      	mov	r1, r7
 800396e:	4630      	mov	r0, r6
 8003970:	eb04 0903 	add.w	r9, r4, r3
 8003974:	f000 fbe4 	bl	8004140 <_sbrk_r>
 8003978:	4581      	cmp	r9, r0
 800397a:	d142      	bne.n	8003a02 <_malloc_r+0xea>
 800397c:	6821      	ldr	r1, [r4, #0]
 800397e:	4630      	mov	r0, r6
 8003980:	1a6d      	subs	r5, r5, r1
 8003982:	4629      	mov	r1, r5
 8003984:	f7ff ffa6 	bl	80038d4 <sbrk_aligned>
 8003988:	3001      	adds	r0, #1
 800398a:	d03a      	beq.n	8003a02 <_malloc_r+0xea>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	442b      	add	r3, r5
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	f8d8 3000 	ldr.w	r3, [r8]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	bb62      	cbnz	r2, 80039f4 <_malloc_r+0xdc>
 800399a:	f8c8 7000 	str.w	r7, [r8]
 800399e:	e00f      	b.n	80039c0 <_malloc_r+0xa8>
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	1b52      	subs	r2, r2, r5
 80039a4:	d420      	bmi.n	80039e8 <_malloc_r+0xd0>
 80039a6:	2a0b      	cmp	r2, #11
 80039a8:	d917      	bls.n	80039da <_malloc_r+0xc2>
 80039aa:	1961      	adds	r1, r4, r5
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	6025      	str	r5, [r4, #0]
 80039b0:	bf18      	it	ne
 80039b2:	6059      	strne	r1, [r3, #4]
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	bf08      	it	eq
 80039b8:	f8c8 1000 	streq.w	r1, [r8]
 80039bc:	5162      	str	r2, [r4, r5]
 80039be:	604b      	str	r3, [r1, #4]
 80039c0:	4630      	mov	r0, r6
 80039c2:	f000 f82f 	bl	8003a24 <__malloc_unlock>
 80039c6:	f104 000b 	add.w	r0, r4, #11
 80039ca:	1d23      	adds	r3, r4, #4
 80039cc:	f020 0007 	bic.w	r0, r0, #7
 80039d0:	1ac2      	subs	r2, r0, r3
 80039d2:	bf1c      	itt	ne
 80039d4:	1a1b      	subne	r3, r3, r0
 80039d6:	50a3      	strne	r3, [r4, r2]
 80039d8:	e7af      	b.n	800393a <_malloc_r+0x22>
 80039da:	6862      	ldr	r2, [r4, #4]
 80039dc:	42a3      	cmp	r3, r4
 80039de:	bf0c      	ite	eq
 80039e0:	f8c8 2000 	streq.w	r2, [r8]
 80039e4:	605a      	strne	r2, [r3, #4]
 80039e6:	e7eb      	b.n	80039c0 <_malloc_r+0xa8>
 80039e8:	4623      	mov	r3, r4
 80039ea:	6864      	ldr	r4, [r4, #4]
 80039ec:	e7ae      	b.n	800394c <_malloc_r+0x34>
 80039ee:	463c      	mov	r4, r7
 80039f0:	687f      	ldr	r7, [r7, #4]
 80039f2:	e7b6      	b.n	8003962 <_malloc_r+0x4a>
 80039f4:	461a      	mov	r2, r3
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d1fb      	bne.n	80039f4 <_malloc_r+0xdc>
 80039fc:	2300      	movs	r3, #0
 80039fe:	6053      	str	r3, [r2, #4]
 8003a00:	e7de      	b.n	80039c0 <_malloc_r+0xa8>
 8003a02:	230c      	movs	r3, #12
 8003a04:	4630      	mov	r0, r6
 8003a06:	6033      	str	r3, [r6, #0]
 8003a08:	f000 f80c 	bl	8003a24 <__malloc_unlock>
 8003a0c:	e794      	b.n	8003938 <_malloc_r+0x20>
 8003a0e:	6005      	str	r5, [r0, #0]
 8003a10:	e7d6      	b.n	80039c0 <_malloc_r+0xa8>
 8003a12:	bf00      	nop
 8003a14:	200002c4 	.word	0x200002c4

08003a18 <__malloc_lock>:
 8003a18:	4801      	ldr	r0, [pc, #4]	@ (8003a20 <__malloc_lock+0x8>)
 8003a1a:	f7ff bf11 	b.w	8003840 <__retarget_lock_acquire_recursive>
 8003a1e:	bf00      	nop
 8003a20:	200002bc 	.word	0x200002bc

08003a24 <__malloc_unlock>:
 8003a24:	4801      	ldr	r0, [pc, #4]	@ (8003a2c <__malloc_unlock+0x8>)
 8003a26:	f7ff bf0c 	b.w	8003842 <__retarget_lock_release_recursive>
 8003a2a:	bf00      	nop
 8003a2c:	200002bc 	.word	0x200002bc

08003a30 <_sungetc_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	1c4b      	adds	r3, r1, #1
 8003a34:	4614      	mov	r4, r2
 8003a36:	d103      	bne.n	8003a40 <_sungetc_r+0x10>
 8003a38:	f04f 35ff 	mov.w	r5, #4294967295
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	8993      	ldrh	r3, [r2, #12]
 8003a42:	b2cd      	uxtb	r5, r1
 8003a44:	f023 0320 	bic.w	r3, r3, #32
 8003a48:	8193      	strh	r3, [r2, #12]
 8003a4a:	6853      	ldr	r3, [r2, #4]
 8003a4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a4e:	b18a      	cbz	r2, 8003a74 <_sungetc_r+0x44>
 8003a50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dd08      	ble.n	8003a68 <_sungetc_r+0x38>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	1e5a      	subs	r2, r3, #1
 8003a5a:	6022      	str	r2, [r4, #0]
 8003a5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	3301      	adds	r3, #1
 8003a64:	6063      	str	r3, [r4, #4]
 8003a66:	e7e9      	b.n	8003a3c <_sungetc_r+0xc>
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f000 fb30 	bl	80040ce <__submore>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d0f1      	beq.n	8003a56 <_sungetc_r+0x26>
 8003a72:	e7e1      	b.n	8003a38 <_sungetc_r+0x8>
 8003a74:	6921      	ldr	r1, [r4, #16]
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	b141      	cbz	r1, 8003a8c <_sungetc_r+0x5c>
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	d206      	bcs.n	8003a8c <_sungetc_r+0x5c>
 8003a7e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003a82:	42a9      	cmp	r1, r5
 8003a84:	d102      	bne.n	8003a8c <_sungetc_r+0x5c>
 8003a86:	3a01      	subs	r2, #1
 8003a88:	6022      	str	r2, [r4, #0]
 8003a8a:	e7ea      	b.n	8003a62 <_sungetc_r+0x32>
 8003a8c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a96:	2303      	movs	r3, #3
 8003a98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e7de      	b.n	8003a64 <_sungetc_r+0x34>

08003aa6 <__ssrefill_r>:
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003aac:	b169      	cbz	r1, 8003aca <__ssrefill_r+0x24>
 8003aae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ab2:	4299      	cmp	r1, r3
 8003ab4:	d001      	beq.n	8003aba <__ssrefill_r+0x14>
 8003ab6:	f7ff fec5 	bl	8003844 <_free_r>
 8003aba:	2000      	movs	r0, #0
 8003abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003abe:	6360      	str	r0, [r4, #52]	@ 0x34
 8003ac0:	6063      	str	r3, [r4, #4]
 8003ac2:	b113      	cbz	r3, 8003aca <__ssrefill_r+0x24>
 8003ac4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f043 0320 	orr.w	r3, r3, #32
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	e7f3      	b.n	8003ac8 <__ssrefill_r+0x22>

08003ae0 <__ssvfiscanf_r>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4606      	mov	r6, r0
 8003aea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003aee:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003af2:	49aa      	ldr	r1, [pc, #680]	@ (8003d9c <__ssvfiscanf_r+0x2bc>)
 8003af4:	f10d 0804 	add.w	r8, sp, #4
 8003af8:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003afa:	49a9      	ldr	r1, [pc, #676]	@ (8003da0 <__ssvfiscanf_r+0x2c0>)
 8003afc:	4fa9      	ldr	r7, [pc, #676]	@ (8003da4 <__ssvfiscanf_r+0x2c4>)
 8003afe:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003b02:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	7813      	ldrb	r3, [r2, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8159 	beq.w	8003dc0 <__ssvfiscanf_r+0x2e0>
 8003b0e:	5cf9      	ldrb	r1, [r7, r3]
 8003b10:	1c55      	adds	r5, r2, #1
 8003b12:	f011 0108 	ands.w	r1, r1, #8
 8003b16:	d019      	beq.n	8003b4c <__ssvfiscanf_r+0x6c>
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	dd0f      	ble.n	8003b3e <__ssvfiscanf_r+0x5e>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	5cba      	ldrb	r2, [r7, r2]
 8003b24:	0712      	lsls	r2, r2, #28
 8003b26:	d401      	bmi.n	8003b2c <__ssvfiscanf_r+0x4c>
 8003b28:	462a      	mov	r2, r5
 8003b2a:	e7ec      	b.n	8003b06 <__ssvfiscanf_r+0x26>
 8003b2c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003b2e:	3301      	adds	r3, #1
 8003b30:	3201      	adds	r2, #1
 8003b32:	9245      	str	r2, [sp, #276]	@ 0x114
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	3a01      	subs	r2, #1
 8003b3a:	6062      	str	r2, [r4, #4]
 8003b3c:	e7ec      	b.n	8003b18 <__ssvfiscanf_r+0x38>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4630      	mov	r0, r6
 8003b42:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003b44:	4798      	blx	r3
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d0e9      	beq.n	8003b1e <__ssvfiscanf_r+0x3e>
 8003b4a:	e7ed      	b.n	8003b28 <__ssvfiscanf_r+0x48>
 8003b4c:	2b25      	cmp	r3, #37	@ 0x25
 8003b4e:	d012      	beq.n	8003b76 <__ssvfiscanf_r+0x96>
 8003b50:	4699      	mov	r9, r3
 8003b52:	6863      	ldr	r3, [r4, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f340 8094 	ble.w	8003c82 <__ssvfiscanf_r+0x1a2>
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	7813      	ldrb	r3, [r2, #0]
 8003b5e:	454b      	cmp	r3, r9
 8003b60:	f040 812e 	bne.w	8003dc0 <__ssvfiscanf_r+0x2e0>
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	3201      	adds	r2, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	6063      	str	r3, [r4, #4]
 8003b6c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003b6e:	6022      	str	r2, [r4, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	9345      	str	r3, [sp, #276]	@ 0x114
 8003b74:	e7d8      	b.n	8003b28 <__ssvfiscanf_r+0x48>
 8003b76:	9141      	str	r1, [sp, #260]	@ 0x104
 8003b78:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003b7a:	7853      	ldrb	r3, [r2, #1]
 8003b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b7e:	bf04      	itt	eq
 8003b80:	2310      	moveq	r3, #16
 8003b82:	1c95      	addeq	r5, r2, #2
 8003b84:	f04f 020a 	mov.w	r2, #10
 8003b88:	bf08      	it	eq
 8003b8a:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003b8c:	46a9      	mov	r9, r5
 8003b8e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003b92:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003b96:	2b09      	cmp	r3, #9
 8003b98:	d91e      	bls.n	8003bd8 <__ssvfiscanf_r+0xf8>
 8003b9a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8003da8 <__ssvfiscanf_r+0x2c8>
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4650      	mov	r0, sl
 8003ba2:	f000 fadd 	bl	8004160 <memchr>
 8003ba6:	b138      	cbz	r0, 8003bb8 <__ssvfiscanf_r+0xd8>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	464d      	mov	r5, r9
 8003bac:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003bae:	eba0 000a 	sub.w	r0, r0, sl
 8003bb2:	4083      	lsls	r3, r0
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	9341      	str	r3, [sp, #260]	@ 0x104
 8003bb8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bbc:	2b78      	cmp	r3, #120	@ 0x78
 8003bbe:	d806      	bhi.n	8003bce <__ssvfiscanf_r+0xee>
 8003bc0:	2b57      	cmp	r3, #87	@ 0x57
 8003bc2:	d810      	bhi.n	8003be6 <__ssvfiscanf_r+0x106>
 8003bc4:	2b25      	cmp	r3, #37	@ 0x25
 8003bc6:	d0c3      	beq.n	8003b50 <__ssvfiscanf_r+0x70>
 8003bc8:	d856      	bhi.n	8003c78 <__ssvfiscanf_r+0x198>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d064      	beq.n	8003c98 <__ssvfiscanf_r+0x1b8>
 8003bce:	2303      	movs	r3, #3
 8003bd0:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	9342      	str	r3, [sp, #264]	@ 0x108
 8003bd6:	e077      	b.n	8003cc8 <__ssvfiscanf_r+0x1e8>
 8003bd8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003bda:	464d      	mov	r5, r9
 8003bdc:	fb02 1103 	mla	r1, r2, r3, r1
 8003be0:	3930      	subs	r1, #48	@ 0x30
 8003be2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003be4:	e7d2      	b.n	8003b8c <__ssvfiscanf_r+0xac>
 8003be6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003bea:	2a20      	cmp	r2, #32
 8003bec:	d8ef      	bhi.n	8003bce <__ssvfiscanf_r+0xee>
 8003bee:	a101      	add	r1, pc, #4	@ (adr r1, 8003bf4 <__ssvfiscanf_r+0x114>)
 8003bf0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003bf4:	08003ca7 	.word	0x08003ca7
 8003bf8:	08003bcf 	.word	0x08003bcf
 8003bfc:	08003bcf 	.word	0x08003bcf
 8003c00:	08003d01 	.word	0x08003d01
 8003c04:	08003bcf 	.word	0x08003bcf
 8003c08:	08003bcf 	.word	0x08003bcf
 8003c0c:	08003bcf 	.word	0x08003bcf
 8003c10:	08003bcf 	.word	0x08003bcf
 8003c14:	08003bcf 	.word	0x08003bcf
 8003c18:	08003bcf 	.word	0x08003bcf
 8003c1c:	08003bcf 	.word	0x08003bcf
 8003c20:	08003d17 	.word	0x08003d17
 8003c24:	08003cfd 	.word	0x08003cfd
 8003c28:	08003c7f 	.word	0x08003c7f
 8003c2c:	08003c7f 	.word	0x08003c7f
 8003c30:	08003c7f 	.word	0x08003c7f
 8003c34:	08003bcf 	.word	0x08003bcf
 8003c38:	08003cb9 	.word	0x08003cb9
 8003c3c:	08003bcf 	.word	0x08003bcf
 8003c40:	08003bcf 	.word	0x08003bcf
 8003c44:	08003bcf 	.word	0x08003bcf
 8003c48:	08003bcf 	.word	0x08003bcf
 8003c4c:	08003d27 	.word	0x08003d27
 8003c50:	08003cc1 	.word	0x08003cc1
 8003c54:	08003c9f 	.word	0x08003c9f
 8003c58:	08003bcf 	.word	0x08003bcf
 8003c5c:	08003bcf 	.word	0x08003bcf
 8003c60:	08003d23 	.word	0x08003d23
 8003c64:	08003bcf 	.word	0x08003bcf
 8003c68:	08003cfd 	.word	0x08003cfd
 8003c6c:	08003bcf 	.word	0x08003bcf
 8003c70:	08003bcf 	.word	0x08003bcf
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	3b45      	subs	r3, #69	@ 0x45
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d8a7      	bhi.n	8003bce <__ssvfiscanf_r+0xee>
 8003c7e:	2305      	movs	r3, #5
 8003c80:	e021      	b.n	8003cc6 <__ssvfiscanf_r+0x1e6>
 8003c82:	4621      	mov	r1, r4
 8003c84:	4630      	mov	r0, r6
 8003c86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c88:	4798      	blx	r3
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	f43f af65 	beq.w	8003b5a <__ssvfiscanf_r+0x7a>
 8003c90:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003c92:	2800      	cmp	r0, #0
 8003c94:	f040 808c 	bne.w	8003db0 <__ssvfiscanf_r+0x2d0>
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e08c      	b.n	8003db8 <__ssvfiscanf_r+0x2d8>
 8003c9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003ca0:	f042 0220 	orr.w	r2, r2, #32
 8003ca4:	9241      	str	r2, [sp, #260]	@ 0x104
 8003ca6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cac:	9241      	str	r2, [sp, #260]	@ 0x104
 8003cae:	2210      	movs	r2, #16
 8003cb0:	2b6e      	cmp	r3, #110	@ 0x6e
 8003cb2:	9242      	str	r2, [sp, #264]	@ 0x108
 8003cb4:	d902      	bls.n	8003cbc <__ssvfiscanf_r+0x1dc>
 8003cb6:	e005      	b.n	8003cc4 <__ssvfiscanf_r+0x1e4>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9342      	str	r3, [sp, #264]	@ 0x108
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e002      	b.n	8003cc6 <__ssvfiscanf_r+0x1e6>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	9342      	str	r3, [sp, #264]	@ 0x108
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	dd39      	ble.n	8003d42 <__ssvfiscanf_r+0x262>
 8003cce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003cd0:	0659      	lsls	r1, r3, #25
 8003cd2:	d404      	bmi.n	8003cde <__ssvfiscanf_r+0x1fe>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	5cba      	ldrb	r2, [r7, r2]
 8003cda:	0712      	lsls	r2, r2, #28
 8003cdc:	d438      	bmi.n	8003d50 <__ssvfiscanf_r+0x270>
 8003cde:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	dc47      	bgt.n	8003d74 <__ssvfiscanf_r+0x294>
 8003ce4:	466b      	mov	r3, sp
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4630      	mov	r0, r6
 8003cea:	a941      	add	r1, sp, #260	@ 0x104
 8003cec:	f000 f86a 	bl	8003dc4 <_scanf_chars>
 8003cf0:	2801      	cmp	r0, #1
 8003cf2:	d065      	beq.n	8003dc0 <__ssvfiscanf_r+0x2e0>
 8003cf4:	2802      	cmp	r0, #2
 8003cf6:	f47f af17 	bne.w	8003b28 <__ssvfiscanf_r+0x48>
 8003cfa:	e7c9      	b.n	8003c90 <__ssvfiscanf_r+0x1b0>
 8003cfc:	220a      	movs	r2, #10
 8003cfe:	e7d7      	b.n	8003cb0 <__ssvfiscanf_r+0x1d0>
 8003d00:	4629      	mov	r1, r5
 8003d02:	4640      	mov	r0, r8
 8003d04:	f000 f9aa 	bl	800405c <__sccl>
 8003d08:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d10:	9341      	str	r3, [sp, #260]	@ 0x104
 8003d12:	2301      	movs	r3, #1
 8003d14:	e7d7      	b.n	8003cc6 <__ssvfiscanf_r+0x1e6>
 8003d16:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d1c:	9341      	str	r3, [sp, #260]	@ 0x104
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e7d1      	b.n	8003cc6 <__ssvfiscanf_r+0x1e6>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e7cf      	b.n	8003cc6 <__ssvfiscanf_r+0x1e6>
 8003d26:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003d28:	06c3      	lsls	r3, r0, #27
 8003d2a:	f53f aefd 	bmi.w	8003b28 <__ssvfiscanf_r+0x48>
 8003d2e:	9b00      	ldr	r3, [sp, #0]
 8003d30:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003d32:	1d19      	adds	r1, r3, #4
 8003d34:	9100      	str	r1, [sp, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	07c0      	lsls	r0, r0, #31
 8003d3a:	bf4c      	ite	mi
 8003d3c:	801a      	strhmi	r2, [r3, #0]
 8003d3e:	601a      	strpl	r2, [r3, #0]
 8003d40:	e6f2      	b.n	8003b28 <__ssvfiscanf_r+0x48>
 8003d42:	4621      	mov	r1, r4
 8003d44:	4630      	mov	r0, r6
 8003d46:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003d48:	4798      	blx	r3
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0bf      	beq.n	8003cce <__ssvfiscanf_r+0x1ee>
 8003d4e:	e79f      	b.n	8003c90 <__ssvfiscanf_r+0x1b0>
 8003d50:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003d52:	3201      	adds	r2, #1
 8003d54:	9245      	str	r2, [sp, #276]	@ 0x114
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	6062      	str	r2, [r4, #4]
 8003d5e:	dd02      	ble.n	8003d66 <__ssvfiscanf_r+0x286>
 8003d60:	3301      	adds	r3, #1
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	e7b6      	b.n	8003cd4 <__ssvfiscanf_r+0x1f4>
 8003d66:	4621      	mov	r1, r4
 8003d68:	4630      	mov	r0, r6
 8003d6a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003d6c:	4798      	blx	r3
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0b0      	beq.n	8003cd4 <__ssvfiscanf_r+0x1f4>
 8003d72:	e78d      	b.n	8003c90 <__ssvfiscanf_r+0x1b0>
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	dc06      	bgt.n	8003d86 <__ssvfiscanf_r+0x2a6>
 8003d78:	466b      	mov	r3, sp
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	a941      	add	r1, sp, #260	@ 0x104
 8003d80:	f000 f87a 	bl	8003e78 <_scanf_i>
 8003d84:	e7b4      	b.n	8003cf0 <__ssvfiscanf_r+0x210>
 8003d86:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <__ssvfiscanf_r+0x2cc>)
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f43f aecd 	beq.w	8003b28 <__ssvfiscanf_r+0x48>
 8003d8e:	466b      	mov	r3, sp
 8003d90:	4622      	mov	r2, r4
 8003d92:	4630      	mov	r0, r6
 8003d94:	a941      	add	r1, sp, #260	@ 0x104
 8003d96:	f3af 8000 	nop.w
 8003d9a:	e7a9      	b.n	8003cf0 <__ssvfiscanf_r+0x210>
 8003d9c:	08003a31 	.word	0x08003a31
 8003da0:	08003aa7 	.word	0x08003aa7
 8003da4:	08004452 	.word	0x08004452
 8003da8:	08004432 	.word	0x08004432
 8003dac:	00000000 	.word	0x00000000
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	065b      	lsls	r3, r3, #25
 8003db4:	f53f af70 	bmi.w	8003c98 <__ssvfiscanf_r+0x1b8>
 8003db8:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003dc2:	e7f9      	b.n	8003db8 <__ssvfiscanf_r+0x2d8>

08003dc4 <_scanf_chars>:
 8003dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc8:	4615      	mov	r5, r2
 8003dca:	688a      	ldr	r2, [r1, #8]
 8003dcc:	4680      	mov	r8, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	b932      	cbnz	r2, 8003de0 <_scanf_chars+0x1c>
 8003dd2:	698a      	ldr	r2, [r1, #24]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	bf14      	ite	ne
 8003dd8:	f04f 32ff 	movne.w	r2, #4294967295
 8003ddc:	2201      	moveq	r2, #1
 8003dde:	608a      	str	r2, [r1, #8]
 8003de0:	2700      	movs	r7, #0
 8003de2:	6822      	ldr	r2, [r4, #0]
 8003de4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003e74 <_scanf_chars+0xb0>
 8003de8:	06d1      	lsls	r1, r2, #27
 8003dea:	bf5f      	itttt	pl
 8003dec:	681a      	ldrpl	r2, [r3, #0]
 8003dee:	1d11      	addpl	r1, r2, #4
 8003df0:	6019      	strpl	r1, [r3, #0]
 8003df2:	6816      	ldrpl	r6, [r2, #0]
 8003df4:	69a0      	ldr	r0, [r4, #24]
 8003df6:	b188      	cbz	r0, 8003e1c <_scanf_chars+0x58>
 8003df8:	2801      	cmp	r0, #1
 8003dfa:	d107      	bne.n	8003e0c <_scanf_chars+0x48>
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	6963      	ldr	r3, [r4, #20]
 8003e02:	5c9b      	ldrb	r3, [r3, r2]
 8003e04:	b953      	cbnz	r3, 8003e1c <_scanf_chars+0x58>
 8003e06:	2f00      	cmp	r7, #0
 8003e08:	d031      	beq.n	8003e6e <_scanf_chars+0xaa>
 8003e0a:	e022      	b.n	8003e52 <_scanf_chars+0x8e>
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d120      	bne.n	8003e52 <_scanf_chars+0x8e>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003e18:	071b      	lsls	r3, r3, #28
 8003e1a:	d41a      	bmi.n	8003e52 <_scanf_chars+0x8e>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	3701      	adds	r7, #1
 8003e20:	06da      	lsls	r2, r3, #27
 8003e22:	bf5e      	ittt	pl
 8003e24:	682b      	ldrpl	r3, [r5, #0]
 8003e26:	781b      	ldrbpl	r3, [r3, #0]
 8003e28:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003e2c:	682a      	ldr	r2, [r5, #0]
 8003e2e:	686b      	ldr	r3, [r5, #4]
 8003e30:	3201      	adds	r2, #1
 8003e32:	602a      	str	r2, [r5, #0]
 8003e34:	68a2      	ldr	r2, [r4, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	606b      	str	r3, [r5, #4]
 8003e3c:	60a2      	str	r2, [r4, #8]
 8003e3e:	b142      	cbz	r2, 8003e52 <_scanf_chars+0x8e>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	dcd7      	bgt.n	8003df4 <_scanf_chars+0x30>
 8003e44:	4629      	mov	r1, r5
 8003e46:	4640      	mov	r0, r8
 8003e48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003e4c:	4798      	blx	r3
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d0d0      	beq.n	8003df4 <_scanf_chars+0x30>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	f013 0310 	ands.w	r3, r3, #16
 8003e58:	d105      	bne.n	8003e66 <_scanf_chars+0xa2>
 8003e5a:	68e2      	ldr	r2, [r4, #12]
 8003e5c:	3201      	adds	r2, #1
 8003e5e:	60e2      	str	r2, [r4, #12]
 8003e60:	69a2      	ldr	r2, [r4, #24]
 8003e62:	b102      	cbz	r2, 8003e66 <_scanf_chars+0xa2>
 8003e64:	7033      	strb	r3, [r6, #0]
 8003e66:	2000      	movs	r0, #0
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	443b      	add	r3, r7
 8003e6c:	6123      	str	r3, [r4, #16]
 8003e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e72:	bf00      	nop
 8003e74:	08004452 	.word	0x08004452

08003e78 <_scanf_i>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	4698      	mov	r8, r3
 8003e80:	4b72      	ldr	r3, [pc, #456]	@ (800404c <_scanf_i+0x1d4>)
 8003e82:	b087      	sub	sp, #28
 8003e84:	4682      	mov	sl, r0
 8003e86:	4616      	mov	r6, r2
 8003e88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e8c:	ab03      	add	r3, sp, #12
 8003e8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e92:	4b6f      	ldr	r3, [pc, #444]	@ (8004050 <_scanf_i+0x1d8>)
 8003e94:	69a1      	ldr	r1, [r4, #24]
 8003e96:	4a6f      	ldr	r2, [pc, #444]	@ (8004054 <_scanf_i+0x1dc>)
 8003e98:	4627      	mov	r7, r4
 8003e9a:	2903      	cmp	r1, #3
 8003e9c:	bf08      	it	eq
 8003e9e:	461a      	moveq	r2, r3
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	9201      	str	r2, [sp, #4]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003eaa:	bf81      	itttt	hi
 8003eac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003eb0:	eb03 0905 	addhi.w	r9, r3, r5
 8003eb4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003eb8:	60a3      	strhi	r3, [r4, #8]
 8003eba:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003ebe:	bf98      	it	ls
 8003ec0:	f04f 0900 	movls.w	r9, #0
 8003ec4:	463d      	mov	r5, r7
 8003ec6:	f04f 0b00 	mov.w	fp, #0
 8003eca:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	6831      	ldr	r1, [r6, #0]
 8003ed2:	ab03      	add	r3, sp, #12
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	7809      	ldrb	r1, [r1, #0]
 8003ed8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003edc:	f000 f940 	bl	8004160 <memchr>
 8003ee0:	b328      	cbz	r0, 8003f2e <_scanf_i+0xb6>
 8003ee2:	f1bb 0f01 	cmp.w	fp, #1
 8003ee6:	d159      	bne.n	8003f9c <_scanf_i+0x124>
 8003ee8:	6862      	ldr	r2, [r4, #4]
 8003eea:	b92a      	cbnz	r2, 8003ef8 <_scanf_i+0x80>
 8003eec:	2108      	movs	r1, #8
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	6061      	str	r1, [r4, #4]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef6:	6022      	str	r2, [r4, #0]
 8003ef8:	6822      	ldr	r2, [r4, #0]
 8003efa:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	68a2      	ldr	r2, [r4, #8]
 8003f02:	1e51      	subs	r1, r2, #1
 8003f04:	60a1      	str	r1, [r4, #8]
 8003f06:	b192      	cbz	r2, 8003f2e <_scanf_i+0xb6>
 8003f08:	6832      	ldr	r2, [r6, #0]
 8003f0a:	1c51      	adds	r1, r2, #1
 8003f0c:	6031      	str	r1, [r6, #0]
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	f805 2b01 	strb.w	r2, [r5], #1
 8003f14:	6872      	ldr	r2, [r6, #4]
 8003f16:	3a01      	subs	r2, #1
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	6072      	str	r2, [r6, #4]
 8003f1c:	dc07      	bgt.n	8003f2e <_scanf_i+0xb6>
 8003f1e:	4631      	mov	r1, r6
 8003f20:	4650      	mov	r0, sl
 8003f22:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003f26:	4790      	blx	r2
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f040 8085 	bne.w	8004038 <_scanf_i+0x1c0>
 8003f2e:	f10b 0b01 	add.w	fp, fp, #1
 8003f32:	f1bb 0f03 	cmp.w	fp, #3
 8003f36:	d1cb      	bne.n	8003ed0 <_scanf_i+0x58>
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	b90b      	cbnz	r3, 8003f40 <_scanf_i+0xc8>
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	6063      	str	r3, [r4, #4]
 8003f40:	6863      	ldr	r3, [r4, #4]
 8003f42:	4945      	ldr	r1, [pc, #276]	@ (8004058 <_scanf_i+0x1e0>)
 8003f44:	6960      	ldr	r0, [r4, #20]
 8003f46:	1ac9      	subs	r1, r1, r3
 8003f48:	f000 f888 	bl	800405c <__sccl>
 8003f4c:	f04f 0b00 	mov.w	fp, #0
 8003f50:	68a3      	ldr	r3, [r4, #8]
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d03d      	beq.n	8003fd4 <_scanf_i+0x15c>
 8003f58:	6831      	ldr	r1, [r6, #0]
 8003f5a:	6960      	ldr	r0, [r4, #20]
 8003f5c:	f891 c000 	ldrb.w	ip, [r1]
 8003f60:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d035      	beq.n	8003fd4 <_scanf_i+0x15c>
 8003f68:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003f6c:	d124      	bne.n	8003fb8 <_scanf_i+0x140>
 8003f6e:	0510      	lsls	r0, r2, #20
 8003f70:	d522      	bpl.n	8003fb8 <_scanf_i+0x140>
 8003f72:	f10b 0b01 	add.w	fp, fp, #1
 8003f76:	f1b9 0f00 	cmp.w	r9, #0
 8003f7a:	d003      	beq.n	8003f84 <_scanf_i+0x10c>
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f82:	60a3      	str	r3, [r4, #8]
 8003f84:	6873      	ldr	r3, [r6, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	6073      	str	r3, [r6, #4]
 8003f8c:	dd1b      	ble.n	8003fc6 <_scanf_i+0x14e>
 8003f8e:	6833      	ldr	r3, [r6, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	6033      	str	r3, [r6, #0]
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	e7d9      	b.n	8003f50 <_scanf_i+0xd8>
 8003f9c:	f1bb 0f02 	cmp.w	fp, #2
 8003fa0:	d1ae      	bne.n	8003f00 <_scanf_i+0x88>
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003fa8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003fac:	d1bf      	bne.n	8003f2e <_scanf_i+0xb6>
 8003fae:	2110      	movs	r1, #16
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb4:	6061      	str	r1, [r4, #4]
 8003fb6:	e7a2      	b.n	8003efe <_scanf_i+0x86>
 8003fb8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003fbc:	6022      	str	r2, [r4, #0]
 8003fbe:	780b      	ldrb	r3, [r1, #0]
 8003fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8003fc4:	e7de      	b.n	8003f84 <_scanf_i+0x10c>
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4650      	mov	r0, sl
 8003fca:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003fce:	4798      	blx	r3
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d0df      	beq.n	8003f94 <_scanf_i+0x11c>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	05d9      	lsls	r1, r3, #23
 8003fd8:	d50d      	bpl.n	8003ff6 <_scanf_i+0x17e>
 8003fda:	42bd      	cmp	r5, r7
 8003fdc:	d909      	bls.n	8003ff2 <_scanf_i+0x17a>
 8003fde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003fea:	f105 39ff 	add.w	r9, r5, #4294967295
 8003fee:	4798      	blx	r3
 8003ff0:	464d      	mov	r5, r9
 8003ff2:	42bd      	cmp	r5, r7
 8003ff4:	d028      	beq.n	8004048 <_scanf_i+0x1d0>
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	f012 0210 	ands.w	r2, r2, #16
 8003ffc:	d113      	bne.n	8004026 <_scanf_i+0x1ae>
 8003ffe:	702a      	strb	r2, [r5, #0]
 8004000:	4639      	mov	r1, r7
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	4650      	mov	r0, sl
 8004006:	9e01      	ldr	r6, [sp, #4]
 8004008:	47b0      	blx	r6
 800400a:	f8d8 3000 	ldr.w	r3, [r8]
 800400e:	6821      	ldr	r1, [r4, #0]
 8004010:	1d1a      	adds	r2, r3, #4
 8004012:	f8c8 2000 	str.w	r2, [r8]
 8004016:	f011 0f20 	tst.w	r1, #32
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	d00f      	beq.n	800403e <_scanf_i+0x1c6>
 800401e:	6018      	str	r0, [r3, #0]
 8004020:	68e3      	ldr	r3, [r4, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60e3      	str	r3, [r4, #12]
 8004026:	2000      	movs	r0, #0
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	1bed      	subs	r5, r5, r7
 800402c:	445d      	add	r5, fp
 800402e:	442b      	add	r3, r5
 8004030:	6123      	str	r3, [r4, #16]
 8004032:	b007      	add	sp, #28
 8004034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004038:	f04f 0b00 	mov.w	fp, #0
 800403c:	e7ca      	b.n	8003fd4 <_scanf_i+0x15c>
 800403e:	07ca      	lsls	r2, r1, #31
 8004040:	bf4c      	ite	mi
 8004042:	8018      	strhmi	r0, [r3, #0]
 8004044:	6018      	strpl	r0, [r3, #0]
 8004046:	e7eb      	b.n	8004020 <_scanf_i+0x1a8>
 8004048:	2001      	movs	r0, #1
 800404a:	e7f2      	b.n	8004032 <_scanf_i+0x1ba>
 800404c:	080043fc 	.word	0x080043fc
 8004050:	080042e9 	.word	0x080042e9
 8004054:	080043c9 	.word	0x080043c9
 8004058:	08004446 	.word	0x08004446

0800405c <__sccl>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	780b      	ldrb	r3, [r1, #0]
 8004060:	4604      	mov	r4, r0
 8004062:	2b5e      	cmp	r3, #94	@ 0x5e
 8004064:	bf0b      	itete	eq
 8004066:	784b      	ldrbeq	r3, [r1, #1]
 8004068:	1c4a      	addne	r2, r1, #1
 800406a:	1c8a      	addeq	r2, r1, #2
 800406c:	2100      	movne	r1, #0
 800406e:	bf08      	it	eq
 8004070:	2101      	moveq	r1, #1
 8004072:	3801      	subs	r0, #1
 8004074:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004078:	f800 1f01 	strb.w	r1, [r0, #1]!
 800407c:	42a8      	cmp	r0, r5
 800407e:	d1fb      	bne.n	8004078 <__sccl+0x1c>
 8004080:	b90b      	cbnz	r3, 8004086 <__sccl+0x2a>
 8004082:	1e50      	subs	r0, r2, #1
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	f081 0101 	eor.w	r1, r1, #1
 800408a:	4610      	mov	r0, r2
 800408c:	54e1      	strb	r1, [r4, r3]
 800408e:	4602      	mov	r2, r0
 8004090:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004094:	2d2d      	cmp	r5, #45	@ 0x2d
 8004096:	d005      	beq.n	80040a4 <__sccl+0x48>
 8004098:	2d5d      	cmp	r5, #93	@ 0x5d
 800409a:	d016      	beq.n	80040ca <__sccl+0x6e>
 800409c:	2d00      	cmp	r5, #0
 800409e:	d0f1      	beq.n	8004084 <__sccl+0x28>
 80040a0:	462b      	mov	r3, r5
 80040a2:	e7f2      	b.n	800408a <__sccl+0x2e>
 80040a4:	7846      	ldrb	r6, [r0, #1]
 80040a6:	2e5d      	cmp	r6, #93	@ 0x5d
 80040a8:	d0fa      	beq.n	80040a0 <__sccl+0x44>
 80040aa:	42b3      	cmp	r3, r6
 80040ac:	dcf8      	bgt.n	80040a0 <__sccl+0x44>
 80040ae:	461a      	mov	r2, r3
 80040b0:	3002      	adds	r0, #2
 80040b2:	3201      	adds	r2, #1
 80040b4:	4296      	cmp	r6, r2
 80040b6:	54a1      	strb	r1, [r4, r2]
 80040b8:	dcfb      	bgt.n	80040b2 <__sccl+0x56>
 80040ba:	1af2      	subs	r2, r6, r3
 80040bc:	3a01      	subs	r2, #1
 80040be:	42b3      	cmp	r3, r6
 80040c0:	bfa8      	it	ge
 80040c2:	2200      	movge	r2, #0
 80040c4:	1c5d      	adds	r5, r3, #1
 80040c6:	18ab      	adds	r3, r5, r2
 80040c8:	e7e1      	b.n	800408e <__sccl+0x32>
 80040ca:	4610      	mov	r0, r2
 80040cc:	e7da      	b.n	8004084 <__sccl+0x28>

080040ce <__submore>:
 80040ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d2:	460c      	mov	r4, r1
 80040d4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80040d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040da:	4299      	cmp	r1, r3
 80040dc:	d11b      	bne.n	8004116 <__submore+0x48>
 80040de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040e2:	f7ff fc19 	bl	8003918 <_malloc_r>
 80040e6:	b918      	cbnz	r0, 80040f0 <__submore+0x22>
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80040f6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80040fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80040fc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004100:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004104:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004108:	7043      	strb	r3, [r0, #1]
 800410a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800410e:	7003      	strb	r3, [r0, #0]
 8004110:	6020      	str	r0, [r4, #0]
 8004112:	2000      	movs	r0, #0
 8004114:	e7ea      	b.n	80040ec <__submore+0x1e>
 8004116:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004118:	0077      	lsls	r7, r6, #1
 800411a:	463a      	mov	r2, r7
 800411c:	f000 f83c 	bl	8004198 <_realloc_r>
 8004120:	4605      	mov	r5, r0
 8004122:	2800      	cmp	r0, #0
 8004124:	d0e0      	beq.n	80040e8 <__submore+0x1a>
 8004126:	eb00 0806 	add.w	r8, r0, r6
 800412a:	4601      	mov	r1, r0
 800412c:	4632      	mov	r2, r6
 800412e:	4640      	mov	r0, r8
 8004130:	f000 f824 	bl	800417c <memcpy>
 8004134:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004138:	f8c4 8000 	str.w	r8, [r4]
 800413c:	e7e9      	b.n	8004112 <__submore+0x44>
	...

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	2300      	movs	r3, #0
 8004144:	4d05      	ldr	r5, [pc, #20]	@ (800415c <_sbrk_r+0x1c>)
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc fdba 	bl	8000cc4 <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	200002b8 	.word	0x200002b8

08004160 <memchr>:
 8004160:	4603      	mov	r3, r0
 8004162:	b510      	push	{r4, lr}
 8004164:	b2c9      	uxtb	r1, r1
 8004166:	4402      	add	r2, r0
 8004168:	4293      	cmp	r3, r2
 800416a:	4618      	mov	r0, r3
 800416c:	d101      	bne.n	8004172 <memchr+0x12>
 800416e:	2000      	movs	r0, #0
 8004170:	e003      	b.n	800417a <memchr+0x1a>
 8004172:	7804      	ldrb	r4, [r0, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	428c      	cmp	r4, r1
 8004178:	d1f6      	bne.n	8004168 <memchr+0x8>
 800417a:	bd10      	pop	{r4, pc}

0800417c <memcpy>:
 800417c:	440a      	add	r2, r1
 800417e:	4291      	cmp	r1, r2
 8004180:	f100 33ff 	add.w	r3, r0, #4294967295
 8004184:	d100      	bne.n	8004188 <memcpy+0xc>
 8004186:	4770      	bx	lr
 8004188:	b510      	push	{r4, lr}
 800418a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800418e:	4291      	cmp	r1, r2
 8004190:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004194:	d1f9      	bne.n	800418a <memcpy+0xe>
 8004196:	bd10      	pop	{r4, pc}

08004198 <_realloc_r>:
 8004198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419c:	4680      	mov	r8, r0
 800419e:	4615      	mov	r5, r2
 80041a0:	460c      	mov	r4, r1
 80041a2:	b921      	cbnz	r1, 80041ae <_realloc_r+0x16>
 80041a4:	4611      	mov	r1, r2
 80041a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041aa:	f7ff bbb5 	b.w	8003918 <_malloc_r>
 80041ae:	b92a      	cbnz	r2, 80041bc <_realloc_r+0x24>
 80041b0:	f7ff fb48 	bl	8003844 <_free_r>
 80041b4:	2400      	movs	r4, #0
 80041b6:	4620      	mov	r0, r4
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	f000 f906 	bl	80043cc <_malloc_usable_size_r>
 80041c0:	4285      	cmp	r5, r0
 80041c2:	4606      	mov	r6, r0
 80041c4:	d802      	bhi.n	80041cc <_realloc_r+0x34>
 80041c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041ca:	d8f4      	bhi.n	80041b6 <_realloc_r+0x1e>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4640      	mov	r0, r8
 80041d0:	f7ff fba2 	bl	8003918 <_malloc_r>
 80041d4:	4607      	mov	r7, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0ec      	beq.n	80041b4 <_realloc_r+0x1c>
 80041da:	42b5      	cmp	r5, r6
 80041dc:	462a      	mov	r2, r5
 80041de:	4621      	mov	r1, r4
 80041e0:	bf28      	it	cs
 80041e2:	4632      	movcs	r2, r6
 80041e4:	f7ff ffca 	bl	800417c <memcpy>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4640      	mov	r0, r8
 80041ec:	f7ff fb2a 	bl	8003844 <_free_r>
 80041f0:	463c      	mov	r4, r7
 80041f2:	e7e0      	b.n	80041b6 <_realloc_r+0x1e>

080041f4 <_strtol_l.constprop.0>:
 80041f4:	2b24      	cmp	r3, #36	@ 0x24
 80041f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041fa:	4686      	mov	lr, r0
 80041fc:	4690      	mov	r8, r2
 80041fe:	d801      	bhi.n	8004204 <_strtol_l.constprop.0+0x10>
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <_strtol_l.constprop.0+0x1e>
 8004204:	f7ff faf2 	bl	80037ec <__errno>
 8004208:	2316      	movs	r3, #22
 800420a:	6003      	str	r3, [r0, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004212:	460d      	mov	r5, r1
 8004214:	4833      	ldr	r0, [pc, #204]	@ (80042e4 <_strtol_l.constprop.0+0xf0>)
 8004216:	462a      	mov	r2, r5
 8004218:	f815 4b01 	ldrb.w	r4, [r5], #1
 800421c:	5d06      	ldrb	r6, [r0, r4]
 800421e:	f016 0608 	ands.w	r6, r6, #8
 8004222:	d1f8      	bne.n	8004216 <_strtol_l.constprop.0+0x22>
 8004224:	2c2d      	cmp	r4, #45	@ 0x2d
 8004226:	d12d      	bne.n	8004284 <_strtol_l.constprop.0+0x90>
 8004228:	2601      	movs	r6, #1
 800422a:	782c      	ldrb	r4, [r5, #0]
 800422c:	1c95      	adds	r5, r2, #2
 800422e:	f033 0210 	bics.w	r2, r3, #16
 8004232:	d109      	bne.n	8004248 <_strtol_l.constprop.0+0x54>
 8004234:	2c30      	cmp	r4, #48	@ 0x30
 8004236:	d12a      	bne.n	800428e <_strtol_l.constprop.0+0x9a>
 8004238:	782a      	ldrb	r2, [r5, #0]
 800423a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800423e:	2a58      	cmp	r2, #88	@ 0x58
 8004240:	d125      	bne.n	800428e <_strtol_l.constprop.0+0x9a>
 8004242:	2310      	movs	r3, #16
 8004244:	786c      	ldrb	r4, [r5, #1]
 8004246:	3502      	adds	r5, #2
 8004248:	2200      	movs	r2, #0
 800424a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800424e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004252:	fbbc f9f3 	udiv	r9, ip, r3
 8004256:	4610      	mov	r0, r2
 8004258:	fb03 ca19 	mls	sl, r3, r9, ip
 800425c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004260:	2f09      	cmp	r7, #9
 8004262:	d81b      	bhi.n	800429c <_strtol_l.constprop.0+0xa8>
 8004264:	463c      	mov	r4, r7
 8004266:	42a3      	cmp	r3, r4
 8004268:	dd27      	ble.n	80042ba <_strtol_l.constprop.0+0xc6>
 800426a:	1c57      	adds	r7, r2, #1
 800426c:	d007      	beq.n	800427e <_strtol_l.constprop.0+0x8a>
 800426e:	4581      	cmp	r9, r0
 8004270:	d320      	bcc.n	80042b4 <_strtol_l.constprop.0+0xc0>
 8004272:	d101      	bne.n	8004278 <_strtol_l.constprop.0+0x84>
 8004274:	45a2      	cmp	sl, r4
 8004276:	db1d      	blt.n	80042b4 <_strtol_l.constprop.0+0xc0>
 8004278:	2201      	movs	r2, #1
 800427a:	fb00 4003 	mla	r0, r0, r3, r4
 800427e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004282:	e7eb      	b.n	800425c <_strtol_l.constprop.0+0x68>
 8004284:	2c2b      	cmp	r4, #43	@ 0x2b
 8004286:	bf04      	itt	eq
 8004288:	782c      	ldrbeq	r4, [r5, #0]
 800428a:	1c95      	addeq	r5, r2, #2
 800428c:	e7cf      	b.n	800422e <_strtol_l.constprop.0+0x3a>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1da      	bne.n	8004248 <_strtol_l.constprop.0+0x54>
 8004292:	2c30      	cmp	r4, #48	@ 0x30
 8004294:	bf0c      	ite	eq
 8004296:	2308      	moveq	r3, #8
 8004298:	230a      	movne	r3, #10
 800429a:	e7d5      	b.n	8004248 <_strtol_l.constprop.0+0x54>
 800429c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80042a0:	2f19      	cmp	r7, #25
 80042a2:	d801      	bhi.n	80042a8 <_strtol_l.constprop.0+0xb4>
 80042a4:	3c37      	subs	r4, #55	@ 0x37
 80042a6:	e7de      	b.n	8004266 <_strtol_l.constprop.0+0x72>
 80042a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80042ac:	2f19      	cmp	r7, #25
 80042ae:	d804      	bhi.n	80042ba <_strtol_l.constprop.0+0xc6>
 80042b0:	3c57      	subs	r4, #87	@ 0x57
 80042b2:	e7d8      	b.n	8004266 <_strtol_l.constprop.0+0x72>
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	e7e1      	b.n	800427e <_strtol_l.constprop.0+0x8a>
 80042ba:	1c53      	adds	r3, r2, #1
 80042bc:	d108      	bne.n	80042d0 <_strtol_l.constprop.0+0xdc>
 80042be:	2322      	movs	r3, #34	@ 0x22
 80042c0:	4660      	mov	r0, ip
 80042c2:	f8ce 3000 	str.w	r3, [lr]
 80042c6:	f1b8 0f00 	cmp.w	r8, #0
 80042ca:	d0a0      	beq.n	800420e <_strtol_l.constprop.0+0x1a>
 80042cc:	1e69      	subs	r1, r5, #1
 80042ce:	e006      	b.n	80042de <_strtol_l.constprop.0+0xea>
 80042d0:	b106      	cbz	r6, 80042d4 <_strtol_l.constprop.0+0xe0>
 80042d2:	4240      	negs	r0, r0
 80042d4:	f1b8 0f00 	cmp.w	r8, #0
 80042d8:	d099      	beq.n	800420e <_strtol_l.constprop.0+0x1a>
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d1f6      	bne.n	80042cc <_strtol_l.constprop.0+0xd8>
 80042de:	f8c8 1000 	str.w	r1, [r8]
 80042e2:	e794      	b.n	800420e <_strtol_l.constprop.0+0x1a>
 80042e4:	08004452 	.word	0x08004452

080042e8 <_strtol_r>:
 80042e8:	f7ff bf84 	b.w	80041f4 <_strtol_l.constprop.0>

080042ec <_strtoul_l.constprop.0>:
 80042ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042f0:	4686      	mov	lr, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	4e33      	ldr	r6, [pc, #204]	@ (80043c4 <_strtoul_l.constprop.0+0xd8>)
 80042f6:	4628      	mov	r0, r5
 80042f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042fc:	5d37      	ldrb	r7, [r6, r4]
 80042fe:	f017 0708 	ands.w	r7, r7, #8
 8004302:	d1f8      	bne.n	80042f6 <_strtoul_l.constprop.0+0xa>
 8004304:	2c2d      	cmp	r4, #45	@ 0x2d
 8004306:	d12f      	bne.n	8004368 <_strtoul_l.constprop.0+0x7c>
 8004308:	2701      	movs	r7, #1
 800430a:	782c      	ldrb	r4, [r5, #0]
 800430c:	1c85      	adds	r5, r0, #2
 800430e:	f033 0010 	bics.w	r0, r3, #16
 8004312:	d109      	bne.n	8004328 <_strtoul_l.constprop.0+0x3c>
 8004314:	2c30      	cmp	r4, #48	@ 0x30
 8004316:	d12c      	bne.n	8004372 <_strtoul_l.constprop.0+0x86>
 8004318:	7828      	ldrb	r0, [r5, #0]
 800431a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800431e:	2858      	cmp	r0, #88	@ 0x58
 8004320:	d127      	bne.n	8004372 <_strtoul_l.constprop.0+0x86>
 8004322:	2310      	movs	r3, #16
 8004324:	786c      	ldrb	r4, [r5, #1]
 8004326:	3502      	adds	r5, #2
 8004328:	f04f 38ff 	mov.w	r8, #4294967295
 800432c:	fbb8 f8f3 	udiv	r8, r8, r3
 8004330:	2600      	movs	r6, #0
 8004332:	fb03 f908 	mul.w	r9, r3, r8
 8004336:	4630      	mov	r0, r6
 8004338:	ea6f 0909 	mvn.w	r9, r9
 800433c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004340:	f1bc 0f09 	cmp.w	ip, #9
 8004344:	d81c      	bhi.n	8004380 <_strtoul_l.constprop.0+0x94>
 8004346:	4664      	mov	r4, ip
 8004348:	42a3      	cmp	r3, r4
 800434a:	dd2a      	ble.n	80043a2 <_strtoul_l.constprop.0+0xb6>
 800434c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004350:	d007      	beq.n	8004362 <_strtoul_l.constprop.0+0x76>
 8004352:	4580      	cmp	r8, r0
 8004354:	d322      	bcc.n	800439c <_strtoul_l.constprop.0+0xb0>
 8004356:	d101      	bne.n	800435c <_strtoul_l.constprop.0+0x70>
 8004358:	45a1      	cmp	r9, r4
 800435a:	db1f      	blt.n	800439c <_strtoul_l.constprop.0+0xb0>
 800435c:	2601      	movs	r6, #1
 800435e:	fb00 4003 	mla	r0, r0, r3, r4
 8004362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004366:	e7e9      	b.n	800433c <_strtoul_l.constprop.0+0x50>
 8004368:	2c2b      	cmp	r4, #43	@ 0x2b
 800436a:	bf04      	itt	eq
 800436c:	782c      	ldrbeq	r4, [r5, #0]
 800436e:	1c85      	addeq	r5, r0, #2
 8004370:	e7cd      	b.n	800430e <_strtoul_l.constprop.0+0x22>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d8      	bne.n	8004328 <_strtoul_l.constprop.0+0x3c>
 8004376:	2c30      	cmp	r4, #48	@ 0x30
 8004378:	bf0c      	ite	eq
 800437a:	2308      	moveq	r3, #8
 800437c:	230a      	movne	r3, #10
 800437e:	e7d3      	b.n	8004328 <_strtoul_l.constprop.0+0x3c>
 8004380:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004384:	f1bc 0f19 	cmp.w	ip, #25
 8004388:	d801      	bhi.n	800438e <_strtoul_l.constprop.0+0xa2>
 800438a:	3c37      	subs	r4, #55	@ 0x37
 800438c:	e7dc      	b.n	8004348 <_strtoul_l.constprop.0+0x5c>
 800438e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004392:	f1bc 0f19 	cmp.w	ip, #25
 8004396:	d804      	bhi.n	80043a2 <_strtoul_l.constprop.0+0xb6>
 8004398:	3c57      	subs	r4, #87	@ 0x57
 800439a:	e7d5      	b.n	8004348 <_strtoul_l.constprop.0+0x5c>
 800439c:	f04f 36ff 	mov.w	r6, #4294967295
 80043a0:	e7df      	b.n	8004362 <_strtoul_l.constprop.0+0x76>
 80043a2:	1c73      	adds	r3, r6, #1
 80043a4:	d106      	bne.n	80043b4 <_strtoul_l.constprop.0+0xc8>
 80043a6:	2322      	movs	r3, #34	@ 0x22
 80043a8:	4630      	mov	r0, r6
 80043aa:	f8ce 3000 	str.w	r3, [lr]
 80043ae:	b932      	cbnz	r2, 80043be <_strtoul_l.constprop.0+0xd2>
 80043b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043b4:	b107      	cbz	r7, 80043b8 <_strtoul_l.constprop.0+0xcc>
 80043b6:	4240      	negs	r0, r0
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d0f9      	beq.n	80043b0 <_strtoul_l.constprop.0+0xc4>
 80043bc:	b106      	cbz	r6, 80043c0 <_strtoul_l.constprop.0+0xd4>
 80043be:	1e69      	subs	r1, r5, #1
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	e7f5      	b.n	80043b0 <_strtoul_l.constprop.0+0xc4>
 80043c4:	08004452 	.word	0x08004452

080043c8 <_strtoul_r>:
 80043c8:	f7ff bf90 	b.w	80042ec <_strtoul_l.constprop.0>

080043cc <_malloc_usable_size_r>:
 80043cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d0:	1f18      	subs	r0, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bfbc      	itt	lt
 80043d6:	580b      	ldrlt	r3, [r1, r0]
 80043d8:	18c0      	addlt	r0, r0, r3
 80043da:	4770      	bx	lr

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
